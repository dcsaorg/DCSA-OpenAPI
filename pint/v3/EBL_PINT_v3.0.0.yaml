openapi: 3.0.3
info:
  version: 3.0.0
  title: DCSA eBL Platform Interoperability API
  description: |
    <h1>DCSA OpenAPI specification for electronic Bill of Lading (eBL) Platform Interoperability (PINT)</h1>

    <h2>The Envelope Transfer</h2>

    The PINT API is designed to support transfer of eBL documents with non-repudiation and any number of additional documents between two eBL platforms. 

    In the most common scenario, the sending eBL platform executes the envelope transfer by:
    0. Optionally, using the [**'Receiver Validation'**](#/Receiver%20validation/post-receiver-validation) endpoint to allow the sending user to validate the identity of the receiver,  before they transfer the eBL.
    1. Initiating the envelope transfer using [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint
    2. Transferring the additional documents (one at the time) using [**'Transfer additional document'**](#/Transfer%20additional%20document) endpoint
    3. Completing the envelope transfer using [**'Finish envelope transfer'**](#/Finish%20envelope%20transfer) endpoint

    <h2>The eBL document</h2>

    The envelope transfer from the sending eBL Platform to the receiving eBL Platform always contains the **eBL document** (transferred via [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint request body [`EblEnvelope.transportDocument`](#/EblEnvelope) schema object). The eBL document must be unchanged between different envelope transfers for the lifetime of the eBL document. 

    The PINT API is designed to support transfer of the following types of eBL documents:
    1. Straight eBL documents. This type of eBL document is defined by [`EblEnvelope.transportDocument.isToOrder`](#/EblEnvelope) attribute to `false`
    2. Blank-endorsed eBL documents. This type of eBL document is created by setting [`EblEnvelope.transportDocument.isToOrder`](#/EblEnvelope) attribute to `true`, and making sure that [`EblEnvelope.transportDocument.documentParties[]`](#/EblEnvelope) list does not contain document party where `DocumentParty.partyFunction` has value `END` (Endorsee)
    3. To-order/Negotiable eBL documents. This type of eBL document is created by setting the [`EblEnvelope.transportDocument.isToOrder`](#/EblEnvelope) attribute to `true`, and making sure that [`EblEnvelope.transportDocument.documentParties[]`](#/EblEnvelope) list contains document party where `DocumentParty.partyFunction` has value `END` (Endorsee). If the current endorsee party is also in possession of the eBL (possessor), this party can endorse some other party on the same eBL Platform (and make that other party new endorsee) by executing transaction with [`Transaction.action`](#/Transaction) type `ENDO` (Endorsement). The DCSA PINT API support To-order/Negotiable documents, however, given that not all of the eBL solution providers support the split between possession and endorsements, this doesn't apply yet to interoperable eBL

    <h2>The Additional Documents</h2>

    The envelope transfer can optionally contain one or more **additional documents** which can be transferred via [**'Transfer additional document'**](#/Transfer%20additional%20document) endpoint:
    - **'Digital copy of the original physical B/L document' document** (described via [`EnvelopeManifest.eBLVisualisationByCarrier`](#/EnvelopeManifest) schema object that has been previously transferred via [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint as JWS-signed payload of [`EblEnvelope.envelopeManifestSignedContent`](#/EblEnvelope) schema object) a.k.a. **eBLVisualisationByCarrier document**. If transferred with the initial eBL envelope transfer, eBLVisualisationByCarrier document must be transferred with every subsequent envelope transfer for the lifetime of the eBL document. Also, eBLVisualisationByCarrier document must be unchanged between different envelope transfers for the lifetime of the eBL document.
    - **Supporting document** (described via entry in the [`EnvelopeManifest.supportingDocuments[]`](#/EnvelopeManifest) list object that has been previously transferred via [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint  as JWS-signed payload of [`EblEnvelope.envelopeManifestSignedContent`](#/EblEnvelope) schema object). For every envelope transfer, the sending platform can choose which supporting documents it wants to send to the receiving platform irrespective of the contents of the previously received envelope transfer. All details of the supporting documents transferred from sending to receiving platform as a part of the envelope transfer are only privy to these 2 platforms.

    <h2>Non-repudiation</h2> 

    When receiving [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint request, the receiving platform should confirm the integrity of the received [`EblEnvelope`](#/EblEnvelope) schema object for non-repudiation purposes. Since it has been decided not to use JWS for signing of [`EblEnvelope`](#/EblEnvelope) (for network traffic optimization purposes) itself, the receiving platform can confirm the integrity of the envelope data by confirming integrity of the [`EblEnvelope.envelopeManifestSignedContent`](#/EblEnvelope) JWS-signed payload [`EnvelopeManifest`](#/EnvelopeManifest), and then use contents of [`EnvelopeManifest`](#/EnvelopeManifest) schema object to confirm the integrity of the other [`EblEnvelope`](#/EblEnvelope) schema object attributes (further details can be found in the description of [`EblEnvelope`](#/EblEnvelope) schema attributes).

    At various stages during the envelope transfer process, the receiving platform can inform the sending platform whether envelope transfer has been accepted or rejected by sending the final response using the [`EnvelopeTransferFinishedResponse`](#/EnvelopeTransferFinishedResponse) schema object which has been wrapped in JWS-signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) schema object for non-repudiation purposes. All other response schema types are unsigned, and therefore they can not be used by the sending platform for the non-repudiation purposes.

    <h2>Control tracking registry support</h2>

    The PINT transfers can be guarded by a Control Tracking Registry (`CTR`). The first platform chooses what registry to use, if any, and this registry must be used for all
    remaining cross platform transfers.

    The Control Tracking Registry is the final arbiter on which platform has control of the eBL at any given moment in time and may allow senders to cancel transfers
    without waiting for signed response from the receiving platform. Additionally, the receiving platform can accept a transfer in the CTR and then fail to
    provide the correct PINT level response (such as returning an unsigned error rather than a signed acceptance response). If this happens, then the transfer
    is still accepted since the acceptance was recorded in the CTR. In all cases, parties should check with the CTR to see whether the transfer occurred. The
    PINT level information is advisory at best.

    ### API Design & Implementation Principles
    This API follows the guidelines defined in version 2.0 of the API Design & Implementation Principles which can be found on the [DCSA Developer Portal](https://developer.dcsa.org/api_design)

    ### Digital Signatures
    Please look at the following implementation guide for how to create [Digital Signatures](https://developer.dcsa.org/implementing-digital-signatures-for-transport-documents). 
    
    ### Changelog and GitHub
    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/pint/v3#v300). If you have any questions, feel free to [Contact Us](https://dcsa.org/get-involved/contact-us).

    API specification issued by [DCSA.org](https://dcsa.org/).
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
tags:
  - name: Receiver validation
    description: Receiver validation
  - name: Start envelope transfer
    description: Start envelope transfer
  - name: Transfer additional document
    description: Transfer additional document
  - name: Finish envelope transfer
    description: Finish envelope transfer
paths:
  /v3/envelopes:
    post:
      tags:
        - Start envelope transfer
      operationId: post-envelopes
      summary: Start the eBL envelope transfer
      description: |
        Start the eBL envelope transfer.
      parameters:
        - $ref: '#/components/parameters/Api-Version-Major'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EblEnvelope'
      responses:
        '200':
          description: |
            The Receiving platform either accepts the envelope transfer immediately (if there are no additional documents to be transferred, or if it concludes that it is already in the possession of all the additional documents mentioned in the [`EnvelopeManifest`](#/EnvelopeManifest)), or concludes that in has previously accepted the envelope transfer with the same contents.

            The signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) that signals the accepted envelope transfer (`RECE` or `DUPE`).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeTransferFinishedResponseSignedContent'
        '201':
          description: |
            The Receiving platform acknowledges that the envelope transfer is now active for this envelope transfer request.

            The sending platform should transfer all supporting documents listed in the [`EblEnvelope.envelopeManifestSignedContent`](#/EblEnvelope) JWS-signed payload [`EnvelopeManifest.supportingDocuments`](#/EnvelopeManifest) list, as well as eBLVisualisationByCarrier document if attribute [`EnvelopeManifest.eBLVisualisationByCarrier`](#/EnvelopeManifest) was defined, prior to sending request to finish the envelope transfer.

            If the sending platform attempts to start a new envelope transfer for an eBL that already has the active envelope transfer that is not yet completed, the receiving platform should assume that the sending platform is retrying the envelope transfer. The receiving platform should assume that the sending platform is aware that the previous envelope transfer failed or that the sending platform is not aware that the previous envelope transfer started.

            The [`EnvelopeTransferStartedResponse`](#/EnvelopeTransferStartedResponse) response is unsigned. The sending platform is required to finish the envelope transfer via [**'Finish envelope transfer'**](#/Finish%20envelope%20transfer) endpoint in order to get a signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) with the JWS-signed payload `EnvelopeTransferFinishedResponse` carrying the information whether the receiving platform has accepted or rejected the envelope transfer.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeTransferStartedResponse'
        '422':
          description: |
            Receiving platform rejects the envelope transfer.

            The signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the rejected envelope transfer (`BENV` or `BSIG`).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeTransferFinishedResponseSignedContent'
        default:
          description: |
            Request failed for the unexpected reason. The unsigned response contains all the error details.

            The sending platform is required to retry the envelope transfer until they get a signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) with the JWS-signed payload [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value providing the information whether the receiving platform has accepted or rejected the envelope transfer.  

            In the rare corner cases, the unsigned `error` response could come from middleware and hide a true envelope transfer acceptance/rejection message. The sending platform will be liable if they act on an unsigned response that does *not* match the actions of the receiving platform.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v3/envelopes/{envelopeReference}/additional-documents/{documentChecksum}':
    put:
      tags:
        - Transfer additional document
      operationId: put-additional-documents
      summary: Transfer additional document associated with the eBL envelope transfer
      description: |
        Transfer **additional document** associated with an eBL envelope transfer. The transferred document should be either one of the **supporting documents** from the [`EnvelopeManifest.supportingDocuments`](#/EnvelopeManifest) list, or **eBLVisualisationByCarrier document** if attribute [`EnvelopeManifest.eBLVisualisationByCarrier`](#/EnvelopeManifest) was defined.

        The `requestBody` should contain the document being transferred. It is recommended to use the `application/json` media type for the `requestBody`. The media type provided in the initial `ISSU` (Issuance) transaction is the one that will be associated with the transferred additional document in the end.

        The receiving platform should check that the transferred document has been declared at the start of the eBL envelope transfer.
        This should be done by verifying that the `documentChecksum` URL path parameter matches either [`EnvelopeManifest.eBLVisualisationByCarrier.documentChecksum`](#/EnvelopeManifest) attribute value (in which case the receiving platform can conclude that the sending platform has transferred the **eBLVisualisationByCarrier document**), or one of the [`DocumentMetadata.documentChecksum`](#/DocumentMetadata) values from the [`EnvelopeManifest.supportingDocuments[]`](#/EnvelopeManifest) list (in which case the receiving platform can conclude that the sending platform has transferred the **supporting document**)
         
        Furthermore, the receiving platform should compute the SHA-256 checksum of the transferred additional document, and verify that it matches the value of `documentChecksum` URL path parameter. The SHA-256 checksum MUST be calculated based on the deserialized payload.

        If all the above mentioned verifications have been successfully, the receiving platform can conclude that the additional document was transferred successfully.
      parameters:
        - $ref: '#/components/parameters/envelopeReference'
        - $ref: '#/components/parameters/documentChecksum'
        - $ref: '#/components/parameters/Api-Version-Major'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: byte
              description: |
                A Base64 encoded payload containing the file to transfer.
              example: UmF3IGNvbnRlbnQgb2YgdGhlIGZpbGUgYmVpbmcgdHJhbnNmZXJyZWQ=
      responses:
        '204':
          description: |
            The receiving platform acknowledges that the additional document was transferred successfully.

            If the envelope transfer eventually gets accepted,the receiving platform will acknowledge the additional document transfer with a JWS-signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) containing JWS-signed payload [`EnvelopeTransferFinishedResponse.receivedAdditionalDocumentChecksums[]`](#/EnvelopeTransferFinishedResponse) list containing the additional document checksum. Therefore, this is unsigned response.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '409':
          description: |
            The Receiving platform has discovered conflict between the request and the current state of the envelope transfer.
            E.g. the checksum or the size of the transferred additional document does not match the data provided in the URL path or in the request at the start of the envelope transfer.

            The signed response `EnvelopeTransferFinishedResponseSignedContent` JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the issue with the envelope transfer that does *not* reject the envelope transfer (`INCD`).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeTransferFinishedResponseSignedContent'
        '422':
          description: |
            The Receiving platform rejects the envelope transfer.

            The signed response `EnvelopeTransferFinishedResponseSignedContent` JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the rejected envelope transfer (`BENV` or `BSIG`).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeTransferFinishedResponseSignedContent'
        default:
          description: |
            Request failed for the unexpected reason. The unsigned response contains all the error details.

            The sending platform is required to retry the additional document transfer until they get a signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) with the JWS-signed payload [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value providing the information whether the receiving platform has accepted or rejected the envelope transfer.  

            In the rare corner cases, the unsigned `error` response could come from middleware and hide a true envelope transfer acceptance/rejection message. The sending platform will be liable if they act on an unsigned response that does *not* match the actions of the receiving platform.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  '/v3/envelopes/{envelopeReference}/finish-transfer':
    put:
      tags:
        - Finish envelope transfer
      operationId: put-finish-transfer
      summary: Finish the eBL envelope transfer
      description: |
        Finish the eBL envelope transfer.

        The sending platform believes all additional documents have been transferred and the envelope transfer can now be completed. 

        Prior to accepting envelope transfer, the receiving platform should ensure that all supporting documents listed in the [`EnvelopeManifest.supportingDocument`](#/EnvelopeManifest) list have been successfully transferred, as well as eBLVisualisationByCarrier document if attribute [`EnvelopeManifest.eBLVisualisationByCarrier`](#/EnvelopeManifest) was defined. Otherwise, The receiving platform should reject the envelope transfer.
      parameters:
        - $ref: '#/components/parameters/envelopeReference'
        - $ref: '#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: |
            The Receiving platform accepts the envelope transfer.

            The signed response `EnvelopeTransferFinishedResponseSignedContent` JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the accepted envelope transfer (`RECE` or `DUPE`).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeTransferFinishedResponseSignedContent'
        '409':
          description: |
            The Receiving platform has discovered conflict between the request and the current state of the envelope transfer.

            The signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the issue with the envelope transfer that does *not* reject the envelope transfer (`DISE` or `MDOC`).

            In the case of `MDOC` [`responseCode`](#/EnvelopeTransferFinishedResponse), the receiving platform cannot accept the envelope transfer due to one or more missing additional documents. In this case, the sending platform should (re)send the missing documents (provided in [`EnvelopeTransferFinishedResponse.missingAdditionalDocumentChecksums[]`](#/EnvelopeTransferFinishedResponse) list)  and then retry to finish the envelope transfer.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeTransferFinishedResponseSignedContent'
        '422':
          description: |
            The Receiving platform rejects the envelope transfer.

            The signed response `EnvelopeTransferFinishedResponseSignedContent` JWS-signed payload must contain [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value that signals the rejected envelope transfer (`BENV` or `BSIG`).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvelopeTransferFinishedResponseSignedContent'
        default:
          description: |
            Request failed for the unexpected reason. The unsigned response contains all the error details.

            The sending platform should retry to finish the envelope transfer until it gets the signed response [`EnvelopeTransferFinishedResponseSignedContent`](#/EnvelopeTransferFinishedResponseSignedContent) with the JWS-signed payload [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse) attribute value providing the information whether the receiving platform has accepted or rejected the envelope transfer.  

            In the rare corner cases, the unsigned `error` response could come from middleware and hide a true envelope transfer acceptance/rejection message. The sending platform will be liable if they act on an unsigned response that does *not* match the actions of the receiving platform.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v3/receiver-validation:
    post:
      tags:
        - Receiver validation
      operationId: post-receiver-validation
      summary: Enable a user to validate the receiver
      description: |
        Request the name of a party given a party code. This enables the sending user to validate
        the receiver information (similar how bank transfers enable users to conform the receiver
        before confirming the transfer).

        A successful response to this query asserts that the platform will accept an eBL for the
        account or user denoted by the provided identifying code and that said account or user
        is "active and able to accept interoperable eBLs" as defined by the platform hosting
        the account or user.

        The transfer can still be rejected due to an unknown user if the transfer has
        multiple conflicting identifying codes. Platforms that supports using multiple identifying
        codes when transferring an eBL will need to consider how they ensure they do not by accident
        include conflicting codes.
      parameters:
        - $ref: '#/components/parameters/Api-Version-Major'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IdentifyingCode'
      responses:
        '200':
          description: |
            On a successful match, this response includes the relevant information that should be displayed to the user
            to help them assert they have the correct party.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiverValidationResponse'
        '404':
          description: |
            If the server cannot identify an account or user via the given party code, then it should use this
            response code. This response is also applicable if the query matches multiple distinct accounts or
            when the platform would reject a transfer request to said account or user.

            Note this code is also used, if the client is using a code list provider that the server cannot
            (or will not) support. As an example, platforms are not required to support codes issued by
            other eBL platforms and can unconditionally reject lookup requests for them with this response.

            The response is deliberately vague on negative results to limit data exposure by default. The
            server may at its discretion include more details about the underlying issue in the response
            body.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: |
            Request failed for the unexpected reason. The unsigned response contains all the error details.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  headers:
    API-Version:
      schema:
        type: string
        example: 3.0.0
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
  schemas:
    ##############
    # Simple types
    ##############
    DocumentChecksum:
      type: string
      pattern: ^[0-9a-f]+$
      maxLength: 64
      minLength: 64
      description: |
        The checksum of the document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The transport document must be in the [RFC 8785](https://datatracker.ietf.org/doc/html/rfc8785) canonical form before the checksum is computed.
      example: 76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f
    ##############
    # Objects 
    ##############
    ErrorResponse:
      title: Error Response
      type: object
      description: Unexpected error
      properties:
        httpMethod:
          description: |
            The HTTP method used to make the request e.g. `GET`, `POST`, etc
          type: string
          example: POST
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTION
            - PATCH
        requestUri:
          description: |
            The URI that was requested.
          type: string
          example: /v1/events
        statusCode:
          description: |
            The HTTP status code returned.
          type: integer
          format: int32
          example: 400
        statusCodeText:
          description: |
            A standard short description corresponding to the HTTP status code.
          type: string
          maxLength: 50
          example: Bad Request
        statusCodeMessage:
          description: |
            A long description corresponding to the HTTP status code with additional information.
          type: string
          maxLength: 200
          example: The supplied data could not be accepted
        providerCorrelationReference:
          description: |
            A unique identifier to the HTTP request within the scope of the API provider.
          type: string
          maxLength: 100
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          description: |
            The DateTime corresponding to the error occurring.
          type: string
          format: date-time
          example: '2024-09-04T09:41:00Z'
        errors:
          type: array
          description: |
            An array of errors providing more detail about the root cause.
          minItems: 1
          items:
            $ref: '#/components/schemas/DetailedError'
      required:
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
        - errorDateTime
        - errors
    DetailedError:
      type: object
      title: Detailed Error
      description: |
        A detailed description of what has caused the error.
      properties:
        errorCode:
          type: integer
          format: int32
          description: |
            The detailed error code returned.

              - `7000-7999` Technical error codes
              - `8000-8999` Functional error codes
              - `9000-9999` API provider-specific error codes            

            [Error codes as specified by DCSA](https://developer.dcsa.org/standard-error-codes).
          minimum: 7000
          maximum: 9999
          example: 7003
        property:
          type: string
          maxLength: 100
          description: |
            The name of the property causing the error.
          example: facilityCode
        value:
          type: string
          maxLength: 500
          description: |
            The value of the property causing the error serialised as a string exactly as in the original request.
          example: SG SIN WHS
        jsonPath:
          type: string
          maxLength: 500
          description: |
            A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
          example: $.location.facilityCode
        errorCodeText:
          description: |
            A standard short description corresponding to the `errorCode`.
          type: string
          maxLength: 100
          example: invalidData
        errorCodeMessage:
          type: string
          maxLength: 5000
          description: |
            A long description corresponding to the `errorCode` with additional information.
          example: Spaces not allowed in facility code
      required:
        - errorCodeText
        - errorCodeMessage
    EblEnvelope:
      type: object
      title: Ebl Envelope
      properties:
        transportDocument:
          $ref: '#/components/schemas/TransportDocument'
        envelopeManifestSignedContent:
          $ref: '#/components/schemas/EnvelopeManifestSignedContent'
        envelopeTransferChain:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/EnvelopeTransferChainEntrySignedContent'
          description: |
            The ordered list of [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entries associated with the eBL document.

            The receiving platform is required to validate that all the list entries are present, valid, and they are correctly ordered by:
            1. Computing the SHA-256 checksum of the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the `envelopeTransferChain[]` list, and confirming it's equal to received `EblEnvelope.envelopeManifestSignedContent` JWS-signed payload [`EnvelopeManifest.lastEnvelopeTransferChainEntrySignedContentChecksum`](#/EnvelopeManifest) attribute value. 
            2. Walking back through the `envelopeTransferChain[]` list from the last entry, for each previous [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the list, computing the SHA-256 checksum and confirming it's equal to the current [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry JWT-signed payload [`EnvelopeTransferChainEntry.previousEnvelopeTransferChainEntrySignedContentChecksum`](#/EnvelopeTransferChainEntry) attribute value.

            The receiving platform can reject the envelope with `BENV` [`responseCode`](#/EnvelopeTransferFinishedResponse) if it concludes that the list entries are not correctly ordered by the sending platform, or discovers any other validity-related issue in the list.

            The first [`EnvelopeTransferChainEntry`](#/EnvelopeTransferChainEntry) in the `envelopeTransferChain[]` list should contain the ISSU (issuance) transaction as the first transaction in the [`EnvelopeTransferChainEntry.transactions[]`](#/EnvelopeTransferChainEntry) list. 
      required:
        - transportDocument
        - envelopeManifestSignedContent
        - envelopeTransferChain
    ReceiverValidationResponse:
      type: object
      title: Receiver Validation Response
      description: |
        Response to a receiver validation response, where the party code could successfully identified.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: Globeteam
      required:
        - partyName
    EnvelopeManifest:
      type: object
      title: Envelope Manifest
      properties:
        transportDocumentChecksum:
          type: string
          minLength: 64
          maxLength: 64
          pattern: ^[0-9a-f]+$
          description: |
            The checksum of the eBL document (a.k.a. transport document) computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).

            In order to guard itself against different types of MITM attacks (e.g. 'replay attack' where last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list is replaced with the similar entry extracted from the another envelope transfer previously sent by the same sending platform), upon start of the envelope transfer the receiving platform should validate that the [`EnvelopeManifest.transportDocumentChecksum`](#/EnvelopeManifest) attribute and the [`EnvelopeTransferChainEntry.transportDocumentChecksum`](#/EnvelopeTransferChainEntry) attribute of the last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list have the same value.

            The checksum is computed on the [canonical form of the JSON object](https://gibson042.github.io/canonicaljson-spec/).
          example: 583c29ab3e47f2d80899993200d3fbadb9f8a367f3a39f715935c46d7a283006
        lastEnvelopeTransferChainEntrySignedContentChecksum:
          type: string
          minLength: 64
          maxLength: 64
          pattern: ^[0-9a-f]+$
          # TODO: Verify and if necessary update the example, or remove it altogether
          example: 20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9
          description: |
            This attribute should contain the checksum of the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list. The checksum is computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).
        eBLVisualisationByCarrier:
          allOf:
            - $ref: '#/components/schemas/DocumentMetadata'
          description: |
            actual type: [`DocumentMetadata`](#\DocumentMetadata)

            This attribute is used to simplify validation of the document metadata of the **'Digital copy of the original physical B/L document' document** a.k.a. **eBLVisualisationByCarrier document**. If this attribute is defined, for each [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list, JWS-signed payload [`EnvelopeTransferChainEntry.eBLVisualisationByCarrier`](#/EnvelopeTransferChainEntry) attribute value should be identical to the value of this attribute.
        supportingDocuments:
          type: array
          items:
            $ref: '#/components/schemas/DocumentMetadata'
      required:
        - transportDocumentChecksum
        - lastEnvelopeTransferChainEntrySignedContentChecksum
    EnvelopeManifestSignedContent:
      type: string
      pattern: ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$
      description: |
        JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [EnvelopeManifest](#/EnvelopeManifest).
      # TODO: Verify and if necessary update the example, or remove it altogether
      example: eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJ0cmFuc3BvcnREb2N1bWVudENoZWNrc3VtIjogIjU4M2MyOWFiM2U0N2YyZDgwODk5OTkzMjAwZDNmYmFkYjlmOGEzNjdmM2EzOWY3MTU5MzVjNDZkN2EyODMwMDYiLCJsYXN0RW52ZWxvcGVUcmFuc2ZlckNoYWluRW50cnlTaWduZWRDb250ZW50Q2hlY2tzdW0iOiAiMjBhMDI1N2IzMTNhZTA4NDE3ZTA3ZjY1NTVjNGVjODI5YTUxMmMwODNmM2VhZDE2YjQxMTU4MDE4YTIyYWJlOSJ9.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA
    IssuanceManifest:
      type: object
      title: Issuance Manifest
      properties:
        documentChecksum:
          type: string
          pattern: ^[0-9a-f]+$
          maxLength: 64
          minLength: 64
          description: |
            The checksum of the transport document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The transport document must be in the [RFC 8785](https://datatracker.ietf.org/doc/html/rfc8785) canonical form before the checksum is computed.
          example: 76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f
        eBLVisualisationByCarrierChecksum:
          type: string
          pattern: ^[0-9a-f]+$
          maxLength: 64
          minLength: 64
          description: |
            The checksum of the document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The checksum is computed on the `content` field in its decoded form.
          example: 76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f
        issueToChecksum:
          type: string
          pattern: ^[0-9a-f]+$
          maxLength: 64
          minLength: 64
          description: |
            The checksum of the `issueTo` attribute computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234). The value must be in the [RFC 8785](https://datatracker.ietf.org/doc/html/rfc8785) canonical form before the checksum is computed.
          example: 76a7d14c83d7268d643ae7345c448de60701f955d264a743e6928a0b8268b24f
      description: |
        Checksums of the carrier provided documents from the issuance time.
      required:
        - documentChecksum
        - issueToChecksum
    EnvelopeTransferChainEntry:
      type: object
      title: Envelope Transfer Chain Entry
      properties:
        eblPlatform:
          type: string
          pattern: ^\S+$
          maxLength: 4
          description: |
            The eBL platform of the transaction party. 
            The value **MUST** be one of:
            - `WAVE` (Wave)
            - `CARX` (CargoX)
            - `ESSD` (EssDOCS)
            - `IDT` (ICE Digital Trade)
            - `BOLE` (Bolero)
            - `EDOX` (EdoxOnline)
            - `IQAX` (IQAX)
            - `SECR` (Secro)
            - `TRGO` (TradeGO)
            - `ETEU` (eTEU)
            - `TRAC` (Enigio trace:original)
            - `BRIT` (BRITC eBL)
            - `COVA` (Covantis)
            - `ETIT` (e-title)
            - `KTNE` (KTNET)
            - `CRED` (Credore)
          example: BOLE
        transportDocumentChecksum:
          type: string
          minLength: 64
          maxLength: 64
          pattern: ^[0-9a-f]+$
          description: |
            The checksum of the eBL document (a.k.a. transport document) computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).

            In order to guard itself against different types of MITM attacks (e.g. 'replay attack' where last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list is replaced with the similar entry extracted from the another envelope transfer previously sent by the same sending platform), upon start of the envelope transfer the receiving platform should validate that the [`EnvelopeManifest.transportDocumentChecksum`](#/EnvelopeManifest) attribute and the [`EnvelopeTransferChainEntry.transportDocumentChecksum`](#/EnvelopeTransferChainEntry) attribute of the last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list have the same value.

            The checksum is computed on the [canonical form of the JSON object](https://gibson042.github.io/canonicaljson-spec/).
          example: 583c29ab3e47f2d80899993200d3fbadb9f8a367f3a39f715935c46d7a283006
        previousEnvelopeTransferChainEntrySignedContentChecksum:
          type: string
          minLength: 64
          maxLength: 64
          pattern: ^[0-9a-f]+$
          nullable: true
          # TODO: Verify and if necessary update the example, or remove it altogether
          example: 20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9
          description: |
            This attribute should *not* be defined for the first entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list. For all other entries after the first entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list, this attribute **MUST** be defined and contain the checksum of the previous [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list. This attribute can be used to track signed envelope transfers between platforms (for details check description of [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope)).

            The checksum is computed over the entire [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry (JWS-signed payload is described in the `EnvelopeTransferChainEntry` schema). The checksum is computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).
        issuanceManifestSignedContent:
          type: string
          pattern: ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$
          description: |
            JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [IssuanceManifest](#/IssuanceManifest).
            The field is conditional and must be provided in the first EnvelopeTransferChainEntry. The value must be signed by the carrier.
          # TODO: Update example
          example: eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJkb2N1bWVudENoZWNrc3VtIjogIjhkYzk5ZDhhYzkyMjI0MGM1NWMwMzg0NWY0OWRlZjY0MTg3MTQ2NjUxYmFlNGY5YTYzMTMxMjc3Y2YwMGQ5ZGYiLCJlQkxWaXN1YWxpc2F0aW9uQnlDYXJyaWVyQ2hlY2tzdW0iOiAiNzZhN2QxNGM4M2Q3MjY4ZDY0M2FlNzM0NWM0NDhkZTYwNzAxZjk1NWQyNjRhNzQzZTY5MjhhMGI4MjY4YjI0ZiIsImlzc3VlVG9DaGVja3N1bSI6ICI3NmE3ZDE0YzgzZDcyNjhkNjQzYWU3MzQ1YzQ0OGRlNjA3MDFmOTU1ZDI2NGE3NDNlNjkyOGEwYjgyNjhiMjRmIn0.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA
        controlTrackingRegistry:
          type: string
          format: uri
          maxLength: 1024
          description: |
            The URI of the Control Tracking Registry (CTR) used to protect the PINT transfers.

            The URI must be the base URI of the CTR including the major version of the CTR API used.
            This ensures that the receiver knows which major version of the CTR API is used for the
            CTR protection.

            The field is conditional and must be provided in the first EnvelopeTransferChainEntry if
            it is provided. It must be omitted in all other EnvelopeTransferChainEntry objects.

            When the attribute is provided in the first EnvelopeTransferChainEntry, then all transfers
            must be recorded in the CTR in accordance with the DCSA CTR API. Transfers not recorded
            in the CTR are invalid and must be rejected.

            When the attribute is omitted in the first EnvelopeTransferChainEntry, the PINT transfers
            are not protected by a CTR.
          example: https://ctr.dcsa.org/v1
        transactions:
          type: array
          minItems: 1
          description: |
            The eBL platform is required to record certain internal transactions as issuance, endorsements and surrender. Internal possession transfers are not required but may be done
          items:
            $ref: '#/components/schemas/Transaction'
      required:
        - eblPlatform
        - transportDocumentChecksum
        - transactions
    EnvelopeTransferChainEntrySignedContent:
      type: string
      pattern: ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$
      description: |
        JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [EnvelopeTransferChainEntry](#/EnvelopeTransferChainEntry).
      # TODO: Verify and if necessary update the example, or remove it altogether
      example: eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJlYmxQbGF0Zm9ybSI6IkJPTEUiLCJ0cmFuc3BvcnREb2N1bWVudENoZWNrc3VtIjoiNTgzYzI5YWIzZTQ3ZjJkODA4OTk5OTMyMDBkM2ZiYWRiOWY4YTM2N2YzYTM5ZjcxNTkzNWM0NmQ3YTI4MzAwNiIsInRyYW5zYWN0aW9ucyI6W3siYWN0aW9uIjoiVFJOUyIsImFjdG9yIjp7InBhcnR5TmFtZSI6IklLRUEgRGVubWFyayIsImVibFBsYXRmb3JtIjoiQk9MRSIsImlkZW50aWZ5aW5nQ29kZXMiOlt7ImNvZGVMaXN0UHJvdmlkZXIiOiJHTEVJRiIsInBhcnR5Q29kZSI6IjIxMzgwMEhYNklaTTFRTkJBSjMzIiwiY29kZUxpc3ROYW1lIjoiTEVJIn1dfSwicmVjaXBpZW50Ijp7InBhcnR5TmFtZSI6IkhlbnJpayBMYXJzZW4iLCJlYmxQbGF0Zm9ybSI6IldBVkUiLCJ0YXhMZWdhbFJlZmVyZW5jZXMiOlt7InR5cGUiOiJDVlIiLCJjb3VudHJ5Q29kZSI6IkRLIiwidmFsdWUiOiIzMzk5MTI4MiJ9XX0sInRpbWVzdGFtcCI6MTcxMzM0MjY3OTUzMX1dfQ.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA
    EnvelopeTransferStartedResponse:
      type: object
      title: Envelope Transfer Started Response
      properties:
        envelopeReference:
          type: string
          maxLength: 100
          description: |
            Opaque receiving platform-provided identifier for a given eBL envelope.
          example: 4TkP5nvgTly0MwFrDxfIkR2rvOjkUIgzibBoKABU
        transportDocumentChecksum:
          type: string
          minLength: 64
          maxLength: 64
          pattern: ^[0-9a-f]+$
          description: |
            The checksum of the eBL document (a.k.a. transport document) computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).

            In order to guard itself against different types of MITM attacks (e.g. 'replay attack' where last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list is replaced with the similar entry extracted from the another envelope transfer previously sent by the same sending platform), upon start of the envelope transfer the receiving platform should validate that the [`EnvelopeManifest.transportDocumentChecksum`](#/EnvelopeManifest) attribute and the [`EnvelopeTransferChainEntry.transportDocumentChecksum`](#/EnvelopeTransferChainEntry) attribute of the last entry in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list have the same value.

            The checksum is computed on the [canonical form of the JSON object](https://gibson042.github.io/canonicaljson-spec/).
          example: 583c29ab3e47f2d80899993200d3fbadb9f8a367f3a39f715935c46d7a283006
        lastEnvelopeTransferChainEntrySignedContentChecksum:
          type: string
          minLength: 64
          maxLength: 64
          pattern: ^[0-9a-f]+$
          # TODO: Verify and if necessary update the example, or remove it altogether
          example: 20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9
          description: |
            This attribute should contain the checksum of the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list received. The checksum is computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).
        missingAdditionalDocumentChecksums:
          type: array
          minItems: 1
          description: |
            The list of the checksums of the additional documents that the receiving platform expect to receive in good order before it can accept the envelope transfer.
          items:
            $ref: '#/components/schemas/DocumentChecksum'
      required:
        - envelopeReference
        - transportDocumentChecksum
        - lastEnvelopeTransferChainEntrySignedContentChecksum
        - missingAdditionalDocumentChecksums
    EnvelopeTransferFinishedResponse:
      type: object
      title: Envelope Transfer Finished Response
      required:
        - lastEnvelopeTransferChainEntrySignedContentChecksum
        - responseCode
      # TODO: Verify and if necessary update the example, or remove it altogether
      example:
        lastEnvelopeTransferChainEntrySignedContentChecksum: d56a93a7e9f86a2d895df818e0440bdca6ffe03246e2fee14131f2e66c84c75a
        responseCode: RECE
      properties:
        lastEnvelopeTransferChainEntrySignedContentChecksum:
          type: string
          minLength: 64
          maxLength: 64
          pattern: ^[0-9a-f]+$
          description: |
            This attribute should contain the checksum of the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list received. The checksum is computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).
          # TODO: Verify and if necessary update the example, or remove it altogether
          example: 20a0257b313ae08417e07f6555c4ec829a512c083f3ead16b41158018a22abe9
        responseCode:
          type: string
          description: |
            The response code can have one of the following values:
            - `RECE` (Received)
            - `DUPE` (Duplicated Envelope)
            - `BSIG` (Bad Signature)
            - `BENV` (Bad Envelope)
            - `INCD` (Inconclusive Document)
            - `MDOC` (Missing Document)
            - `DISE` (Disputed Envelope)

            The `RECE` `responseCode` is used when the receiving platform acknowledges that the envelope transfer is accepted. 
            This response code can also be used when replying to [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint request if and only if the receiving platform is already in possession of all the additional documents listed in the `EnvelopeManifest`, and is ready to commit to accepting the envelope transfer.  This should only happen in special cases (e.g. Platform A which has performed the initial envelope transfer with additional documents to platform B later during the lifetime of the same eBL receives [**'Start envelope transfer'**](#/Start%20envelope%20transfer) endpoint request from some other Platform C with `EnvelopeManifest` listing additional documents, for which it concludes (based on checksum comparison) that they are identical to the addition documents from the initial envelope transfer). The `RECE` `responseCode` should be used together with the HTTP `200 Ok` response status code.

            The `DUPE` `responseCode` is used in place of `RECE` `responseCode` when the receiving platform has already previously acknowledged and accepted the transfer of this envelope. In this case, the receiving platform asserts that this envelope transfer request is invalid but the prior envelope transfer was successful.  The receiving platform should include accepted version of last `EnvelopeTransferChainEntrySignedContent` entry in `EblEnvelope.envelopeTransferChain` list in the `duplicateOfAcceptedEnvelopeTransferChainEntrySignedContent` field. The receiving platform is only required to detect DUPE `responseCode` if the EnvelopeTransferChainEntrySignedContentChecksum is the same between the two transfer attempt and the sending platform is expected to reuse the same envelope. The `DUPE` `responseCode` should be used together with the HTTP `200 Ok` response status code.

            The `BSIG` `responseCode` is used when the receiving platform could not process the envelope related to a signature and rejects the concrete transfer request. This response code should be used when the receiving platform decides to reject envelope transfer due to the issues with the signature used to create JWS content when starting envelope transfer (`EblEnvelope.envelopeManifestSignedContent`, and/or one or more `EnvelopeTransferChainEntrySignedContentChecksum` entries in the `EblEnvelope.envelopeTransferChain` list). Example use cases: the signature was made by an unknown key, the key or signature expired, the signed content does not match the EnvelopeTransferChainEntrySignedContentChecksum, etc. In this case, the receiving platform makes no assertions about the validity of the envelope contents. The sending platform may attempt to resolve the signature issue and retry with the same EnvelopeTransferChainEntrySignedContentChecksum. The `BSIG` `responseCode` should be used together with a HTTP `422 Unprocessable Content` response status code.

            The `BENV` `responseCode` is used when the receiving platform can not process the envelope and rejects the concrete envelope transfer request. This response code can be used when the receiving platform knows the transfer cannot succeed in the future and the sending platform should retain the eBL. Example use cases could be that the envelope does not list the receiving platform as the intended recipient, the transferee ID is unknown, an invalid action code was used in the transactions for this envelope transfer, etc. In this case, the receiving platform is asserting that the envelope itself is not acceptable. Basically any use case where the receiving platform decides to reject the envelope transfer for technical reasons that are not covered by `BSIG` `responseCode`. The `BENV` `responseCode` should be used together with a HTTP `422 Unprocessable Content` response status code.

            The `INCD` `responseCode` is used when the receiving platform concludes that the transferred additional document's checksum or size does not match the document checksum or size provided either directly in URL path or in `EnvelopeManifest` sent in the start envelope transfer request. The `INCD` `responseCode` does *not* reject the envelope transfer. The sending platform should try to either resend the correct document, or attempt to start new envelope transfer request with changed `EnvelopeManifest` that will contain correct document checksum and/or size for the inconclusive document. The `INCD` `responseCode` is not valid as a response to the start of a envelope transfer.  The `INCD` `responseCode` should be used together with a HTTP `409 Conflict` response status code.

            The `MDOC` `responseCode` is used when the receiving platform cannot accept the envelope transfer due to a missing additional document.  The `MDOC` `responseCode` does *not* reject the envelope transfer. The sending platform should resend relevant documents (provided in `missingAdditionalDocumentChecksums`) and then retry finishing the envelope transfer. The `MDOC` `responseCode` is not valid as a response to the start of a envelope transfer.  The `MDOC` `responseCode` should be used together with a HTTP `409 Conflict` response status code.

            The `DISE` `responseCode` is used when the receiving platform has successfully parsed the envelope and validated the signatures.  However, the receiving platform believes the envelope contradicts its current knowledge of the envelope transfer chain for the eBL document and there is a risk of double spending. The concrete detection method is implementation-specific. However, a method would be for the receiving platform to confirm whether it has `EnvelopeTransferChainEntrySignedContentChecksum` for the document, which are not listed in the transferred eBL envelope. Dispute resolution is not covered in the API and must be handled in via out of band process. The `DISE` `responseCode` should be used together with the HTTP `409 Conflict` response status code.

            Unless otherwise stated for a given response code, receiving platform will reject the active envelope transfer (if any). Some failures that result in receiving platform rejecting the envelope transfer may be retriable, in which case the sending platform can attempt a new envelope transfer for the same envelope.

            The sending platform must not rely on the HTTP response status code alone as it is not covered by the signature. When there is a mismatch between the HTTP response status code and the signed response `EnvelopeTransferFinishedResponseSignedResponse` JWS-signed payload [`EnvelopeTransferFinishedResponse.responseCode`](#/EnvelopeTransferFinishedResponse), [`responseCode`](#/EnvelopeTransferFinishedResponse) decides the outcome.

            Note: When the transfer is guarded by a Control Tracking Registry and the PINT level response conflicts with the Control Tracking Registry state, then the Control Tracking Registry should be trusted. As an example, if the PINT response indicates a transfer failure but the CTR has data suggesting the transfer was accepted,
            then the sending platform must assume the transfer was successful.
          enum:
            - RECE
            - DUPE
            - BSIG
            - BENV
            - INCD
            - MDOC
            - DISE
          example: RECE
        duplicateOfAcceptedEnvelopeTransferChainEntrySignedContent:
          type: string
          pattern: ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$
          description: |
            actual type: [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) 

            This attribute should be defined only in the case that [`responseCode`](#/EnvelopeTransferFinishedResponse) attribute has `DUPE` value, indicating that receiving platform has already received and accepted envelope transfer for the eBL document that is the sending platform trying to resend in the duplicate envelope transfer.
            This attribute should contain the last [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry in the [`EblEnvelope.envelopeTransferChain[]`](#/EblEnvelope) list received at the start of already received and accepted envelope transfer. 

            The provided entry might differ in the retry (e.g. due to signing with the private key that differs from the private key used to sign already received and accepted envelope transfer). 
          example: eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJlYmxQbGF0Zm9ybSI6IkJPTEUiLCJ0cmFuc3BvcnREb2N1bWVudENoZWNrc3VtIjoiNTgzYzI5YWIzZTQ3ZjJkODA4OTk5OTMyMDBkM2ZiYWRiOWY4YTM2N2YzYTM5ZjcxNTkzNWM0NmQ3YTI4MzAwNiIsInRyYW5zYWN0aW9ucyI6W3siYWN0aW9uIjoiVFJOUyIsImFjdG9yIjp7InBhcnR5TmFtZSI6IklLRUEgRGVubWFyayIsImVibFBsYXRmb3JtIjoiQk9MRSIsImlkZW50aWZ5aW5nQ29kZXMiOlt7ImNvZGVMaXN0UHJvdmlkZXIiOiJHTEVJRiIsInBhcnR5Q29kZSI6IjIxMzgwMEhYNklaTTFRTkJBSjMzIiwiY29kZUxpc3ROYW1lIjoiTEVJIn1dfSwicmVjaXBpZW50Ijp7InBhcnR5TmFtZSI6IkhlbnJpayBMYXJzZW4iLCJlYmxQbGF0Zm9ybSI6IldBVkUiLCJ0YXhMZWdhbFJlZmVyZW5jZXMiOlt7InR5cGUiOiJDVlIiLCJjb3VudHJ5Q29kZSI6IkRLIiwidmFsdWUiOiIzMzk5MTI4MiJ9XX0sInRpbWVzdGFtcCI6MTcxMzM0MjY3OTUzMX1dfQ.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA
        reason:
          type: string
          nullable: true
          description: |
            Free text comment for clarifying the result or suggesting follow up actions. Should be null or omitted when [`responseCode`](#/EnvelopeTransferFinishedResponse) is `RECE`, where there is no additional information to be given.
          maxLength: 255
          example: null
        missingAdditionalDocumentChecksums:
          type: array
          description: |
            Used with the `MDOC` [`responseCode`](#/EnvelopeTransferFinishedResponse) to signal which additional documents the receiving platform believes have not been transferred.

            For other response codes, this attribute should be omitted.
          items:
            $ref: '#/components/schemas/DocumentChecksum'
        receivedAdditionalDocumentChecksums:
          type: array
          description: |
            The receiving platform includes this attribute with the `RECE` or `DUPE` [`responseCode`](#/EnvelopeTransferFinishedResponse) to confirm all additional documents it received during the envelope transfer. This attribute must include all the additional documents included in the envelope transfer request (including the ones the receiving platform already had). This attribute provides the sending platform with a signed receipt of the documents.

            For other response codes, this attribute should be omitted.
          items:
            $ref: '#/components/schemas/DocumentChecksum'
    EnvelopeTransferFinishedResponseSignedContent:
      type: string
      pattern: ^[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+\.[A-Za-z0-9_-]+$
      description: |
        JWS content with compact serialization according to [RFC 7515](https://datatracker.ietf.org/doc/html/rfc7515#section-7.1). JWS-signed payload is defined in schema [EnvelopeTransferFinishedResponse](#/EnvelopeTransferFinishedResponse).
      # TODO: Verify and if necessary update the example, or remove it altogether
      example: eyJhbGciOiJSUzI1NiIsImtpZCI6IlVhRVdLNmt2ZkRITzNZT2NwUGl2M1RCT2JQTzk2SFZhR2U0czFhUUxBZU0ifQ.eyJsYXN0RW52ZWxvcGVUcmFuc2ZlckNoYWluRW50cnlTaWduZWRDb250ZW50Q2hlY2tzdW0iOiJkNTZhOTNhN2U5Zjg2YTJkODk1ZGY4MThlMDQ0MGJkY2E2ZmZlMDMyNDZlMmZlZTE0MTMxZjJlNjZjODRjNzVhIiwicmVzcG9uc2VDb2RlIjoiUkVDRSJ9.c4SJ9-61fE6RmeIuZ3EI-TSM0M6qXuOudtr3YhpDjqVMaYk_RYpaWYvw75ssTbjgGFKTBKCy5lpmOfb8Fq--Qu2k0MWbH6qdX5jTYwl0DX946RQg-hnmVTg9np3bmqVeKqKURyV-UUdG-KK_XCGzPZ-lZkeUlpMcIthQFs0pCODR9GPytv7ZXLPZFOmHM9fn3FD2yRqVhQzcs7HdcxMjCx6hkBW8Z-jW4qteVy2_E9uqjkKwlu_cQLoY83Z0mcjn0PZNQvKF10x7q1_Jjf_Su19UigTUu3pFMrzo4iPS_jcrFoIb3TSZNSzbgAwtujSBFOufPDyEmxlx1sH0ZowMvA
    DocumentMetadata:
      type: object
      title: Document Metadata
      properties:
        name:
          type: string
          pattern: ^\S(?:.*\S)?$
          example: Carrier rendered copy of the original B/L document.pdf
        size:
          type: number
          minimum: 1
          description: the Size of the document in bytes
          example: 4194304
        mediaType:
          type: string
          maxLength: 100
          description: The Media Type (MIME type) of the document
          example: application/pdf
        documentChecksum:
          $ref: '#/components/schemas/DocumentChecksum'
      required:
        - name
        - size
        - mediaType
        - documentChecksum
      description: |
        The document metadata that describes the document.
    Transaction:
      type: object
      title: Transaction
      properties:
        action:
          type: string
          description: |
            Action denotes the transaction type, which can have one of the following values:
            - `ISSU` (Issuance)
            - `TRNS` (Transfer of possession)
            - `ENDO` (Endorsement a.k.a. Transfer of title)
            - `RESD` (Request to Surrender for Delivery)
            - `RESA` (Request to Surrender for Amendment)
            - `SACC` (Surrender accepted)
            - `SREJ` (Surrender rejected)

            The `ISSU` `action` is used for the eBL issuance transaction from the carrier party to the shipper party, and must appear exactly once in the first transaction of the first [`EnvelopeTransferChainEntry`](#/EnvelopeTransferChainEntry) entry (as JWS payload of [`EnvelopeTransferChainEntrySignedContent`](#/EnvelopeTransferChainEntrySignedContent) entry) in the [`EblEnvelope.envelopeTransferChain`](#/EblEnvelope) list. If the eBL document is issued to the shipper party that resides on the different eBL Platform from the carrier's platform, initial envelope transfer should contain envelope transfer chain where first entry's first transaction has `ISSU` `action` type. 

            The `TRNS` `action` is used for the transfer of possession of the eBL from the current possessor party to the new possessor party.

            The `ENDO` `action` is used for the endorsement (a.k.a. transfer of title, or the right to take the delivery of the goods) of To-order eBL documents, where the new endorsee party is not named in the eBL document. The endorsement should always happen on the platform of the user that is not only the current endorsee, but also the current possessor of the eBL document. If the new endorsee party resides on the different eBL Platform from the current endorsee's platform, the envelope transfer process is used to notify the new endorsee of the `ENDO` `action` transaction for non-repudiation purposes, and will NOT result in the transfer of possession of the eBL document contained in the envelope. 

            If the party is the current possessor, and the party is the current consignee/endorsee/shipper (or eBL document is blank-endorsed), the party may request to surrender the eBL to the carrier. This is done by using one of the Request to surrender action types (`RESD` `action` or `RESA` `action`) and with the issuing carrier or the relevant carrier agent as the `recipient` of the action. 
             
             The `RESD` `action` is used when the party wants to request the delivery of the goods. If the request is accepted (for details see `SACC` `action`), the carrier and the party submitting the surrender request will negotiate how the goods will be delivered (e.g. via DCSA shipment release API).
             
             The `RESA` `action` is used when the party wants to surrender the eBL document, so that the carrier can issue an amended eBL document. If the request is accepted (for details see `SACC` `action` response), the alignment on the exact change(s) that need to be made to the eBL document is done outside of the PINT API (e.g. via the DCSA eBL API). If the request is accepted, the existing eBL document is voided along with its envelope transfer chain, and the amended eBL document must be reissued with a new envelope transfer chain (for details see the `ISSU` `action` type description paragraph above). The `RESA` `action` is also used for switch to paper as the DCSA process flow for switching to paper is part of the amendment process (e.g. to note how many originals and copies with and without charges should be issued).

            If a surrender request (`RESD` `action` or `RESA` `action`) is not addressed to the carrier that issued the eBL document or to their legal representative, then the receiving platform should reject the envelope transfer with the [`EnvelopeTransferFinishedResponse`](#/EnvelopeTransferFinishedResponse) containing `BENV` [`responseCode`](#/EnvelopeTransferFinishedResponse).

            The `SACC` `action` is used by the carrier to asynchronously accept the surrender request initiated via `RESD` `action` or `RESA` `action`. If the party that submitted the surrender request is on the different platform, the envelope transfer process is used to notify the (surrender request submitter) party of the `SACC` `action` transaction for non-repudiation purposes, and will NOT result in the transfer of possession of the eBL document contained in the envelope. No transactions may occur after a `SACC` `action` transaction. Any envelope transfer chain changes with new transactions after a `SACC` `action` transaction are invalid and should be answered with the [`EnvelopeTransferFinishedResponse`](#/EnvelopeTransferFinishedResponse) containing `BENV` [`responseCode`](#/EnvelopeTransferFinishedResponse). 

            The `SREJ` `action` is used by the carrier to asynchronously reject the surrender request initiated via `RESD` `action` or `RESA` `action`, and return the eBL document possession to the party that submitted the surrender request.

            When the transaction recipient is residing on the different platform from the transaction actor's platform, the transaction should be followed by the envelope transfer from the actor's (sending) platform to the recipient's (receiving) platform. If the envelope transfer is caused by either `ENDO` `action` or `SACC` `action` transaction (where the recipient is on the different platform), the envelope transfer process is NOT causing transfer of possession of the eBL document, but is merely used as notification for the non-repudiation purposes.
          enum:
            - ISSU
            - ENDO
            - TRNS
            - RESD
            - RESA
            - SACC
            - SREJ
          example: ISSU
        actor:
          $ref: '#/components/schemas/TransactionParty'
        recipient:
          $ref: '#/components/schemas/TransactionParty'
        timestamp:
          type: integer
          format: int64
          description: Unix epoch with millisecond precision of when the transaction was created.
          example: 1713342679531
        reason:
          type: string
          maxLength: 4
          description: |
            A code defined by DCSA indicating the reason for `RESA` (Request to Surrender for Amendment). Possible values are: 
            -	`SWTP` (Switch to paper)

            **Condition:** on `action` being `RESA`
          example: SWTP
        comments:
          type: string
          pattern: ^\S(?:.*\S)?$
          description: Free text comment for the party receiving the transaction.
          maxLength: 255
          example: The B/L has been issued.
      required:
        - action
        - actor
        - timestamp
        - recipient
    TransactionParty:
      description: Refers to a company or a legal entity.
      title: Transaction Party
      type: object
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: Globeteam
        eblPlatform:
          type: string
          pattern: ^\S+$
          maxLength: 4
          description: |
            The eBL platform of the transaction party. 
            The value **MUST** be one of:
            - `WAVE` (Wave)
            - `CARX` (CargoX)
            - `ESSD` (EssDOCS)
            - `IDT` (ICE Digital Trade)
            - `BOLE` (Bolero)
            - `EDOX` (EdoxOnline)
            - `IQAX` (IQAX)
            - `SECR` (Secro)
            - `TRGO` (TradeGO)
            - `ETEU` (eTEU)
            - `TRAC` (Enigio trace:original)
            - `BRIT` (BRITC eBL)
            - `COVA` (Covantis)
            - `ETIT` (e-title)
            - `KTNE` (KTNET)
            - `CRED` (Credore)
          example: BOLE
        identifyingCodes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
      required:
        - partyName
        - eblPlatform
        - identifyingCodes
    IdentifyingCode:
      type: object
      title: Identifying Code
      properties:
        codeListProvider:
          type: string
          maxLength: 100
          description: |
            A list of codes identifying a party. Possible values are:

            - `WAVE` (Wave)
            - `CARX` (CargoX)
            - `ESSD` (EssDOCS)
            - `IDT` (ICE Digital Trade)
            - `BOLE` (Bolero)
            - `EDOX` (EdoxOnline)
            - `IQAX` (IQAX)
            - `SECR` (Secro)
            - `TRGO` (TradeGO)
            - `ETEU` (eTEU)
            - `TRAC` (Enigio trace:original)
            - `BRIT` (BRITC eBL)
            - `COVA` (Covantis)
            - `ETIT` (e-title)
            - `KTNE` (KTNET)
            - `CRED` (Credore)
            - `GSBN` (Global Shipping Business Network)
            - `WISE` (WiseTech)
            - `GLEIF` (Global Legal Entity Identifier Foundation)
            - `W3C` (World Wide Web Consortium)
            - `DNB` (Dun and Bradstreet)
            - `FMC` (Federal Maritime Commission)
            - `DCSA` (Digital Container Shipping Association)
            - `ZZZ` (Mutually defined)

          example: W3C
        partyCode:
          type: string
          maxLength: 150
          description: |
            Code to identify the party as provided by the code list provider
          example: MSK
        codeListName:
          type: string
          maxLength: 100
          description: |
            The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:

            - `DID` (Decentralized Identifier) for `codeListProvider` `W3C`
            - `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`
            - `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`
          example: DID
      required:
        - codeListProvider
        - partyCode
    TaxLegalReference:
      type: object
      title: Tax & Legal Reference
      description: |
        Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.

        A small list of **potential** examples:

        | Type  | Country | Description |
        |-------|:-------:|-------------|
        |EORI|NL|Economic Operators Registration and Identification|
        |PAN|IN|Goods and Services Tax Identification Number in India|
        |GSTIN|IN|Goods and Services Tax Identification Number in India|
        |IEC|IN|Importer-Exported Code in India|
        |RUC|EC|Registro Único del Contribuyente in Ecuador|
        |RUC|PE|Registro Único del Contribuyente in Peru|
        |NIF|MG|Numéro d'Identification Fiscal in Madagascar|
        |NIF|DZ|Numéro d'Identification Fiscal in Algeria|
      properties:
        type:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The reference type code as defined by the relevant tax and/or legal authority.
          example: PAN
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: IN
        value:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The value of the `taxLegalReference`
          example: AAAAA0000A
      required:
        - type
        - countryCode
        - value

    ####################
    # Transport Document
    ####################
    TransportDocument:
      type: object
      title: Transport Document
      description: |
        The receiving platform is required to validate the eBL document (a.k.a. transport document) by computing the SHA-256 checksum of the `transportDocument` attribute value, and confirming it's equal to received 'EblEnvelope.envelopeManifestSignedContent' JWS-signed payload [`EnvelopeManifest.transportDocumentChecksum`](#/EnvelopeManifest) attribute value.
      properties:
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique number allocated by the shipping line to the `Transport Document` and the main number used for the tracking of the status of the shipment.
          example: HHL71800000
        transportDocumentSubReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            Additional reference that can be optionally used alongside the `transportDocumentReference` in order to distinguish between versions of the same `Transport Document`.
          example: Version_1
        shippingInstructionsReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The identifier for a `Shipping Instructions` provided by the carrier for system purposes.
          example: e0559d83-00e2-438e-afd9-fdd610c1a008
        transportDocumentStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Transport Document`. Possible values are:
            - `DRAFT` (the Transport Document is currently a Draft)
            - `APPROVED` (the Transport Document has been Approved by consumer)
            - `ISSUED` (the Transport Document has been Issued by provider)
            - `PENDING_SURRENDER_FOR_AMENDMENT` (the Transport Document has a pending Surrender for Amendment)
            - `SURRENDERED_FOR_AMENDMENT` (the Transport Document is Surrendered for Amendment)
            - `PENDING_SURRENDER_FOR_DELIVERY` (the Transport Document has a pending Surrender for Delivery)
            - `SURRENDERED_FOR_DELIVERY` (the Transport Document is Surrendered for Delivery)
            - `VOIDED` (the Transport Document has been Voided)
          example: DRAFT
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the transport document
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        isShippedOnBoardType:
          type: boolean
          description: |
            Specifies whether the Transport Document is a received for shipment, or shipped on board.
          example: true
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        isElectronic:
          type: boolean
          description: |
            An indicator whether the transport document is electronically transferred.
          example: true
        isToOrder:
          type: boolean
          description: |
            Indicates whether the B/L is issued `to order` or not. If `true`, the B/L is considered negotiable and an Endorsee party can be defined in the Document parties. If no Endorsee is defined, the B/L is blank endorsed. If `false`, the B/L is considered non-negotiable (also referred to as `straight`).

            `isToOrder` must be `false` if `transportDocumentTypeCode='SWB'` (Sea Waybill).
          example: false
        numberOfCopiesWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            The requested number of copies of the `Transport Document` to be issued by the carrier including charges.

            **Conditions:** The following table defines the conditions for the `numberOfCopiesWithCharges` property:
            | Transport Document Type Code | Is Electronic | Meaning |
            |-------|:-------:|-------|
            |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier with charges|
            |`BOL`|`true`|Not applicable, there are no copies|
            |`SWB`|`false`|Indicates that charges should be included in the `SWB` (pdf or other formats)|
            |`SWB`|`true`|Indicates that charges should be included in the electronic `SWB`|
          example: 2
        numberOfCopiesWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            The requested number of copies of the `Transport Document` to be issued by the carrier **NOT** including charges.

            **Conditions:** The following table defines the conditions for the `numberOfCopiesWithoutCharges` property:
            | Transport Document Type Code | Is Electronic | Meaning |
            |-------|:-------:|-------|
            |`BOL`|`false`|How many paper copies of the Original BL to be issued by the carrier without charges|
            |`BOL`|`true`|Not applicable, there are no copies|
            |`SWB`|`false`|Indicates that charges should NOT be included in the `SWB` (pdf or other formats)|
            |`SWB`|`true`|Indicates that charges NOT should be included in the electronic `SWB`|
          example: 2
        numberOfOriginalsWithCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the Bill of Lading that has been requested by the customer with charges.
                    
            **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
          example: 1
        numberOfOriginalsWithoutCharges:
          type: integer
          format: int32
          minimum: 0
          description: |
            Number of originals of the Bill of Lading that has been requested by the customer without charges.
                    
            **Condition:** Only applicable if `transportDocumentType` = `BOL` (Bill of Lading). If `isElectronic = 'True'`, accepted value is `1` (one) or `0` (zero)
          example: 1
        displayedNameForPlaceOfReceipt:
          description: |
            The name to be used in order to specify how the `Place of Receipt` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.

            **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
            example: 'Strawinskylaan 4117'
        displayedNameForPortOfLoad:
          description: |
            The name to be used in order to specify how the `Port of Load` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.

            **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
            example: 'Strawinskylaan 4117'
        displayedNameForPortOfDischarge:
          description: |
            The name to be used in order to specify how the `Port of Discharge` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.

            **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
            example: 'Strawinskylaan 4117'
        displayedNameForPlaceOfDelivery:
          description: |
            The name to be used in order to specify how the `Place of Delivery` should be displayed on the `Transport Document` to match the name and/or address provided on the `Letter of Credit`.

            **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
          type: array
          maxItems: 5
          items:
            type: string
            maxLength: 35
            description: |
              A line of the address to be displayed on the transport document.
            example: 'Strawinskylaan 4117'
        shippedOnBoardDate:
          type: string
          format: date
          description: |
            Date when the last container that is linked to the transport document is physically loaded onboard the vessel indicated on the transport document.

            When provided on a transport document, the transportDocument is a `Shipped On Board` B/L.

            Exactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.
          example: '2020-12-12'
        displayedShippedOnBoardReceivedForShipment:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 250
          description: |
            The text to be displayed on the `Transport Document` as evidence that the goods have been received for shipment or shipped on board.
          example: 'Received for Shipment CMA CGM CONCORDE 28-Jul-2022 CMA CGM Agences France SAS As agents for the Carrier'
        termsAndConditions:
          type: string
          maxLength: 50000
          description: |
            Carrier terms and conditions of transport.
          example: Any reference in...
        receiptTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Origin`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        deliveryTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Destination`. The options are:

            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        cargoMovementTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:

            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        cargoMovementTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:

            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        issueDate:
          type: string
          format: date
          description: |
            Local date when the transport document has been issued.

            Can be omitted on draft transport documents, but must be provided when the document has been issued.
          example: '2020-12-12'
        receivedForShipmentDate:
          type: string
          format: date
          description: |
            Date when the last container linked to the transport document is physically in the terminal (customers cleared against the intended vessel).

            When provided on a transport document, the transportDocument is a `Received For Shipment` B/L.

            Exactly one of `shippedOnBoard` and `receiveForShipmentDate` must be provided on an issued B/L.
          example: '2020-12-12'
        serviceContractReference:
          type: string
          maxLength: 30
          description: |
            Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as “MQC”) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.
          example: HHL51800000
        contractQuotationReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.
          example: HHL1401
        declaredValue:
          type: number
          format: float
          minimum: 0
          description: |
            The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and "Ad Valorem" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.
            
            **Condition:** Included in the transport document upon customer request. If customers want the value to show, evidence is required, and customers need to approve additional insurance fee charge from the carrier (very exceptional).
          example: 1231.1
        declaredValueCurrency:
          type: string
          pattern: ^[A-Z]{3}$
          minLength: 3
          maxLength: 3
          description: |
            The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).

            **Condition:** Mandatory if `declaredValue` is provided. If `declaredValue` is not provided, this field must be empty.
          example: DKK
        carrierCode:
          type: string
          pattern: ^\S+$
          maxLength: 4
          description: |
            The `SCAC` code (provided by [NMFTA](https://nmfta.org/scac/)) or `SMDG` code (provided by [SMDG](https://smdg.org/documents/smdg-code-lists/smdg-liner-code-list/)) of the issuing carrier of the `Transport Document`. `carrierCodeListProvider` defines which list the `carrierCode` is based upon.
          example: MMCU
        carrierCodeListProvider:
          type: string
          description: |
            The code list provider for the `carrierCode`. Possible values are:
            - `SMDG` (Ship Message Design Group)
            - `NMFTA` (National Motor Freight Traffic Association)
          enum:
            - SMDG
            - NMFTA
          example: NMFTA
        carrierClauses:
          type: array
          description: |
            Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 20000
            description: |
              The content of the clause.
            example: It is not allowed to...
        numberOfRiderPages:
          type: integer
          format: int32
          minimum: 0
          description: |
            The number of additional pages required to contain the goods description on a transport document. Only applicable for physical transport documents.
          example: 2
        transports:
          $ref: '#/components/schemas/Transports'
        charges:
          type: array
          description: |
            A list of `Charges`
          items:
            $ref: '#/components/schemas/Charge'
        # New values compared to SI - END
        placeOfIssue:
          $ref: '#/components/schemas/PlaceOfIssue'
        invoicePayableAt:
          $ref: '#/components/schemas/InvoicePayableAt'
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            The contact details of the Shipping Instructions requestor(s) to contact in relation to the **Transport Document** (changes, notifications etc.)
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        documentParties:
          $ref: '#/components/schemas/DocumentParties'
        consignmentItems:
          type: array
          minItems: 1
          description: |
            A list of `ConsignmentItems`
          items:
            $ref: '#/components/schemas/ConsignmentItem'
        # Includes calculated fields!
        utilizedTransportEquipments:
          type: array
          minItems: 1
          description: |
            A list of `Utilized Transport Equipments` describing the equipment being used.
          items:
            $ref: '#/components/schemas/UtilizedTransportEquipment'
        exportLicense:
          $ref: '#/components/schemas/ExportLicense'
        importLicense:
          $ref: '#/components/schemas/ImportLicense'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - transportDocumentReference
        - transportDocumentStatus
        - transportDocumentTypeCode
        - isShippedOnBoardType
        - isElectronic
        - isToOrder
        - invoicePayableAt
        - partyContactDetails
        - documentParties
        - consignmentItems
        - utilizedTransportEquipments
        - termsAndConditions
        - receiptTypeAtOrigin
        - deliveryTypeAtDestination
        - cargoMovementTypeAtOrigin
        - cargoMovementTypeAtDestination
        - carrierCode
        - carrierCodeListProvider
        - transports

    ######################
    # Party Contact Detail
    ######################
    PartyContactDetail:
      type: object
      title: Party Contact Detail
      description: |
        The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`, both can be provided.
      example:
        name: Henrik
        phone: +45 51801234
      properties:
        name:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Name of the contact
          example: Henrik
      anyOf:
        - type: object
          title: Phone required
          description: |
            `Phone` is mandatory to provide
          properties:
            phone:
              type: string
              pattern: ^\S(?:.*\S)?$
              maxLength: 30
              description: |
                Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
              example: +45 70262970
          required:
            - phone
        - type: object
          title: Email required
          description: |
            `Email` is mandatory to provide
          properties:
            email:
              type: string
              pattern: ^.+@\S+$
              maxLength: 100
              description: |
                `E-mail` address to be used
              example: info@dcsa.org
          required:
            - email
      required:
        - name

    ###########
    # Reference
    ###########
    Reference:
      type: object
      title: Reference
      description: |
        References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      properties:
        type:
          type: string
          maxLength: 3
          description: |
            The reference type codes defined by DCSA. Possible values are:
            - `CR` (Customer’s Reference)
            - `AKG` (Vehicle Identification Number)
          example: CR
        value:
          type: string
          maxLength: 35
          pattern: ^\S(?:.*\S)?$
          description: |
            The value of the reference. 
          example: HHL00103004
      required:
        - type
        - value

    ReferenceConsignmentItem:
      type: object
      title: Reference (Consignment Item)
      description: |
        References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      properties:
        type:
          type: string
          maxLength: 3
          description: |
            The reference type codes defined by DCSA. Possible values are:
            - `CR` (Customer’s Reference)
            - `AKG` (Vehicle Identification Number)
            - `SPO` (Shipper's Purchase Order)
            - `CPO` (Consignee's Purchase Order)
          example: CR
        values:
          type: array
          minItems: 1
          description: |
            List of `referenceValues` for a given `referenceType`.
          items:
            type: string
            maxLength: 35
            pattern: ^\S(?:.*\S)?$
            description: |
              The value of the reference. 
            example: HHL00103004
      required:
        - type
        - values

    ##################
    # Consignment Item
    ##################
    ConsignmentItem:
      type: object
      title: Consignment Item
      description: |
        Defines a list of `CargoItems` belonging together and the associated `Booking`. A `ConsignmentItem` can be split across multiple containers (`UtilizedTransportEquipment`) by referencing multiple `CargoItems`
      properties:
        carrierBookingReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          # Extended description of carrierBookingReference compared to DCSA_DOMAIN description
          description: |
            The associated booking number provided by the carrier for this `Consignment Item`.
          example: ABC709951
        descriptionOfGoods:
          type: array
          description: |
            A plain language description that is precise enough for Customs services to be able to identify the goods. General terms (i.e. 'consolidated', 'general cargo' 'parts' or 'freight of all kinds') or not sufficiently precise description cannot be accepted.

            **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
          maxItems: 150
          items:
            type: string
            maxLength: 35
            pattern: ^\S(?:.*\S)?$
            description: A line describing the cargo
            example: blue shoes size 47
        HSCodes:
          type: array
          minItems: 1
          description: |
            A list of `HS Codes` that apply to this `consignmentItem`
          items:
            type: string
            pattern: ^\d{6,10}$
            minLength: 6
            maxLength: 10
            description: |
              Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.

              More information can be found here: [HS Nomenclature](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools).
            example: '851713'
        nationalCommodityCodes:
          type: array
          description: |
            A list of `National Commodity Codes` that apply to this `commodity`
          items:
            $ref: '#/components/schemas/NationalCommodityCode'
        shippingMarks:
          type: array
          maxItems: 50
          description: |
            A list of the `ShippingMarks` applicable to this `consignmentItem`

            **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
          items:
            type: string
            maxLength: 35
            description: |
              The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.
            example: Made in China
        cargoItems:
          type: array
          minItems: 1
          description: |
            A list of all `cargoItems`
          items:
            $ref: '#/components/schemas/CargoItem'
        exportLicense:
          $ref: '#/components/schemas/ExportLicense'
        importLicense:
          $ref: '#/components/schemas/ImportLicense'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/ReferenceConsignmentItem'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - carrierBookingReference
        - descriptionOfGoods
        - HSCodes
        - cargoItems

    #########################
    # National Commodity Code
    #########################
    NationalCommodityCode:
      type: object
      title: National Commodity Code
      description: |
        The national commodity classification code linked to a country with a value.

        An example could look like this:

        | Type  | Country | Value |
        |-------|:-------:|-------------|
        |NCM|BR|['1515', '2106', '2507', '2512']|
      properties:
        type:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 10
          description: |
            The national commodity classification code, which can be one of the following values defined by DCSA:
            - `NCM` (Nomenclatura Comum do Mercosul)
            - `HTS` (Harmonized Tariff Schedule)
            - `SCHEDULE_B` ( Schedule B)
            - `TARIC` (Integrated Tariff of the European Communities)
            - `CN` (Combined Nomenclature)
            - `CUS` (Customs Union and Statistics)
          example: NCM
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: BR
        values:
          type: array
          minItems: 1
          description: |
            A list of `national commodity codes` values.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 10
            description: |
              The value of the `National Commodity Code`
            example: '1515'
          example:
            - '1515'
            - '2106'
            - '2507'
            - '2512'
      example:
        type: TARIC
        values: 
          - '85171200'
      required:
        - type
        - values

    ###################
    # Customs Reference
    ###################
    CustomsReference:
      type: object
      title: Customs Reference
      description: |
        Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.

        A small list of **potential** examples:

        | Type  | Country | Description |
        |-------|:-------:|-------------|
        |UCR|NL|Unique Consignment Reference|
        |CUS|NL|Customs Union and Statistics|
        |ACID|EG|Advance Cargo Information Declaration in Egypt|
        |CERS|CA|Canadian Export Reporting System|
        |ITN|US|Internal Transaction Number in US|
        |PEB|ID|PEB reference number|
        |CSN|IN|Cargo Summary Notification (CSN)|
      properties:
        type:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The reference type code as defined in the relevant customs jurisdiction.
          example: CUS
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
        values:
          type: array
          minItems: 1
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 35
            description: |
              The value of the `customsReference`
            example: '4988470982020120017'
      required:
        - type
        - countryCode
        - values

    ############
    # Cargo Item
    ############
    CargoItem:
      type: object
      title: Cargo Item
      description: |
        A `cargoItem` is the smallest unit used by stuffing. A `cargoItem` cannot be split across containers.
      properties:
        equipmentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
            According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).

            If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
          example: APZU4812090
        cargoGrossWeight:
          $ref: '#/components/schemas/CargoGrossWeight'
        cargoGrossVolume:
          $ref: '#/components/schemas/CargoGrossVolume'
        cargoNetWeight:
          $ref: '#/components/schemas/CargoNetWeight'
        cargoNetVolume:
          $ref: '#/components/schemas/CargoNetVolume'
        exportLicense:
          $ref: '#/components/schemas/ExportLicense'
        importLicense:
          $ref: '#/components/schemas/ImportLicense'
        outerPackaging:
          $ref: '#/components/schemas/OuterPackaging'
        nationalCommodityCodes:
          type: array
          description: |
            A list of `National Commodity Codes` that apply to this `cargoItem`
          items:
            $ref: '#/components/schemas/NationalCommodityCode'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - equipmentReference
        - cargoGrossWeight
        - outerPackaging

    CargoGrossWeight:
      type: object
      title: Cargo Gross Weight
      description: |
        The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The weight of the cargo item including packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.
          example: 2400
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit
    CargoGrossVolume:
      type: object
      title: Cargo Gross Volume
      description: |
        Calculated by multiplying the width, height, and length of the packed cargo.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            Calculated by multiplying the width, height, and length of the packed cargo. A maximum of 4 decimals should be provided.
          example: 2.4
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)
          enum:
            - MTQ
            - FTQ
          example: MTQ
      required:
        - value
        - unit
    CargoNetWeight:
      type: object
      title: Cargo Net Weight
      description: |
        The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The weight of the cargo item excluding packaging being carried in the container. Excludes the tare weight of the container. A maximum of 3 decimals should be provided.
          example: 2400
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit
    CargoNetVolume:
      type: object
      title: Cargo Net Volume
      description: |
        Calculated by multiplying the width, height, and length of the cargo, excluding packaging.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            Calculated by multiplying the width, height, and length of the cargo, excluding packaging.
          example: 2.4
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)
          enum:
            - MTQ
            - FTQ
          example: MTQ
      required:
        - value
        - unit

    #################
    # Outer Packaging
    #################
    OuterPackaging:
      type: object
      title: Outer Packaging
      description: |
        Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.
      properties:
        packageCode:
          type: string
          pattern: ^[A-Z0-9]{2}$
          minLength: 2
          maxLength: 2
          description: |
            A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation N°21](https://unece.org/trade/uncefact/cl-recommendations)

            **Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.
          example: 5H
        imoPackagingCode:
          type: string
          pattern: ^[A-Z0-9]{1,5}$
          minLength: 1
          maxLength: 5
          description: |
            The code of the packaging as per IMO.

            **Condition:** only applicable to dangerous goods if specified in the [IMO IMDG code](https://www.imo.org/en/publications/Pages/IMDG%20Code.aspx). If not available, the `packageCode` as per UN recommendation 21 should be used.
          example: 1A2
        numberOfPackages:
          type: integer
          format: int32
          minimum: 1
          maximum: 99999999
          description: |
            Specifies the number of outer packagings/overpacks associated with this `Cargo Item`.
          example: 18
        description:
          type: string
          maxLength: 100
          description: |
            Description of the outer packaging/overpack.
          example: 'Drum, steel'
        woodDeclaration:
          type: string
          maxLength: 30
          description: |
            Property to clearly indicate if the products, packaging and any other items are made of wood. Possible values include:
            - `NOT_APPLICABLE` (if no wood or any other wood product such as packaging and supports are being shipped)
            - `NOT_TREATED_AND_NOT_CERTIFIED` (if the wood or wooden materials have not been treated nor fumigated and do not include a certificate)
            - `PROCESSED` (if the wood or wooden materials are entirely made of processed wood, such as plywood, particle board, sliver plates of wood and wood laminate sheets produced using glue, heat, pressure or a combination of these)
            - `TREATED_AND_CERTIFIED` (if the wood or wooden materials have been treated and/or fumigated and include a certificate)
          example: TREATED_AND_CERTIFIED
        dangerousGoods:
          type: array
          description: |
            A list of `Dangerous Goods`
          items:
            $ref: '#/components/schemas/DangerousGoods'
      required:
        - numberOfPackages
        - description

    #################
    # Dangerous Goods
    #################
    DangerousGoods:
      type: object
      title: Dangerous Goods
      description: |
        Specification for `Dangerous Goods`. It is mandatory to provide one of `UNNumber` or `NANumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.
      oneOf:
        - type: object
          title: UN Number
          properties:
            UNNumber:
              type: string
              pattern: ^\d{4}$
              minLength: 4
              maxLength: 4
              description: |
                United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.
              example: '1463'
          required:
            - UNNumber
        - type: object
          title: NA Number
          properties:
            NANumber:
              type: string
              pattern: ^\d{4}$
              minLength: 4
              maxLength: 4
              description: |
                Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.
              example: '9037'
          required:
            - NANumber
      properties:
        codedVariantList:
          type: string
          pattern: ^[0-3][0-9A-Z]{3}$
          minLength: 4
          maxLength: 4
          description: |
            Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single UN number or NA number that may occur when two companies exchange DG information.

            Character | Valid Characters | Description
            :--------:|------------------|------------
            1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group
            2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs
            3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.
          example: '2200'
        properShippingName:
          type: string
          maxLength: 250
          description: |
            The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.
          example: 'Chromium Trioxide, anhydrous'
        technicalName:
          type: string
          maxLength: 250
          description: |
            The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.
          example: 'xylene and benzene'
        imoClass:
          type: string
          maxLength: 4
          description: |
            The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:

            - `1.1A` (Substances and articles which have a mass explosion hazard)
            - `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)
            - `2.1` (Flammable gases)
            - `8` (Corrosive substances)
          example: 1.4S
        subsidiaryRisk1:
          type: string
          pattern: ^[0-9](\.[0-9])?$
          minLength: 1
          maxLength: 3
          description: |
            Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
          example: '1.2'
        subsidiaryRisk2:
          type: string
          pattern: ^[0-9](\.[0-9])?$
          minLength: 1
          maxLength: 3
          description: |
            Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
          example: '1.2'
        isMarinePollutant:
          type: boolean
          description: |
            Indicates if the goods belong to the classification of Marine Pollutant.
          example: false
        packingGroup:
          type: integer
          format: int32
          minimum: 1
          maximum: 3
          description: |
            The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.
          example: 3
        isLimitedQuantity:
          type: boolean
          description: |
            Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.
          example: false
        isExceptedQuantity:
          type: boolean
          description: |
            Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.
          example: false
        isSalvagePackings:
          type: boolean
          description: |
            Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.
          example: false
        isEmptyUncleanedResidue:
          type: boolean
          description: |
            Indicates if the cargo is residue.
          example: false
        isWaste:
          type: boolean
          description: |
            Indicates if waste is being shipped
          example: false
        isHot:
          type: boolean
          description: |
            Indicates if high temperature cargo is shipped.
          example: false
        isCompetentAuthorityApprovalRequired:
          type: boolean
          description: |
            Indicates if the cargo require approval from authorities
          example: false
        competentAuthorityApproval:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name and reference number of the competent authority providing the approval.
          example: '{Name and reference...}'
        segregationGroups:
          type: array
          description: |
            List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.

            **Condition:** only applicable to specific hazardous goods.
          items:
            type: string
            maxLength: 2
            description: |
              Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:

              - `1` (Acids)
              - `2` (Ammonium Compounds)
              - `3` (Bromates)
              - `4` (Chlorates)
              - `5` (Chlorites)
              - `6` (Cyanides)
              - `7` (Heavy metals and their salts)
              - `8` (Hypochlorites)
              - `9` (Lead and its compounds)
              - `10` (Liquid halogenated hydrocarbons)
              - `11` (Mercury and mercury compounds)
              - `12` (Nitrites and their mixtures)
              - `13` (Perchlorates)
              - `14` (Permanganates)
              - `15` (Powdered metals)
              - `16` (Peroxides),
              - `17` (Azides)
              - `18` (Alkalis)
            example: '12'
        innerPackagings:
          type: array
          description: |
            A list of `Inner Packings` contained inside this `outer packaging/overpack`.
          items:
            $ref: '#/components/schemas/InnerPackaging'
        emergencyContactDetails:
          $ref: '#/components/schemas/EmergencyContactDetails'
        EMSNumber:
          type: string
          maxLength: 7
          description: |
            The emergency schedule identified in the IMO EmS Guide – Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.
          example: F-A S-Q
        endOfHoldingTime:
          type: string
          format: date
          description: |
            Date by when the refrigerated liquid needs to be delivered.
          example: '2021-09-03'
        fumigationDateTime:
          type: string
          format: date-time
          description: |
            Date & time when the container was fumigated
          example: '2024-09-04T09:41:00Z'
        isReportableQuantity:
          type: boolean
          description: |
            Indicates if a container of hazardous material is at the reportable quantity level. If `TRUE`, a report to the relevant authority must be made in case of spill.
          example: false
        inhalationZone:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            The zone classification of the toxicity of the inhalant. Possible values are:

            - `A` (Hazard Zone A) can be assigned to specific gases and liquids
            - `B` (Hazard Zone B) can be assigned to specific gases and liquids
            - `C` (Hazard Zone C) can **only** be assigned to specific gases
            - `D` (Hazard Zone D) can **only** be assigned to specific gases
          example: A
        grossWeight:
          $ref: '#/components/schemas/GrossWeight'
        netWeight:
          $ref: '#/components/schemas/NetWeight'
        netExplosiveContent:
          $ref: '#/components/schemas/NetExplosiveContent'
        netVolume:
          $ref: '#/components/schemas/NetVolume'
        limits:
          $ref: '#/components/schemas/Limits'
      required:
        - properShippingName
        - imoClass
    GrossWeight:
      type: object
      title: Gross Weight
      description: |
        Total weight of the goods carried, including packaging.
      properties:
        value:
          type: number
          format: float
          example: 12000.3
          minimum: 0
          exclusiveMinimum: true
          description: |
            The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit
    NetWeight:
      type: object
      title: Net Weight
      description: |
        Total weight of the goods carried, excluding packaging.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            Total weight of the goods carried, excluding packaging.
          example: 2.4
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit
    NetExplosiveContent:
      type: object
      title: Net Explosive Content
      description: |
        The total weight of the explosive substances, without the packaging’s, casings, etc.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The total weight of the explosive substances, without the packaging’s, casings, etc.
          example: 2.4
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
            - `GRM` (Grams)
            - `ONZ` (Ounce)
          enum:
            - KGM
            - LBR
            - GRM
            - ONZ
          example: KGM
      required:
        - value
        - unit
    NetVolume:
      type: object
      title: Net Volume
      description: |
        The volume of the referenced dangerous goods.

        **Condition:** only applicable to liquids and gas.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The volume of the referenced dangerous goods.
          example: 2.4
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)
            - `LTR` (Litre)
          enum:
            - MTQ
            - FTQ
            - LTR
          example: MTQ
      required:
        - value
        - unit
    InnerPackaging:
      type: object
      title: Inner Packaging
      description: |
        Object for inner packaging specification
      properties:
        quantity:
          type: integer
          format: int32
          description: |
            Count of `Inner Packagings` of the referenced `Dangerous Goods`.
          example: 20
        material:
          type: string
          maxLength: 100
          description: |
            The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.
          example: Plastic
        description:
          type: string
          maxLength: 100
          description: |
            Description of the packaging.
          example: Woven plastic water resistant Bag
      required:
        - quantity
        - material
        - description
    EmergencyContactDetails:
      type: object
      title: Emergency Contact Details
      description: |
        24 hr emergency contact details
      properties:
        contact:
          type: string
          maxLength: 255
          description: |
            Name of the Contact person during an emergency.
          example: Henrik Larsen
        provider:
          type: string
          maxLength: 255
          description: |
            Name of the third party vendor providing emergency support
          example: GlobeTeam
        phone:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 30
          description: |
            Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
          example: +45 70262970
        referenceNumber:
          type: string
          maxLength: 255
          description: |
            Contract reference for the emergency support provided by an external third party vendor.
          example: '12234'
      required:
        - contact
        - phone
    Limits:
      type: object
      title: Limits
      description: |
        Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.
      properties:
        temperatureUnit:
          type: string
          description: |
            The unit for **all attributes in the limits structure** in Celsius or Fahrenheit

            - `CEL` (Celsius)
            - `FAH` (Fahrenheit)
          enum:
            - CEL
            - FAH
          example: CEL
        flashPoint:
          type: number
          format: float
          description: |
            Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air.
            
            **Condition:** only applicable to specific hazardous goods according to the IMO IMDG Code.
          example: 42
        transportControlTemperature:
          type: number
          format: float
          description: |
            Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.
          example: 24.1
        transportEmergencyTemperature:
          type: number
          format: float
          description: |
            Temperature at which emergency procedures shall be implemented
          example: 74.1
        SADT:
          type: number
          format: float
          description: |
            Lowest temperature in which self-accelerating decomposition may occur in a substance
          example: 54.1
        SAPT:
          type: number
          format: float
          description: |
            Lowest temperature in which self-accelerating polymerization may occur in a substance
          example: 70
      required:
        - temperatureUnit

    ##############################
    # Utilized Transport Equipment
    ##############################
    UtilizedTransportEquipment:
      type: object
      title: Utilized Transport Equipment
      description: |
        Specifies the container (`equipment`), the total `weight`, total `volume`, possible `ActiveReeferSettings`, `seals` and `references`
      properties:
        equipment:
          $ref: '#/components/schemas/Equipment'
        isShipperOwned:
          type: boolean
          description: |
            Indicates whether the container is shipper owned (SOC).
          example: true
        isNonOperatingReefer:
          type: boolean
          description: |
            If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.

            **Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.
          example: false
        activeReeferSettings:
          $ref: '#/components/schemas/ActiveReeferSettings'
        shippingMarks:
          type: array
          maxItems: 50
          description: |
            A list of the `ShippingMarks` applicable to this `UtilizedTransportEquipment`

            **Condition:** The order of the items in this array **MUST** be preserved as by the provider of the API.
          items:
            type: string
            maxLength: 35
            description: |
              The identifying details of a package or the actual markings that appear on the package(s). This information is provided by the customer.
            example: Made in China
        seals:
          type: array
          minItems: 1
          description: |
            A list of `Seals`
          items:
            $ref: '#/components/schemas/Seal'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - equipment
        - isShipperOwned
        - seals

    ###########
    # Equipment
    ###########
    Equipment:
      type: object
      title: Equipment
      description: |
        Used for storing cargo in/on during transport. The equipment size/type is defined by the ISO 6346 code. The most common equipment size/type is 20'/40'/45' DRY Freight Container, but several different versions exist.
      properties:
        equipmentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.
            According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).

            If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
          example: APZU4812090
        ISOEquipmentCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 4
          description: |
            Unique code for the different equipment size and type used to transport commodities. The code can refer to one of ISO size type (e.g. 22G1) or ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.
          example: 22GP
        tareWeight:
          $ref: '#/components/schemas/TareWeight'
      required:
        - equipmentReference

    TareWeight:
      type: object
      title: Tare Weight
      description: |
        The weight of an empty container (gross container weight).
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The weight of an empty container (gross container weight).
          example: 4800
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit
    ######
    # Seal
    ######
    Seal:
      type: object
      title: Seal
      description: |
        Addresses the seal-related information associated with the shipment equipment. A seal is put on a shipment equipment once it is loaded. This `Seal` is meant to stay on until the shipment equipment reaches its final destination.
      properties:
        number:
          type: string
          maxLength: 15
          description: 'Identifies a seal affixed to the container.'
          example: VET123
        source:
          type: string
          description: |
            The source of the seal, namely who has affixed the seal.
            - `CAR` (Carrier)
            - `SHI` (Shipper)
            - `VET` (Veterinary)
            - `CUS` (Customs)

            **Condition:** Seal source may be required depending on the type of commodity being shipped.
          enum:
            - CAR
            - SHI
            - VET
            - CUS
          example: 'CUS'
      required:
        - number

    ########################
    # Active Reefer Settings
    ########################
    ActiveReeferSettings:
      type: object
      title: Active Reefer Settings
      description: |
        The specifications for a Reefer equipment.

        **Condition:** Only applicable when `isNonOperatingReefer` is set to `false`
      properties:
        temperatureSetpoint:
          type: number
          format: float
          description: |
            Target value of the temperature for the Reefer based on the cargo requirement.
          example: -15
        temperatureUnit:
          type: string
          description: |
            The unit for temperature in Celsius or Fahrenheit

            - `CEL` (Celsius)
            - `FAH` (Fahrenheit)

            **Condition:** Mandatory if `temperatureSetpoint` is provided. If `temperatureSetpoint` is not provided, this field must be empty.
          enum:
            - CEL
            - FAH
          example: CEL
        o2Setpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere O<sub>2</sub> target value
          example: 25
        co2Setpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere CO<sub>2</sub> target value
          example: 25
        humiditySetpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere humidity target value
          example: 95.6
        airExchangeSetpoint:
          type: number
          format: float
          minimum: 0
          description: |
            Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container
          example: 15.4
        airExchangeUnit:
          type: string
          description: |
            The unit for `airExchange` in metrics- or imperial- units per hour
            - `MQH` (Cubic metre per hour)
            - `FQH` (Cubic foot per hour)

            **Condition:** Mandatory if `airExchange` is provided. If `airExchange` is not provided, this field must be empty.
          enum:
            - MQH
            - FQH
          example: MQH
        isVentilationOpen:
          type: boolean
          description: |
            If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`
          example: true
        isDrainholesOpen:
          type: boolean
          description: |
            Is drain holes open on the container
          example: true
        isBulbMode:
          type: boolean
          description: |
            Is special container setting for handling flower bulbs active
          example: true
        isColdTreatmentRequired:
          type: boolean
          description: |
            Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD
          example: true
        isControlledAtmosphereRequired:
          type: boolean
          description: |
            Indicator of whether cargo requires Controlled Atmosphere.
          example: true

    ############
    # Transports
    ############
    Transports:
      type: object
      title: Transports
      properties:
        plannedArrivalDate:
          type: string
          format: date
          description: |
            The planned date of arrival.
          example: '2024-06-07'
        plannedDepartureDate:
          type: string
          format: date
          description: |
            The planned date of departure.
          example: '2024-06-03'
        preCarriageBy:
          type: string
          maxLength: 50
          description: |
            Mode of transportation for pre-carriage when transport to the port of loading is organized by the carrier. If this attributes is populated, then a Place of Receipt must also be defined. The currently supported values include:
            - `VESSEL` (Vessel)
            - `RAIL` (Rail)
            - `TRUCK` (Truck)
            - `BARGE` (Barge)
            - `MULTIMODAL` (if multiple modes are used)
          example: RAIL
        onCarriageBy:
          type: string
          maxLength: 50
          description: |
            Mode of transportation for on-carriage when transport from the port of discharge is organized by the carrier. If this attributes is populated, then a Place of Delivery must also be defined. The currently supported values include:
            - `VESSEL` (Vessel)
            - `RAIL` (Rail)
            - `TRUCK` (Truck)
            - `BARGE` (Barge)
            - `MULTIMODAL` (if multiple modes are used)
          example: TRUCK
        placeOfReceipt:
          $ref: '#/components/schemas/PlaceOfReceipt'
        portOfLoading:
          $ref: '#/components/schemas/PortOfLoading'
        portOfDischarge:
          $ref: '#/components/schemas/PortOfDischarge'
        placeOfDelivery:
          $ref: '#/components/schemas/PlaceOfDelivery'
        onwardInlandRouting:
          $ref: '#/components/schemas/OnwardInlandRouting'
        vesselVoyages:
          type: array
          minItems: 1
          description: |
            Allow the possibility to include multiple vessels/voyages in the `Transport Document` (e.g. the first sea going vessel and the mother vessel). At least one is mandatory to provide.
          items:
            $ref: '#/components/schemas/VesselVoyage'
      required:
        - plannedArrivalDate
        - plannedDepartureDate
        - portOfLoading
        - portOfDischarge
        - vesselVoyages

    VesselVoyage:
      type: object
      title: Vessel/Voyage
      description: 'Vessel and export voyage'
      properties:
        vesselName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The name of the first sea going Vessel on board which the cargo is loaded or intended to be loaded
          example: King of the Seas
        carrierExportVoyageNumber:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          example: 2103S
          description: |
            The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
      required:
        - vesselName
        - carrierExportVoyageNumber
    PlaceOfReceipt:
      type: object
      title: Place of Receipt
      description: |
        An object to capture `Place of Receipt` location specified as: the location where the cargo is handed over by the shipper, or his agent, to the shipping line. This indicates the point at which the shipping line takes on responsibility for carriage of the container.

        **Condition:** Only when pre-carriage is done by the carrier.

        The location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, `Address` or a `Geo Coordinate`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
      example:
        locationName: Hamburg
        UNLocationCode: DEHAM
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
    PortOfLoading:
      type: object
      title: Port of Loading
      description: |
        An object to capture `Port of Loading` location specified as: the location where the cargo is loaded onto a first sea-going vessel for water transportation.

        The location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.
      example:
        locationName: Hamburg
        UNLocationCode: DEHAM
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        city:
          $ref: '#/components/schemas/City'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
    PortOfDischarge:
      type: object
      title: Port of Discharge
      description: |
        An object to capture `Port of Discharge` location specified as: the location where the cargo is discharged from the last sea-going vessel.

        The location can be specified in **any** of the following ways: `UN Location Code` or `City and Country`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `UN Location Code` and as a `City and Country`) that both ways point to the same location.
      example:
        locationName: Hamburg
        UNLocationCode: DEHAM
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        city:
          $ref: '#/components/schemas/City'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
    PlaceOfDelivery:
      type: object
      title: Place of Delivery
      description: |
        An object to capture `Place of Delivery` location specified as: the location where the cargo is handed over to the consignee, or his agent, by the shipping line and where responsibility of the shipping line ceases.

        **Condition:** Only when onward transport is done by the carrier

        The location can be specified in **any** of the following ways: `UN Location Code`, `Facility`, `Address` or a `Geo Coordinate`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
      example:
        locationName: Hamburg
        UNLocationCode: DEHAM
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
    OnwardInlandRouting:
      type: object
      title: Onward Inland Routing
      description: |
        An object to capture `Onward Inland Routing` location specified as the end location of the inland movement that takes place after the container(s) being delivered to the port of discharge/place of delivery for account and risk of merchant (merchant haulage).

        The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
      example:
        locationName: Hamburg
        UNLocationCode: DEHAM
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS

    ########
    # Charge
    ########
    Charge:
      type: object
      title: Charge
      description: |
        Addresses the monetary value of freight and other service charges for a `Booking`.
      properties:
        chargeName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            Free text field describing the charge to apply
          example: Documentation fee - Destination
        currencyAmount:
          type: number
          format: float
          minimum: 0
          description: |
            The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.
          example: 1012.12
        currencyCode:
          type: string
          pattern: ^[A-Z]{3}$
          minLength: 3
          maxLength: 3
          description: |
            The currency for the charge, using a 3-character code ([ISO 4217](https://www.iso.org/iso-4217-currency-codes.html)).
          example: DKK
        paymentTermCode:
          type: string
          description: |
            An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        calculationBasis:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.
          example: Per day
        unitPrice:
          type: number
          format: float
          minimum: 0
          description: |
            The unit price of this charge item in the currency of the charge.
          example: 3456.6
        quantity:
          type: number
          format: float
          minimum: 0
          description: |
            The amount of unit for this charge item.
          example: 34.4
      required:
        - chargeName
        - currencyAmount
        - currencyCode
        - paymentTermCode
        - calculationBasis
        - unitPrice
        - quantity

    ##################
    # Address Location
    ##################
    Address:
      type: object
      title: Address
      description: |
        An object for storing address related information
      properties:
        street:
          type: string
          maxLength: 70
          description: The name of the street.
          example: Ruijggoordweg
        streetNumber:
          type: string
          maxLength: 50
          description: The number of the street.
          example: '100'
        floor:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The floor of the street number.
          example: N/A
        postCode:
          type: string
          maxLength: 10
          description: The post code.
          example: 1047 HM
        POBox:
          type: string
          maxLength: 20
          description: A numbered box at a post office where a person or business can have mail or parcels delivered.
          example: '123'
        city:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The name of the city.
          example: Amsterdam
        stateRegion:
          type: string
          maxLength: 65
          description: The name of the state/region.
          example: North Holland
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
      required:
        - street
        - city
        - countryCode

    ###############
    # City Location
    ###############
    City:
      type: object
      title: City
      description: |
        An object for storing city, state/region and country related information
      properties:
        city:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The name of the city.
          example: Amsterdam
        stateRegion:
          type: string
          maxLength: 65
          description: |
            The name of the state/region.
          example: North Holland
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
      required:
        - city
        - countryCode

    ###################
    # Facility Location
    ###################
    Facility:
      type: object
      title: Facility
      description: |
        An object used to express a location using a `Facility`. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      properties:
        facilityCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 6
          description: |-
            The code used for identifying the specific facility. This code does not include the UN Location Code.
            The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:
            - `SMDG` (the codeList used is the [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/))
            - `BIC` (the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/))
          example: ADT
        facilityCodeListProvider:
          type: string
          description: |
            The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
            - `BIC` (Requires a UN Location Code)
            - `SMDG` (Requires a UN Location Code)
          enum:
            - BIC
            - SMDG
          example: SMDG
      required:
        - facilityCode
        - facilityCodeListProvider

    #########################
    # Geo Coordinate Location
    #########################
    GeoCoordinate:
      type: object
      title: Geo Coordinate
      description: |
        An object used to express a location using `latitude` and `longitude`.
      properties:
        latitude:
          type: string
          description: Geographic coordinate that specifies the north–south position of a point on the Earth's surface.
          maxLength: 10
          example: '48.8585500'
        longitude:
          type: string
          description: Geographic coordinate that specifies the east–west position of a point on the Earth's surface.
          maxLength: 11
          example: '2.294492036'
      required:
        - latitude
        - longitude

    ##################
    # Document Parties
    ##################
    OtherDocumentParty:
      type: object
      title: Other Document Party
      description: |
        A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
      properties:
        party:
          $ref: '#/components/schemas/Party'
        partyFunction:
          type: string
          maxLength: 3
          description: |
            Specifies the role of the party in a given context. Possible values are:

            - `SCO` (Service Contract Owner)
            - `DDR` (Consignor's freight forwarder)
            - `DDS` (Consignee's freight forwarder)
            - `COW` (Invoice payer on behalf of the consignor (shipper))
            - `COX` (Invoice payer on behalf of the consignee)
          example: DDS
      required:
        - party
        - partyFunction

    PartyAddress:
      type: object
      title: Party Address
      description: |
        An object for storing address related information
      properties:
        street:
          type: string
          description: The name of the street of the party’s address.
          maxLength: 70
          example: Ruijggoordweg
        streetNumber:
          type: string
          description: The number of the street of the party’s address.
          maxLength: 50
          example: '100'
        floor:
          type: string
          description: |
            The floor of the party’s street number.
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          example: 2nd
        postCode:
          type: string
          description: The post code of the party’s address.
          maxLength: 10
          example: 1047 HM
        POBox:
          type: string
          maxLength: 20
          description: A numbered box at a post office where a person or business can have mail or parcels delivered.
          example: '123'
        city:
          type: string
          description: |
            The city name of the party’s address.
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          example: Amsterdam
        UNLocationCode:
          type: string
          description: |
            The UN Location code specifying where the carrier booking office is located. The pattern used must be
            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used
            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          example: NLAMS
        stateRegion:
          type: string
          description: The state/region of the party’s address.
          maxLength: 65
          example: North Holland
        countryCode:
          type: string
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          example: NL
      required:
        - street
        - city
        - countryCode

    Shipper:
      type: object
      title: Shipper
      description: |
        The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.

        **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        typeOfPerson:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            Can be one of the following values as per the Union Customs Code art. 5(4):
            - `NATURAL_PERSON` (A person that is an individual living human being)
            - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
            - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
          example: 'NATURAL_PERSON'
        address:
          $ref: '#/components/schemas/PartyAddress'
        displayedAddress:
          type: array
          maxItems: 6
          description: |
            The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
            
            **Conditions:** If provided:
              - the displayed address must be included in the `Transport Document`.
              - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters. **Note:** Some carriers may choose to allow more lines, please consult the carrier's API documentation to check if this is the case.
              - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
              - the order of the items in this array **MUST** be preserved as by the provider of the API.
          items:
            type: string
            maxLength: 35
            description: |
              A single address line
            example: Strawinskylaan 4117
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `Shipper`.
          example: HHL007
        purchaseOrderReferences:
          type: array
          description: |
            A list of `Purchase Order Reference`s linked to the `Shipper`.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 35
            description: |
              A purchase order reference linked to the `Shipper`.
            example: HHL007
      required:
        - partyName

    Consignee:
      type: object
      title: Consignee
      description: |
        The party to which goods are consigned in the `Master Bill of Lading`.
        
        **Condition:** Mandatory for non-negotiable BL (`isToOrder=false`)

        **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        typeOfPerson:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            Can be one of the following values as per the Union Customs Code art. 5(4):
            - `NATURAL_PERSON` (A person that is an individual living human being)
            - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
            - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
          example: 'NATURAL_PERSON'
        address:
          $ref: '#/components/schemas/PartyAddress'
        displayedAddress:
          type: array
          maxItems: 6
          description: |
            The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
            
            **Conditions:** If provided:
              - the displayed address must be included in the `Transport Document`.
              - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters. **Note:** Some carriers may choose to allow more lines, please consult the carrier's API documentation to check if this is the case.
              - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
              - the order of the items in this array **MUST** be preserved as by the provider of the API.
          items:
            type: string
            maxLength: 35
            description: |
              A single address line
            example: Strawinskylaan 4117
        identifyingCodes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `Consignee`.
          example: HHL007
        purchaseOrderReferences:
          type: array
          description: |
            A list of `Purchase Order Reference`s linked to the `Consignee`.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 35
            description: |
              A purchase order reference linked to the `Consignee`.
            example: HHL007
      required:
        - partyName
        - identifyingCodes

    Endorsee:
      type: object
      title: Endorsee
      description: |
        The party to whom the title to the goods is transferred by means of endorsement.
        
        **Condition:** Can only be provided for negotiable BLs (`isToOrder=true`). If a negotiable BL does not have an `Endorsee`, the BL is said to be "blank endorsed". Note `Consignee` and `Endorsee` are mutually exclusive.

        **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        displayedAddress:
          type: array
          maxItems: 6
          description: |
            The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
            
            **Conditions:** If provided:
              - the displayed address must be included in the `Transport Document`.
              - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters. **Note:** Some carriers may choose to allow more lines, please consult the carrier's API documentation to check if this is the case.
              - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
              - the order of the items in this array **MUST** be preserved as by the provider of the API.
          items:
            type: string
            maxLength: 35
            description: |
              A single address line
            example: Strawinskylaan 4117
        identifyingCodes:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName
        - identifyingCodes

    CarriersAgentAtDestination:
      type: object
      title: Carrier's Agent At Destination
      description: |
        The party on the import side assigned by the carrier to whom the customer need to reach out to for cargo release.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/Address'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName
        - address
        - partyContactDetails

    NotifyParty:
      type: object
      title: Notify Party
      description: |
        The person to be notified when a shipment arrives at its destination.

        **Condition:** If a `displayedAddress` is provided, it must be included in the `Transport Document` instead of the `address`.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        typeOfPerson:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            Can be one of the following values as per the Union Customs Code art. 5(4):
            - `NATURAL_PERSON` (A person that is an individual living human being)
            - `LEGAL_PERSON` (person (including a human being and public or private organizations) that can perform legal actions, such as own a property, sue and be sued)
            - `ASSOCIATION_OF_PERSONS` (Not a legal person, but recognised under Union or National law as having the capacity to perform legal acts)
          example: 'NATURAL_PERSON'
        address:
          $ref: '#/components/schemas/PartyAddress'
        displayedAddress:
          type: array
          maxItems: 6
          description: |
            The address of the party to be displayed on the `Transport Document`. The displayed address may be used to match the address provided in the `Letter of Credit`.
            
            **Conditions:** If provided:
              - the displayed address must be included in the `Transport Document`.
              - for physical BL (`isElectronic=false`), it is only allowed to provide max 2 lines of 35 characters. **Note:** Some carriers may choose to allow more lines, please consult the carrier's API documentation to check if this is the case.
              - for electronic BL (`isElectronic=true`), the limit is 6 lines of 35 characters
              - the order of the items in this array **MUST** be preserved as by the provider of the API.
          items:
            type: string
            maxLength: 35
            description: |
              A single address line
            example: Strawinskylaan 4117
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `NotifyParty`.
          example: HHL007
      required:
        - partyName

    Party:
      type: object
      title: Party
      description: |
        Refers to a company or a legal entity.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: Asseco Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `Party`.
          example: HHL007
      required:
        - partyName

    IssuingParty:
      type: object
      title: Issuing Party
      description: |
        The company or a legal entity issuing the `Transport Document`
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: Asseco Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName
        - address

    PlaceOfIssue:
      type: object
      title: Place of Issue
      description: |
        An object to capture where the original Transport Document (`Bill of Lading`) will be issued.

        **Condition:** The location can be specified as one of `UN Location Code` or `CountryCode`, but not both.
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
      oneOf:
        - type: object
          title: UN Location Code
          properties:
            UNLocationCode:
              type: string
              pattern: ^[A-Z]{2}[A-Z2-9]{3}$
              minLength: 5
              maxLength: 5
              description: |-
                The UN Location code specifying where the place is located. The pattern used must be

                - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

                More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
              example: NLAMS
          required:
            - UNLocationCode
        - type: object
          title: Country Code
          properties:
            countryCode:
              type: string
              pattern: ^[A-Z]{2}$
              minLength: 2
              maxLength: 2
              description: |
                The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
              example: NL
          required:
            - countryCode

    InvoicePayableAt:
      type: object
      title: Invoice Payable At
      description: |
        Location where payment of ocean freight and charges for the main transport will take place by the customer.

        The location can be provided as a `UN Location Code` or as a fallback - a `freeText` field
      oneOf:
        - type: object
          title: UN Location Code
          properties:
            UNLocationCode:
              type: string
              pattern: ^[A-Z]{2}[A-Z2-9]{3}$
              minLength: 5
              maxLength: 5
              description: |-
                The UN Location code specifying where the place is located. The pattern used must be

                - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

                More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
              example: NLAMS
          required:
            - UNLocationCode
        - type: object
          title: Free text
          properties:
            freeText:
              type: string
              maxLength: 35
              description: |
                The name of the location where payment will be rendered by the customer.
              example: DCSA Headquarters
          required:
            - freeText

    DocumentParties:
      type: object
      title: Document Parties
      description: |
        All `Parties` with associated roles.
      properties:
        shipper:
          $ref: '#/components/schemas/Shipper'
        consignee:
          $ref: '#/components/schemas/Consignee'
        endorsee:
          $ref: '#/components/schemas/Endorsee'
        issuingParty:
          $ref: '#/components/schemas/IssuingParty'
        carriersAgentAtDestination:
          $ref: '#/components/schemas/CarriersAgentAtDestination'
        notifyParties:
          type: array
          maxItems: 3
          description: |
            List of up to 3 `Notify Parties`. The first item in the list is the **First Notify Party** (`N1`), the second item is the **Second Notify Party** (`N2`) and the last item is the **Other Notify Party** (`NI`).

            **Conditions:** If provided:
              - mandatory for To Order BLs, `isToOrder=true`
              - the order of the items in this array **MUST** be preserved as by the provider of the API.
          items:
            $ref: '#/components/schemas/NotifyParty'
        other:
          type: array
          description: A list of document parties that can be optionally provided in the `Shipping Instructions` and `Transport Document`.
          items:
            $ref: '#/components/schemas/OtherDocumentParty'
      required:
        - shipper
        - issuingParty

    ################
    # Export License
    ################
    ExportLicense:
      type: object
      title: Export License
      description: |
        `Export License` requirements

        **Condition:** Included if the property is provided in the `Shipping Instructions.`
      properties:
        isRequired:
          type: boolean
          description: |
            Information provided by the shipper to indicate whether an `Export License` or permit is required for this shipment/commodity/destination.
              
            **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Reference number assigned to an `Export License` or permit, which authorizes a business or individual to export specific goods to specific countries under defined conditions. It is a permit that is required when shipping certain restricted or controlled goods, such as military equipment, high-tech items, chemicals, or items subject to international regulations. The `Export License` must be valid at time of departure.
          example: EMC007123
        issueDate:
          type: string
          format: date
          description: |
            Issue date of the `Export License`.
          example: '2024-09-14'
        expiryDate:
          type: string
          format: date
          description: |
            Expiry date of the `Export License`.
          example: '2024-09-21'

    ################
    # Import License
    ################
    ImportLicense:
      type: object
      title: Import License
      description: |
        `Import License` requirements

        **Condition:** Included if the property is provided in the `Shipping Instructions.`
      properties:
        isRequired:
          type: boolean
          description: |
            Information provided by the shipper to indicate whether an `Import License` or permit is required for this shipment/commodity/destination.
              
            **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Reference number assigned to an `Import License` or permit, issued by countries exercising import controls that authorizes the importation of the articles stated in the license. The `Import License` must be valid at time of arrival.
          example: EMC007123
        issueDate:
          type: string
          format: date
          description: |
            Issue date of the `Import License`.
          example: '2024-09-14'
        expiryDate:
          type: string
          format: date
          description: |
            Expiry date of the `Import License`.
          example: '2024-09-21'
  parameters:
    ##############
    # Parameters #
    ##############
    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '3'
      description: |
        An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
    envelopeReference:
      in: path
      name: envelopeReference
      schema:
        type: string
        maxLength: 100
        example: 4TkP5nvgTly0MwFrDxfIkR2rvOjkUIgzibBoKABU
      required: true
      description: |
        The receiving platform-provided unique identifier for the given eBL envelope.
    documentChecksum:
      in: path
      name: documentChecksum
      schema:
        type: string
        pattern: ^[0-9a-f]+$
        maxLength: 64
        minLength: 64
        example: 7d00064ed0b90467ff7aff6032d8e2d94845745b6590895cd95708d2ee4243d8
      required: true
      description: |
        The checksum of the document computed using SHA-256 hash algorithm according to [RFC 6234](https://datatracker.ietf.org/doc/html/rfc6234).
