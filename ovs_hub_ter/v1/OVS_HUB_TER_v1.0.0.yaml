openapi: 3.0.3
info:
  version: 1.0.0
  title: DCSA Operational Vessel Schedule Hub Terminal Timestamp API
  description: |
    <h1>DCSA OpenAPI specification for Terminal Data upload for OVS Hub (Operational Vessel Schedule Hub)</h1>

    This API is intended as an API between a terminal and OVS Hub (Operational Vessel Schedule Hub). The purpose of the API is for terminals to be able to provide `ETA`/`ETD`/`ATA` and `ATD` timestamps near-to-realtime to OVS Hub.

    ### API Design & Implementation Principles
    This API follows the guidelines defined in version 2.0 of the API Design & Implementation Principles which can be found on the [DCSA Developer Portal](https://developer.dcsa.org/api_design)

    ### Changelog and GitHub
    For a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ovs_hub_ter/v1#v100). If you have any questions, feel free to send an email to [ovshub-support@dcsa.org](mailto:ovshub-support@dcsa.org).

    API specification issued by [DCSA.org](https://dcsa.org/).
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
tags:
  - name: Terminal Timestamp
    description: Terminal Timestamp endPoint for providing near realtime `ETA`/`ETD`/`ATA` and `ATD` data
paths:
  /v1/terminal-timestamps:
    post:
      tags:
        - Terminal Timestamp
      summary: |
        Send Timestamp
      operationId: send-terminal-timestamps
      description: |
        This endpoint can be used by terminals to provide carriers with event timestamps around its port call, as and when they become available in the terminal systems. These timestamps could for example include `ETA`/`ETD`/`ATA`/`ATD` at berth.
      requestBody:
        description: |
          Properties to be included when sending `Timestamps`
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminalTimestamp'
            examples:
              sendETANoTransportCallExample:
                summary: |
                  Send an `ETA` timestamp not using `transportCallReference`
                description: |
                  Send an `ETA` timestamp for the Vessel: `Jacques Saadé` arriving at `Amsterdam Port` on the 18 of August 2025 at 18.00 Amsterdam time. This example does not include a `transportCallReference`.
                value:
                  carrierServiceName: 'French Asia Line 3'
                  carrierServiceCode: 'AEU6'
                  universalServiceReference: 'SR12345A'
                  vesselOperatorSMDGLinerCode: 'CMA'
                  vesselIMONumber: '9839179'
                  vesselMMSINumber: '228386700'
                  vesselName: 'Jacques Saadé'
                  carrierImportVoyageNumber: '2508N'
                  carrierExportVoyageNumber: '2508S'
                  universalImportVoyageReference: '2508N'
                  universalExportVoyageReference: '2508S'
                  UNLocationCode: 'NLAMS'
                  facilitySMDGCode: 'NLAMS'
                  timestampClassifierCode: 'EST'
                  timestampTypeCode: 'ARRI'
                  timestampPositionCode: 'PORT'
                  timestampDateTime: '2025-08-18T18:00:00+01:00'
              sendETATransportCallExample:
                summary: |
                  Send an `ETA` timestamp with a `transportCallReference`
                description: |
                  Send an `ETA` timestamp for the `transportCallReference: SR11111X-9321483-2107W-NLRTM-HPD2-1-1` as per the 18 of August 2025 at 18.00 Amsterdam time.
                value:
                  transportCallReference: 'SR11111X-9321483-2107W-NLRTM-HPD2-1-1'
                  vesselOperatorSMDGLinerCode: 'CMA'
                  timestampClassifierCode: 'EST'
                  timestampTypeCode: 'ARRI'
                  timestampPositionCode: 'PORT'
                  timestampDateTime: '2025-08-18T18:00:00+01:00'
              sendATDExample:
                summary: |
                  Send an `ATD` timestamp with a `transportCallReference`
                description: |
                  Send an `ATD` timestamp for the `transportCallReference: SR11111X-9321483-2107W-NLRTM-HPD2-1-1`  as per the 20 of August 2025 at 18.00 Amsterdam time.
                value:
                  transportCallReference: 'SR11111X-9321483-2107W-NLRTM-HPD2-1-1'
                  vesselOperatorSMDGLinerCode: 'CMA'
                  timestampClassifierCode: 'ACT'
                  timestampTypeCode: 'DEPA'
                  timestampPositionCode: 'PORT'
                  timestampDateTime: '2025-08-20T18:00:00+01:00'
      responses:
        '200':
          description: |
            The `Terminal Timestamp` has been accepted by the OVS Hub.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case the `Terminal Timestamp` does not schema validate a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Terminal Timestamp missing carrierServiceName
                  description: |
                    `carrierServiceName` is a mandatory property when providing a Timestamp when no `TransportCall` is provided. In case this property is missing an error object is created.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: POST
                    requestUri: /v1/terminal-timestamps
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: carrierServiceName not found - it is a mandatory property in Terminal Timestamp when no TransportCall is provided
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2025-08-18T12:34:00Z'
                    errors:
                      - errorCode: 7003
                        property: carrierServiceName
                        errorCodeText: conditional-mandatory property missing
                        errorCodeMessage: carrierServiceName must be provided as part of Terminal Timestamp if no TransportCall is provided
        '500':
          description: |
            In case a server error occurs in OVS Hub a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Terminal Timestamp
                  description: |
                    An Internal Server Error has occurred - the consumer should contact `ovshub-support@dcsa.org` and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: POST
                    requestUri: /v1/terminal-timestamps
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Internal Server Error occurred while processing Terminal Timestamp request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2025-08-18T12:34:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Sending too many timestamps
                  description: |
                    Calling the endPoint

                        POST /v1/terminal-timestamps
                        
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: POST
                    requestUri: /v1/terminal-timestamps
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: Too many Timestamps has been sent. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2025-08-18T12:34:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max sending of Terminal Timestamps reached
                        errorCodeMessage: A maximum of 10 Terminal Timestamp requests can be sent per hour
components:
  headers:
    API-Version:
      schema:
        type: string
        example: 1.0.0
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
      required: true
  schemas:
    TerminalTimestamp:
      type: object
      title: Terminal Timestamp
      description: |
        A Timestamp object to provide `ETA`/`ETD`/`ATA`/`ATD` information to the OVS Hub. It is necessary to provide either:
          - `transportCallReference`

        or
        - `carrierServiceCode`
        - `vesselIMONumber`
        - `carrierImportVoyageNumber`
        - `UNLocationCode`
        - `facilitySMDGCode`
        
        **Note:** if `transportCallReference` is provided together with any of the other values they will be ignored.
      properties:
        vesselOperatorSMDGLinerCode:
          type: string
          maxLength: 10
          description: |
            The carrier who is in charge of the vessel operation based on the `SMDG` code.
          example: HLC

        carrierServiceName:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The carrier specific name of the service for this `Timestamp`.
          example: Great Lion Service
        carrierServiceCode:
          type: string
          maxLength: 11
          pattern: ^\S(?:.*\S)?$
          description: |
            The carrier specific code of the service for this `Timestamp`.
            
            **Condition:** This must be provided in case `transportCallReference` is not provided.
          example: FE1
        universalServiceReference:
          type: string
          minLength: 8
          maxLength: 8
          pattern: ^SR\d{5}[A-Z]$
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.
          example: SR12345A

        vesselIMONumber:
          type: string
          minLength: 7
          maxLength: 8
          pattern: ^\d{7,8}$
          description: |
            The unique reference for a registered Vessel. The reference is the International Maritime Organisation (`IMO`) number, also sometimes known as the Lloyd's register code, which does not change during the lifetime of the vessel.
            
            **Condition:** This must be provided in case `transportCallReference` is not provided.
          example: '9321483'
        vesselMMSINumber:
          type: string
          minLength: 9
          maxLength: 9
          pattern: ^\d{9}$
          description: |
            Maritime Mobile Service Identities (`MMSI`s) are nine-digit numbers used by maritime Digital Selective Calling (`DSC`), automatic identification systems (`AIS`) and certain other equipment to uniquely identify a ship or a coast radio station.
          example: '278111222'
        vesselName:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The name of the Vessel given by the Vessel Operator and registered with `IMO`.
          example: King of the Seas

        portVisitReference:
          type: string
          maxLength: 50
          description: |
            The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call.
          example: NLRTM1234589
        transportCallReference:
          type: string
          maxLength: 100
          description: |
            The unique reference for a transport call. It's the vessel operator's responsibility to provide the `Transport Call Reference`, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.
            
            **Condition:** Must be provided in case:
              - `carrierServiceCode`
              - `vesselIMONumber`
              - `carrierImportVoyageNumber`
              - `UNLocationCode`
              - `facilitySMDGCode`
            
            are all not provided. If provided - the above properties **will be** ignored.
          example: SR11111X-9321483-2107W-NLRTM-HPD2-1-1
        carrierImportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          example: 2103N
          description: |
            The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
            
            **Condition:** This must be provided in case `transportCallReference` is not provided.
        carrierExportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          example: 2103S
          description: |
            The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
        universalImportVoyageReference:
          type: string
          minLength: 5
          maxLength: 5
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          description: |
            A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage.The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
 
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        universalExportVoyageReference:
          type: string
          minLength: 5
          maxLength: 5
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage.The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
 
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
            
        UNLocationCode:
          type: string
          minLength: 5
          maxLength: 5
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
            
            **Condition:** This must be provided in case `transportCallReference` is not provided.
          example: NLAMS
        facilitySMDGCode:
          type: string
          description: |
            The code used for identifying the specific facility. This code does not include the UN Location Code.

            The codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)
            
            **Condition:** This must be provided in case `transportCallReference` is not provided.
          maxLength: 6
          example: ACT

        timestampClassifierCode:
          type: string
          description: |
            Code for describing the **Timestamp**.

            Possible values are:
            - `ACT` (Actual)
            - `EST` (Estimated)
          enum:
            - ACT
            - EST
          example: EST
        timestampTypeCode:
          type: string
          description: |
            Identifier for type of timestamp. Possible values are:

            - `ARRI` (Arrived)
            - `DEPA` (Departed)
          enum:
            - ARRI
            - DEPA
          example: ARRI
        timestampPositionCode:
          type: string
          description: |
            Specification of the location of the arrival or departure. Options are:
            
            - `PBPL` (Pilot boarding place)
            - `BRTH` (Berth)
            - `ANCH` (Anchorage Location)
            - `PORT` (Port area)
          example: BRTH
        timestampDateTime:
          type: string
          format: date-time
          description: |
            The UTC date and time, when the **Vessel** of a **Port Call** is estimated or has happened.
          example: '2025-08-18T17:41:00+08:30'
      required:
        - vesselOperatorSMDGLinerCode
        - timestampClassifierCode
        - timestampTypeCode
        - timestampPositionCode
        - timestampDateTime

    #################
    # Error Responses
    #################
    ErrorResponse:
      title: Error Response
      type: object
      description: Unexpected error
      properties:
        httpMethod:
          description: |
            The HTTP method used to make the request e.g. `GET`, `POST`, etc
          type: string
          example: POST
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTIONS
            - PATCH
        requestUri:
          description: |
            The URI that was requested.
          type: string
          example: /v1/terminal-timestamps
        statusCode:
          description: |
            The HTTP status code returned.
          type: integer
          format: int32
          example: 400
        statusCodeText:
          description: |
            A standard short description corresponding to the HTTP status code.
          type: string
          maxLength: 50
          example: Bad Request
        statusCodeMessage:
          description: |
            A long description corresponding to the HTTP status code with additional information.
          type: string
          maxLength: 200
          example: The supplied data could not be accepted
        providerCorrelationReference:
          description: |
            A unique identifier to the HTTP request within the scope of the Terminal Timestamp API.
          type: string
          maxLength: 100
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          description: |
            The DateTime corresponding to the error occurring.
          type: string
          format: date-time
          example: '2024-09-04T09:41:00Z'
        errors:
          type: array
          description: |
            An array of errors providing more detail about the root cause.
          minItems: 1
          items:
            $ref: '#/components/schemas/DetailedError'
      required:
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
        - errorDateTime
        - errors

    DetailedError:
      type: object
      title: Detailed Error
      description: |
        A detailed description of what has caused the error.
      properties:
        errorCode:
          type: integer
          format: int32
          description: |
            The detailed error code returned.

              - `7000-7999` Technical error codes
              - `8000-8999` Functional error codes
              - `9000-9999` API provider-specific error codes            

            [Error codes as specified by DCSA](https://developer.dcsa.org/standard-error-codes).
          minimum: 7000
          maximum: 9999
          example: 7003
        property:
          type: string
          maxLength: 100
          description: |
            The name of the property causing the error.
          example: facilityCode
        value:
          type: string
          maxLength: 500
          description: |
            The value of the property causing the error serialised as a string exactly as in the original request.
          example: SG SIN WHS
        jsonPath:
          type: string
          maxLength: 500
          description: |
            A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
          example: $.location.facilityCode
        errorCodeText:
          description: |
            A standard short description corresponding to the `errorCode`.
          type: string
          maxLength: 100
          example: invalidData
        errorCodeMessage:
          type: string
          maxLength: 5000
          description: |
            A long description corresponding to the `errorCode` with additional information.
          example: Spaces not allowed in facility code
      required:
        - errorCodeText
        - errorCodeMessage