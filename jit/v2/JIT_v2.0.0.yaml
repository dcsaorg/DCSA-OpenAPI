openapi: 3.0.3
info:
  version: 2.0.0
  title: |
    DCSA Just in Time Port Calls API
  description: |
    # DCSA OpenAPI specification for Just in Time Port Call process
    The DCSA API for **Just In Time Port Call** aims to simplify and standardize the exchange of operational information between carriers, terminals, port authorities, and service providers, to orchestrate and optimize port calls. JIT can be used for negotiating services execution via timestamps, informing timestamps, or informing moves forecasts, between the parties involved in any given location.

    The planning and execution of events always follow the same pattern, in which several instances of the estimated (`E`), requested (`R`), and planned (`P`) times (from now on referred to as: `ERP`-pattern) can occur if a new estimated or requested time is given after the initially planned time. Some events, specified in this document, do not need the `ERP`-pattern, as they are informative and reflect actuals (`A`) only (i.e. vessel readiness for cargo operations).

    For more information about the `ERP`-pattern please check [GUIDELINES FOR HARMONIZED COMMUNICATION AND ELECTRONIC EXCHANGE OF OPERATIONAL DATA FOR PORT CALLS](https://wwwcdn.imo.org/localresources/en/OurWork/Facilitation/FAL%20related%20nonmandatory%20documents/FAL.5-Circ.52.pdf) by IMO. Link to IMO GIA [Just In Time Arrival Guide](https://greenvoyage2050.imo.org/wp-content/uploads/2021/01/GIA-just-in-time-hires.pdf).

    ## Port Call Services in the scope of this API
    Negotiable **Port Call Services** through an `ERP`-pattern including an `A`:
    - Berth
    - Cargo operations
    - Pilotage
    - Towage
    - Mooring
    - Bunkering
    - Pilot Boarding Place
    - Anchorage
    - Sludge

    **Non**-negotiable **Port Call Services** (without `ERP`-pattern) having only an `A`:
    - Sea Passage
    - All Fast
    - Gangway down and secure
    - Vessel Ready for cargo operations
    - Vessel Ready to sail
    - Discharge cargo operations
    - Loading cargo operations
    - Lashing
    - Safety - Terminal ready for vessel departure
    - Anchorage Operations
    - ShorePower

    Also in scope:
    - Moves forecast
    - cancel (by **Service Provider**) or decline (by **Service Consumer**) of a **Port Call Service**
    - omission of **Port Call** or **Terminal Call**

    ## How to create a Port Call Service
    To request a **Port Call Service** do the following:
     - Create a **Port Call** by calling the

            PUT /port-calls/{portCallID}

     - Create a **Terminal Call** and link it to the **Port Call** created above by calling

            PUT /terminal-calls/{terminalCallID}
    
     - Create a **Port Call Service** and link it to the **Terminal Call** created above by calling
    
            PUT /port-call-services/{portCallServiceID}

    It is the responsibility of the **Service Provider** of the initial **Port Call Service** to create a:
    - `portCallID` to identify all communication regarding the **Port Call**
    - `terminalCallID` to identify each **Terminal Call** inside the same `portCallID`. One **Port Call** can contain many **Terminal Calls**
    - `portCallServiceID` to identify each **Port Call Service** inside the same `terminalCallID`. One **Terminal Call** can contain many **Port Call Services**

    It is the responsibility of the creator of a **Timestamp** (Estimated, Requested, Planned or Actual) to create the `timestampID` as an identifier for the **Timestamp** for any further referral. One **Port Call Service** can contain many **Timestamps**.

    ### API Design & Implementation Principles
    This API follows the guidelines defined in version 2.0 of the API Design & Implementation Principles which can be found on the [DCSA Developer Portal](https://developer.dcsa.org/api_design).

    For a changelog, please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/jit/v2#v200). If you have any questions, feel free to [Contact Us](https://dcsa.org/get-involved/contact-us).
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
security: []
tags:
  - name: Port Call Service - Service Consumer
    description: |
      **Service Consumer** implemented endPoints
  - name: Port Call Service - Service Provider
    description: |
      **Service Provider** implemented endPoints
  - name: Port Call Service
    description: |
      **Service Provider** and **Service Consumer** implemented endPoints
paths:
  '/port-calls/{portCallID}':
    put:
      parameters:
        - $ref: '#/components/parameters/portCallIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service - Service Consumer
      operationId: put-port-call
      summary: Initiates a new or updates a Port Call
      description: |
        Creates or updates a **Port Call** record. The caller must provide a unique `portCallID` (UUIDv4), which identifies the **Port Call**. The `portCallID` must remain consistent across all subsequent communications and linked **Terminal Calls**. If updating an existing **Port Call**, e.g. including the `portVisitReference`, the provided `portCallID` must match the existing record.

        The **Port Call** includes:
        
          - Location information (required): `UNLocationCode`
          - static **Vessel** information (required): `vessel`
          - business identifier for the port visit (optional): `portVisitReference`
          - The ability to send the record with informational purpose only, using `isFYI=true`

        This call is often provided as the first call from a **Carrier** to a **Terminal** before creating a **Terminal Call** and then sending `ETA-Berth` or `Moves`.

        It is not possible to update a **Port Call** that has been `OMITTED`.
      requestBody:
        description: |
          Initiates a new or updates a **Port Call**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortCall'
            examples:
              createNewPortCallForETA:
                summary: |
                  Create a new Port Call to be used for an ETA
                description: |
                  A new **Port Call** for **Port of Amsterdam** for the **YM WHOLESOME**. After this call is accepted by **Service Consumer** - a **Terminal Call** can be created. In this example no `portVisitReference` has yet been assigned to the **Port Call**.
                value:
                  portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                  UNLocationCode: 'NLAMS'
                  vessel:
                    vesselIMONumber: '9704611'
                    MMSINumber: '477524700'
                    name: 'YM WHOLESOME'
                    lengthOverall: 368.07
                    dimensionUnit: 'MTR'
                    callSign: 'VROO4'
                    typeCode: 'CONT'
              sendFYI:
                summary: |
                  Send a FYI to a Service Consumer
                description: |
                  A **Port Call** has already been created - now send the **Port Call** as a FYI to a (secondary) **Service Consumer**. In this example all properties are the same as the previous example, except for `isFYI`.
                value:
                  portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                  UNLocationCode: 'NLAMS'
                  vessel:
                    vesselIMONumber: '9704611'
                    MMSINumber: '477524700'
                    name: 'YM WHOLESOME'
                    lengthOverall: 368.07
                    dimensionUnit: 'MTR'
                    callSign: 'VROO4'
                    typeCode: 'CONT'
                  isFYI: true
      responses:
        '204':
          description: |
            A new or updated **Port Call** successfully accepted by the **Service Consumer**.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new **Port Call** fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Port Call missing Vessel object
                  description: |
                    `vessel` is a mandatory property in the **Port Call**. This is an example of how the error object would look in case this property is missing.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'Vessel object not found - it is a mandatory property in Port Call.'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: 'vessel'
                        errorCodeText: 'mandatory property missing'
                        errorCodeMessage: 'vessel must be provided as part of a Port Call'
        '409':
          description: |
            In case updating a **Port Call** that has been `OMITTED`, a `409` (Conflict) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictRequestExample:
                  summary: |
                    Updating a Port Call that is OMITTED
                  description: |
                    Updating an OMITTED **Port Call**, returns a `409` (Conflict)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 409
                    statusCodeText: 'Conflict'
                    statusCodeMessage: 'Trying to update a Port Call that has been OMITTED'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Updating OMITTED Port Call'
                        errorCodeMessage: 'Cannot update a Port Call that has been OMITTED'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Port Call'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Port Calls
                  description: |
                    Calling the endPoint

                        PUT /port-calls/{portCallID}
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to create a Port Call has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Port Call requests reached'
                        errorCodeMessage: 'A maximum of 100 unique Port Calls can be requested per hour'
  '/port-calls/{portCallID}/omit':
    post:
      parameters:
        - $ref: '#/components/parameters/portCallIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service - Service Consumer
      operationId: omit-port-call
      summary: Omits a Port Call
      description: |
        Allows the **Service Provider** to `OMIT` a **Port Call**, signaling that the **Port Call** is no longer going to happen.

        When a **Service Consumer** receives an `OMIT`, it is their responsibility to propagate this information to any secondary receivers, they previously informed using the `isFYI=true` property, while creating **Port Calls** or sending related updates.

        The **Service Provider** is responsible for:
          - sending an `OMIT` to all **Terminal Calls** linked to the `portCallID` (including secondary receivers)
          - **Cancel** all **Port Call Services** that are associated with the omitted **Terminal Calls** and **Port Call**

        The **Service Consumer** is responsible for:
          - propagating the `OMIT` to any secondary receivers
          - **Cancel** any **Port Call Services** linked to the omitted **Terminal Call** initiated by the **Service Consumer**

        Once a **Port Call** has been `OMITTED`, this action **CANNOT** be undone. In case the `OMIT` has to be "undone" a new **Port Call** must be created with new **Terminal Calls** and new **Port Call Services**.
      requestBody:
        description: |
          Omits a **Port Call**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OmitPortCall'
            examples:
              omit:
                summary: |
                  Send an OMIT
                description: |
                  Send an `OMIT` to a **Port Call** because the vessel has engine problems. Sending this OMIT is irreversible.
                value:
                  reason: 'Engine failures'
              omitFYI:
                summary: |
                  Send an OMIT as a FYI
                description: |
                  Send an `OMIT` to a **Port Call** to a secondary receiver.
                value:
                  reason: 'Engine failures'
                  isFYI: true
      responses:
        '204':
          description: |
            **Port Call** successfully marked as omitted.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case omitting a **Port Call** fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    isFYI provided as a number
                  description: |
                    `isFYI` is a boolean property - cannot set the value to '12'. This is an example of how the error object would look in case the value of this property is specified wrongly.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7004` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'isFYI has wrong type - boolean expected but integer found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7004
                        property: 'isFYI'
                        errorCodeText: 'wrong property type'
                        errorCodeMessage: 'isFYI should be a boolean. `12` provided as value'
        '404':
          description: |
            If the implementer does not know the `portCallID` path parameter (e.g. the resource does not exist), it is possible for the implementer to reject the request by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    portCallID not Found
                  description: |
                    The provided `portCallID` cannot be found. This can be because the `portCallID` does not exist in the implementer system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit'
                    statusCode: 404
                    statusCodeText: 'Not Found'
                    statusCodeMessage: 'portCallID not found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: 'portCallID Not Found'
                        errorCodeMessage: 'The Port Call does not exist'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Port Call'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Omit requests
                  description: |
                    Calling the endPoint

                        POST /port-calls/{portCallID}/omit
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to omit a Port Call has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Port Call omits reached'
                        errorCodeMessage: 'A maximum of 100 unique Port Calls can be omitted per hour'
  '/port-calls':
    get:
      parameters:
        - $ref: '#/components/parameters/portCallIDQueryParam'
        - $ref: '#/components/parameters/portVisitReferenceQueryParam'
        - $ref: '#/components/parameters/UNLocationCodeQueryParam'

        - $ref: '#/components/parameters/vesselIMONumberQueryParam'
        - $ref: '#/components/parameters/vesselNameQueryParam'
        - $ref: '#/components/parameters/MMSINumberQueryParam'

        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service
      operationId: get-port-call
      summary: Retrieves a list of Port Calls
      description: |
        Retrieves a list of **Port Calls** that match the specified filter criteria. It is **mandatory** to provide at least 1 filter.

        The result set of this endPoint will always include **Port Calls** that have **not yet been completed**. Definition of a completed **Port Call** is:
        ````
        A **Port Call**:
        - that has a **Terminal Call**, and
        - that has a **Port Call Service** with: `portCallServiceTypeCode=BERTH` AND `portCallServiceEventTypeCode=DEPA`, and
        - that has a **Timestamp** with: `classifierCode=PLN` AND `dateTime < {now}`
        ````
        This can potentially result in empty result sets. **Example:** filtering by `portCallID` that has been completed.

        Here are some example queries:
          * To get a specific **Port Call** use the `portCallID` filter with the ID of the **Port Call** to filter by. This results in at most a single object. The response will return an empty array if no **Port Call** known by the **Service Consumer** having the provided `portCallID`.
          * To get a list of not completed **Port Calls** for a specific **VesselIMONumber**, use the `vesselIMONumber` filter with the `vesselIMONumber` of the **Vessel** to filter by. This will result in a list of potentially many **Port Calls** all of which will be visited by the **Vessel** with the `vesselIMONumber` specified.
          * To get a list of  not completed **Port Calls** for a specific **UN Location Code**, use the `UNLocationCode` filter with the `UNLocationCode` of the location to filter by. This will result in a list of potentially many **Port Calls** all of which will be located in the `UNLocationCode` specified.

        **Note:** Beware it is possible to specify filters that exclude all results. Example: if filtering by `vesselIMONumber` and `MMSINumber` **not** belonging to the same **Vessel** - the result set will be an empty list. No error will be reported.
      responses:
        '200':
          description: |
            Retrieve a list of **Port Calls** that match the specified filter criteria.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortCalls'
              examples:
                portCallsMatchingUNLocationCode:
                  summary: |
                    Get all Port Calls matching UNLocationCode=NLAMS
                  description: |
                    Get a list of all **Port Calls** visiting a port with `UNLocationCode` matching `NLAMS` (Amsterdam in the Netherlands). The request would look like this:

                        GET /port-calls?UNLocationCode=NLAMS

                    **Note:** This will only return **Port Calls** that have not been completed. See endPoint description for a definition of "Completed **Port Call**".
                  value:
                    - portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      UNLocationCode: 'NLAMS'
                      vessel:
                        vesselIMONumber: '9704611'
                        MMSINumber: '477524700'
                        name: 'YM WHOLESOME'
                        lengthOverall: 368.07
                        dimensionUnit: 'MTR'
                        callSign: 'VROO4'
                        typeCode: 'CONT'
                    - portCallID: '9d4b83fa-cf48-413e-aa79-8d01a17ee201'
                      UNLocationCode: 'NLAMS'
                      vessel:
                        vesselIMONumber: '9619907'
                        MMSINumber: '219018271'
                        name: 'MAERSK MC-KINNEY MOLLER'
                        lengthOverall: 399
                        dimensionUnit: 'MTR'
                        callSign: 'OWIZ2'
                        typeCode: 'CONT'
                    - portCallID: '070c0b3b-97ff-4711-adf4-a0517d76fc30'
                      UNLocationCode: 'NLAMS'
                      vessel:
                        vesselIMONumber: '9929429'
                        MMSINumber: '636022601'
                        name: 'MSC IRINA'
                        lengthOverall: 400
                        dimensionUnit: 'MTR'
                        callSign: '5LJP3'
                        typeCode: 'CONT'
                portCallsMatchingVesselIMONumber:
                  summary: |
                    Get all Port Calls matching vesselIMONumber=9929429
                  description: |
                    Get a list of all **Port Calls** that the vessel with `vesselIMONumber=9929429` visits. The request would look like this:

                        GET /port-calls?vesselIMONumber=9929429

                    **Note:** This will only return **Port Calls** that have not been completed. See endPoint description for a definition of "Completed **Port Call**".
                  value:
                    - portCallID: 'ba78faa2-f50d-49b1-abdf-cecfe4a817da'
                      UNLocationCode: 'NLAMS'
                      vessel:
                        vesselIMONumber: '9929429'
                        MMSINumber: '636022601'
                        name: 'MSC IRINA'
                        lengthOverall: 400
                        dimensionUnit: 'MTR'
                        callSign: '5LJP3'
                        typeCode: 'CONT'
                    - portCallID: 'b37cefe2-e80d-4abf-ad6f-665db3519edd'
                      UNLocationCode: 'PAPCN'
                      vessel:
                        vesselIMONumber: '9929429'
                        MMSINumber: '636022601'
                        name: 'MSC IRINA'
                        lengthOverall: 400
                        dimensionUnit: 'MTR'
                        callSign: '5LJP3'
                        typeCode: 'CONT'
                    - portCallID: '852beee4-a68e-474c-a825-4ba60433e912'
                      UNLocationCode: 'SGSIN'
                      vessel:
                        vesselIMONumber: '9929429'
                        MMSINumber: '636022601'
                        name: 'MSC IRINA'
                        lengthOverall: 400
                        dimensionUnit: 'MTR'
                        callSign: '5LJP3'
                        typeCode: 'CONT'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call request
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/port-calls'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Port Call request'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Port Call requests
                  description: |
                    Calling the endPoint

                        GET /port-calls
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/port-calls'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to fetch Port Calls has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Port Call requests reached'
                        errorCodeMessage: 'A maximum of 500 Port Calls can be requested per hour'
  '/terminal-calls/{terminalCallID}':
    put:
      parameters:
        - $ref: '#/components/parameters/terminalCallIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service - Service Consumer
      operationId: put-terminal-call
      summary: Initiates a new or updates a Terminal Call
      description: |
        Creates or updates a **Terminal Call** record. The caller must provide a unique `terminalCallID` (UUIDv4), which identifies the **Terminal Call**. The `terminalCallID` must remain consistent across all subsequent communications and linked **Port Call Services**. If updating an existing **Terminal Call**, e.g. including the `terminalCallReference`, the provided `terminalCallID` must match the existing record.

        The **Terminal Call** includes:
        
          - link to the **Port Call** (required): `portCallID`
          - Service information (required): `carrierServiceCode`, `carrierServiceName` (and an optional `universalServiceReference`)
          - Voyage information (optional): `carrierImportVoyageNumber`, `carrierExportVoyageNumber`, `universalImportVoyageReference` and `universalExportVoyageReference`
          - terminal information (optional): `terminalCallReference` and `terminalCallSequenceNumber`
          - The ability to send the record with informational purpose only, using `isFYI=true`

        This call is often provided as the second call from a **Carrier** to a **Terminal** after the creation of the **Port Call** and then sending `ETA-Berth` or `Moves`.

        It is not possible to update a **Terminal Call** that has been `OMITTED`.
      requestBody:
        description: |
          Initiates a new or updates a **Terminal Call**.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TerminalCall'
            examples:
              createNewTerminalCallForETA:
                summary: |
                  Create a new Terminal Call to be used for an ETA
                description: |
                  A new **Terminal Call** linked to a previously created **Port Call** (in this example with `portCallID=0342254a-5927-4856-b9c9-aa12e7c00563`). After this call is accepted by **Service Consumer** - a **Port Call Service** can be created. In this example no `terminalCallReference` has yet been assigned to the **Terminal Call**.
                value:
                  terminalCallID: '085a3207-5e45-49cf-8e1b-f8442beaf545'
                  portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                  terminalCallSequenceNumber: 2
                  carrierServiceName: 'Great Lion Service'
                  carrierServiceCode: 'FE1'
                  universalServiceReference: 'SR12345A'
                  carrierImportVoyageNumber: '2103N'
                  carrierExportVoyageNumber: '2103S'
                  universalImportVoyageReference: '2103N'
                  universalExportVoyageReference: '2103N'
                  isFYI: false
              sendFYI:
                summary: |
                  Send a FYI to a (secondary) Service Consumer
                description: |
                  A **Terminal Call** has already been created - now send the **Terminal Call** as a FYI to a (secondary) **Service Consumer**. In this example all properties are the same as the previous example, except for `isFYI`.
                value:
                  terminalCallID: '085a3207-5e45-49cf-8e1b-f8442beaf545'
                  portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                  terminalCallSequenceNumber: 2
                  carrierServiceName: 'Great Lion Service'
                  carrierServiceCode: 'FE1'
                  universalServiceReference: 'SR12345A'
                  carrierImportVoyageNumber: '2103N'
                  carrierExportVoyageNumber: '2103S'
                  universalImportVoyageReference: '2103N'
                  universalExportVoyageReference: '2103N'
                  isFYI: true
      responses:
        '204':
          description: |
            A new or updated **Terminal Call** successfully accepted by **Service Consumer**.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new **Terminal Call** fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    carrierServiceCode is missing
                  description: |
                    `carrierServiceCode` is a mandatory property in the **Terminal Call**. This is an example of how the error object would look in case this property is missing.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'carrierServiceCode not found - it is a mandatory property in Terminal Call'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: 'carrierServiceCode'
                        errorCodeText: 'mandatory property missing'
                        errorCodeMessage: 'carrierServiceCode must be provided as part of a Terminal Call'
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallID` in the payload cannot be found.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 404
                    statusCodeText: 'Not Found'
                    statusCodeMessage: 'portCallID not found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: 'portCallID Not Found'
                        errorCodeMessage: 'The Port Call does not exist'
        '409':
          description: |
            In case creating a new or updating a **Terminal Call** linked to a **Port Call** that has been `OMITTED`, a `409` (Conflict) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictRequestExample:
                  summary: |
                    Updating a Terminal Call that is OMITTED
                  description: |
                    Updating an OMITTED **Terminal Call** or creating a new **Terminal Call** linked to an OMITTED **Port Call**, returns a `409` (Conflict).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 409
                    statusCodeText: 'Conflict'
                    statusCodeMessage: 'Trying to update a Terminal Call that has been OMITTED'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Updating OMITTED Terminal Call'
                        errorCodeMessage: 'Cannot update a Terminal Call that has been OMITTED'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Terminal Call
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Terminal Call'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Terminal Calls
                  description: |
                    Calling the endPoint

                        PUT /terminal-calls/{terminalCallID}
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to create a Terminal Call has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Terminal Call requests reached'
                        errorCodeMessage: 'A maximum of 100 unique Terminal Calls can be requested per hour'
  '/terminal-calls/{terminalCallID}/omit':
    post:
      parameters:
        - $ref: '#/components/parameters/terminalCallIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service - Service Consumer
      operationId: omit-terminal-call
      summary: Omits a Terminal Call
      description: |
        Allows the **Service Provider** to `OMIT` a **Terminal Call**, signaling that the **Terminal Call** is no longer going to happen.

        When a **Service Consumer** receives an `OMIT`, it is their responsibility to propagate this information to any secondary receivers, they previously informed using the `isFYI=true` property, while creating **Terminal Calls** or sending related updates. It is also the responsibility of the **Service Consumer** to **Cancel** any **Port Call Services** initiated, associated to the **Terminal Call** that is now omitted.

        The **Service Provider** is responsible for:
          - **Cancel** all **Port Call Services** that are associated with the omitted **Terminal Call** (including secondary receivers)

        The **Service Consumer** is responsible for:
          - propagating the `OMIT` to any secondary receivers
          - **Cancel** any **Port Call Services** linked to the omitted **Terminal Call** initiated by the **Service Consumer**

        Once a **Terminal Call** has been `OMITTED`, this action **CANNOT** be undone. In case the `OMIT` has to be "undone" a new **Terminal Call** must be created with new **Port Call Services**.
      requestBody:
        description: |
          Omits a **Terminal Call**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OmitTerminalCall'
            examples:
              omit:
                summary: |
                  Send an OMIT
                description: |
                  Send an `OMIT` to a **Terminal Call** because of timing issues. Sending this OMIT is irreversible.
                value:
                  reason: 'Not enough time'
              omitFYI:
                summary: |
                  Send an OMIT as a FYI
                description: |
                  Send an `OMIT` to a **Terminal Call** to a secondary receiver.
                value:
                  reason: 'Engine failures'
                  isFYI: true
      responses:
        '204':
          description: |
            **Terminal Call** successfully marked as omitted.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case omitting a **Terminal Call** does not schema validate, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    isFYI provided as a number
                  description: |
                    `isFYI` is a boolean property - cannot set the value to '12'. This is an example of how the error object would look in case the value of this property is specified wrongly.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7004` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'isFYI has wrong type - boolean expected but integer found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7004
                        property: 'isFYI'
                        errorCodeText: 'wrong property type'
                        errorCodeMessage: 'isFYI should be a boolean. `12` provided as value'
        '404':
          description: |
            If the implementer does not know the `terminalCallID` path parameter (e.g. the resource does not exist), it is possible for the implementer to reject the request by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `terminalCallID` cannot be found. This can be because the `terminalCallID` does not exist in the implementer system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit'
                    statusCode: 404
                    statusCodeText: 'Not Found'
                    statusCodeMessage: 'terminalCallID not found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: 'terminalCallID Not Found'
                        errorCodeMessage: 'The Terminal Call does not exist'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Terminal Call'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Omit requests
                  description: |
                    Calling the endPoint

                        POST /terminal-calls/{terminalCallID}/omit
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/omit'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to omit a Terminal Call has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Terminal Call omits reached'
                        errorCodeMessage: 'A maximum of 100 unique Terminal Calls can be omitted per hour'
  '/terminal-calls':
    get:
      parameters:
        - $ref: '#/components/parameters/portCallIDQueryParam'
        - $ref: '#/components/parameters/terminalCallIDQueryParam'
        - $ref: '#/components/parameters/terminalCallReferenceQueryParam'

        - $ref: '#/components/parameters/carrierServiceNameQueryParam'
        - $ref: '#/components/parameters/carrierServiceCodeQueryParam'
        - $ref: '#/components/parameters/universalServiceReferenceQueryParam'
        - $ref: '#/components/parameters/carrierImportVoyageNumberQueryParam'
        - $ref: '#/components/parameters/carrierExportVoyageNumberQueryParam'
        - $ref: '#/components/parameters/universalImportVoyageReferenceQueryParam'
        - $ref: '#/components/parameters/universalExportVoyageReferenceQueryParam'

        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service
      operationId: get-terminal-call
      summary: Retrieves a list of Terminal Calls
      description: |
        Retrieves a list of **Terminal Calls** that match the specified filter(s) criteria(s). It is **mandatory** to provide at least 1 of the following filters:
          * `portCallID`
          * `terminalCallID`
          * `carrierServiceName`
          * `carrierServiceCode`
          * `universalServiceReference`
          * `terminalCallReference`

        The following filters can also be used together with `carrierServiceName`, `carrierServiceCode` or `universalServiceReference` to narrow down the result set even further:
          * `carrierImportVoyageNumber`
          * `carrierExportVoyageNumber`
          * `universalImportVoyageReference`
          * `universalExportVoyageReference`

        The result set of this endPoint will always include **Terminal Calls** that are linked to **Port Calls** that have **not yet been completed**. Definition of a completed **Port Call** is:
        ````
        A **Port Call**:
        - that has a **Terminal Call**
        - that has a **Port Call Service** with: `portCallServiceTypeCode=BERTH` AND `portCallServiceEventTypeCode=DEPA`
        - that has a **Timestamp** with: `classifierCode=PLN` AND `dateTime < {now}`
        ````
        This can potentially result in empty result sets. **Example:** filtering by `terminalCallID` included in a **Port Call** that has been completed.

        Here are some example queries:
          * To get a specific **Terminal Call** use the `terminalCallID` filter with the ID of the **Terminal Call** to filter by. This results in at most a single object. The response will return an empty array if no **Terminal Call** known by the **Service Consumer** is linked to the provided `terminalCallID`.
          * To get a list of **Terminal Calls** for a specific Service use the `carrierServiceCode` (or alternatively `carrierServiceName` or `universalServiceReference`) filter with the `carrierServiceCode` of the Service to filter by. This will result in a list of potentially many **Terminal Calls** all of which will be visited by the Vessel with the `vesselIMONumber` specified.
            * If the result set is too large - it is possible to further narrow it down by **also** filtering by a voyage number (`carrierImportVoyageNumber`, `carrierExportVoyageNumber`, `universalImportVoyageReference`, or `universalExportVoyageReference`).

        **Note:** Beware it is possible to specify filters that exclude all results. Example: if filtering by `carrierServiceCode` and `carrierImportVoyageNumber` **not** belonging to the same `carrierServiceCode` - the result set will be an empty list. No error will be reported.
      responses:
        '200':
          description: |
            Retrieve a list of **Terminal Calls**
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TerminalCalls'
              examples:
                terminalCallsMatchingPortCallID:
                  summary: |
                    Get the Terminal Calls matching portCallID=0342254a-5927-4856-b9c9-aa12e7c00563
                  description: |
                    Get all the **Terminal Calls** that matches the `portCallID=0342254a-5927-4856-b9c9-aa12e7c00563`. The request would look like this:

                        GET /terminal-calls?portCallID=0342254a-5927-4856-b9c9-aa12e7c00563

                    In this example there are 2 **Terminal Calls** linked to the **Port Call** with `portCallID=0342254a-5927-4856-b9c9-aa12e7c00563`.
                    The default value for the `omitted` property is `false` so in the below example it does not matter if it is provided or not. For clarity it is provided here.
                  value:
                    - portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      terminalCallID: 'e51a16a8-9877-4f15-9da3-17f163bef278'
                      terminalCallSequenceNumber: 1
                      carrierServiceName: 'Great Lion Service'
                      carrierServiceCode: 'FE1'
                      universalServiceReference: 'SR12345A'
                      carrierImportVoyageNumber: '2103N'
                      carrierExportVoyageNumber: '2103S'
                      universalImportVoyageReference: '2103N'
                      universalExportVoyageReference: '2103N'
                      omitted: false
                    - portCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      terminalCallID: 'c73cb5a7-de9a-439e-adb1-c72bdc2d3e0c'
                      terminalCallSequenceNumber: 2
                      carrierServiceName: 'Great Lion Service'
                      carrierServiceCode: 'FE1'
                      universalServiceReference: 'SR12345A'
                      carrierImportVoyageNumber: '2103N'
                      carrierExportVoyageNumber: '2103S'
                      universalImportVoyageReference: '2103N'
                      universalExportVoyageReference: '2103N'
                      omitted: false
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/terminal-calls'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Terminal Call request'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Terminal Calls
                  description: |
                    Calling the endPoint

                        GET /terminal-calls
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/terminal-calls'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to fetch a list of Terminal Calls has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Terminal Call requests reached'
                        errorCodeMessage: 'A maximum of 1000 Terminal Calls can be requested per hour'
  '/port-call-services/{portCallServiceID}':
    put:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service - Service Consumer
      operationId: put-port-call-service
      summary: Initiates a new or updates a Port Call Service
      description: |
        Creates or updates a **Port Call Service** record. The caller must provide a unique `portCallServiceID` (UUIDv4), which identifies the **Port Call Service**. The `portCallServiceID` must remain consistent across all subsequent communications and linked **Timestamps**. If updating an existing **Port Call Service**, e.g. updating the `moves`, the provided `portCallServiceID` must match the existing record.

        The **Port Call Service** includes:
        
          - link to the **Terminal Call** (required): `terminalCallID`
          - type of Service (required): `portCallServiceTypeCode` and `portCallServiceEventTypeCode` (and optionally `portCallPhaseTypeCode` and `facilityTypeCode`)
          - a location (required): `portCallServiceLocation`
          - Moves forecast information (optional): `moves`
          - The ability to send the record with informational purpose only, using `isFYI=true`

        This call is used to initiate a Service linked to a **Terminal Call**. It is used for sending e.g. `ETA-Berth` or `Moves`.
      requestBody:
        description: Initiates a new or updates a **Port Call Service**.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortCallService'
      responses:
        '204':
          description: |
            A new **Port Call** Service accepted
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new **Port Call Service** fails schema validation, or the referenced `terminalCallID` in the payload does not exist, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Port Call Service missing portCallServiceTypeCode
                  description: |
                    `portCallServiceTypeCode` is a mandatory property in the **Port Call Service**. This is an example of how the error object would look in case this property is missing.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-call-services/48b971c9-139d-496a-a840-0e07efd46397'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'portCallServiceTypeCode not found - it is a mandatory property in Port Call Service.'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: 'portCallServiceTypeCode'
                        errorCodeText: 'mandatory property missing'
                        errorCodeMessage: 'portCallServiceTypeCode must be provided as part of a Port Call Service'
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `terminalCallID` in the payload cannot be found.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-call-services/48b971c9-139d-496a-a840-0e07efd46397'
                    statusCode: 404
                    statusCodeText: 'Not Found'
                    statusCodeMessage: 'terminalCallID not found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: 'terminalCallID Not Found'
                        errorCodeMessage: 'The Terminal Call does not exist'
        '409':
          description: |
            In case creating a new or updating a **Port Call Service** that is linked to a **Terminal Call** that has been `OMITTED`, a `409` (Conflict) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictRequestExample:
                  summary: |
                    Updating a Port Call Service that has been CANCELLED
                  description: |
                    Updating a CANCELLED **Port Call Service** or creating a new **Port Call Service** linked to an OMITTED **Terminal Call**, returns a `409` (Conflict).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-call-services/48b971c9-139d-496a-a840-0e07efd46397'
                    statusCode: 409
                    statusCodeText: 'Conflict'
                    statusCodeMessage: 'Trying to update a CANCELLED Port Call Service'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Updating CANCELLED Port Call Service'
                        errorCodeMessage: 'Cannot update a Port Call Service that has been CANCELLED'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-call-services/48b971c9-139d-496a-a840-0e07efd46397'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Port Call Service'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Port Call Services
                  description: |
                    Calling the endPoint

                        PUT /port-call-services/{portCallServiceID}
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/port-call-services/48b971c9-139d-496a-a840-0e07efd46397'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to create a Port Call Service has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Port Call Service requests reached'
                        errorCodeMessage: 'A maximum of 100 unique Port Call Services can be requested per hour'
  '/port-call-services/{portCallServiceID}/cancel':
    post:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service - Service Consumer
      operationId: cancel-port-call-service
      summary: Cancel a Port Call Service
      description: |
        **Service Provider** canceling a **Port Call Service**.

        Allows the **Service Provider** to `CANCEL` a **Port Call Service**, signaling that the **Port Call Service** is no longer going to happen.

        When a **Service Consumer** receives a `CANCEL`, it is their responsibility to propagate this information to any secondary receivers, they previously informed using the `isFYI=true` property, while creating **Port Call Service** or sending related updates.

        The **Service Consumer** is responsible for:
          - propagating the `CANCEL` to any secondary receivers

        Once a **Port Call Service** has been `CANCELLED`, this action **CANNOT** be undone. In case the `CANCEL` has to be "undone" a new **Port Call Service** must be created.
      requestBody:
        description: Cancels a **Port Call Service**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cancel'
      responses:
        '204':
          description: |
            **Port Call Service** successfully cancelled
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case cancelling a **Port Call Service** fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    isFYI provided as a number
                  description: |
                    `isFYI` is a boolean property - cannot set the value to '12'. This is an example of how the error object would look in case the value of this property is specified wrongly.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7004` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-call-services/48b971c9-139d-496a-a840-0e07efd46397/cancel'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'isFYI has wrong type - boolean expected but integer found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7004
                        property: 'isFYI'
                        errorCodeText: 'wrong property type'
                        errorCodeMessage: 'isFYI should be a boolean. `12` provided as value'
        '404':
          description: |
            If the implementer does not know the `portCallServiceID` path parameter (e.g. the resource does not exist), it is possible for the implementer to reject the request by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallServiceID` cannot be found. This can be because the `portCallServiceID` does not exist in the implementer system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-call-services/48b971c9-139d-496a-a840-0e07efd46397/cancel'
                    statusCode: 404
                    statusCodeText: 'Not Found'
                    statusCodeMessage: 'portCallServiceID not found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: 'portCallServiceID Not Found'
                        errorCodeMessage: 'The Port Call Service does not exist'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-call-services/48b971c9-139d-496a-a840-0e07efd46397/cancel'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Port Call Service'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Cancel requests
                  description: |
                    Calling the endPoint

                        POST /port-call-services/{portCallServiceID}/cancel
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/terminal-calls/48b971c9-139d-496a-a840-0e07efd46397/cancel'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to cancel a Port Call Service has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Port Call Service cancellations reached'
                        errorCodeMessage: 'A maximum of 100 unique Port Call Services can be cancelled per hour'
  '/port-call-services':
    get:
      parameters:
        - $ref: '#/components/parameters/terminalCallIDQueryParam'
        - $ref: '#/components/parameters/portCallServiceIDQueryParam'

        - $ref: '#/components/parameters/portCallServiceTypeQueryParam'

        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service
      operationId: get-port-call-services
      summary: Retrieves a list of Port Call Services
      description: |
        Retrieves a list of **Port Call Services** that match the specified filter criteria. It is **mandatory** to provide at least 1 of the following filters:
          * `terminalCallID`
          * `portCallServiceID`

        Additionally `portCallServiceTypeCode` can be optionally added to narrow the result set even further.

        The result set of this endPoint will always include **Port Call Services** that are linked to **Port Calls** that have **not yet been completed**. Definition of a completed **Port Call** is:
        ````
        A **Port Call**:
        - that has a **Terminal Call**
        - that has a **Port Call Service** with: `portCallServiceTypeCode=BERTH` AND `portCallServiceEventTypeCode=DEPA`
        - that has a **Timestamp** with: `classifierCode=PLN` AND `dateTime < {now}`
        ````
        This can potentially result in empty result sets. **Example:** filtering by `portCallServiceID` included in a **Port Call** that has been completed.

        Here are some example queries:
          * To get a specific **Port Call Service** use the `portCallServiceID` filter with the ID of the **Port Call Service** to filter by. This results in at most a single object. The response will return an empty array if no **Port Call Service** known by the **Service Consumer** is linked to the provided `portCallServiceID`.
          * To get a list of **Port Call Services** for a specific **Terminal Call** use the `terminalCallID` filter with the `terminalCallID` of the **Terminal Call** to filter by. This will result in a list of potentially many **Port Call Services** all of which will be linked to the **Terminal Call** specified.

        **Note:** Beware it is possible to specify filters that exclude all results. Example: if filtering by `portCallServiceID` and a `portCallServiceTypeCode` that does **not** belong to the same `portCallServiceID` - the result set will be an empty list. No error will be reported.
      responses:
        '200':
          description: |
            Get the list of **Port Call Services** matching the specified filter.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortCallServices'
              examples:
                portCallServicesMatchingTerminalCallID:
                  summary: |
                    Get the Port Call Services matching terminalCallID=0342254a-5927-4856-b9c9-aa12e7c00563
                  description: |
                    Get all the **Port Call Services** that matches the `terminalCallID=0342254a-5927-4856-b9c9-aa12e7c00563`. The request would look like this:

                        GET /port-call-services?terminalCallID=0342254a-5927-4856-b9c9-aa12e7c00563

                    In this example there are 2 **Port Call Services** linked to the **Terminal Call** with `terminalCallID=0342254a-5927-4856-b9c9-aa12e7c00563`.
                    The default value for the `cancelled` and `declined` property is `false` so in the below example it does not matter if it is provided or not. For clarity it is provided here.
                  value:
                    - terminalCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      portCallServiceID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      portCallServiceTypeCode: 'BERTH'
                      portCallServiceEventTypeCode: 'ARRI'
                      portCallServiceLocation:
                        locationName: 'CMP Container Terminal Copenhagen'
                        UNLocationCode: 'DKCPH'
                      cancelled: false
                      declined: false
                    - terminalCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      portCallServiceID: '7992f6cb-3a5f-45c9-bf43-36e4f05e0bd4'
                      portCallServiceTypeCode: 'PILOTAGE'
                      portCallServiceEventTypeCode: 'STRT'
                      portCallServiceLocation:
                        locationName: 'CMP Container Terminal Copenhagen'
                        UNLocationCode: 'DKCPH'
                      cancelled: false
                      declined: false
                portCallServicesMatchingTerminalCallIDAndMoves:
                  summary: |
                    Get the Moves for Port Call Services matching terminalCallID=0342254a-5927-4856-b9c9-aa12e7c00563
                  description: |
                    Get all the `Moves` for **Port Call Services** that matches the `terminalCallID=0342254a-5927-4856-b9c9-aa12e7c00563`. The request would look like this:

                        GET /port-call-services?terminalCallID=0342254a-5927-4856-b9c9-aa12e7c00563&portCallServiceTypeCode=MOVES

                    In this example there is a single `Moves` object for the **Port Call Service** linked to the **Terminal Call**.
                    The default value for the `cancelled` and `declined` property is `false` so in the below example it does not matter if it is provided or not. For clarity it is provided here.
                  value:
                    - terminalCallID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      portCallServiceID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      portCallServiceTypeCode: 'MOVES'
                      portCallServiceEventTypeCode: 'ARRI'
                      portCallServiceLocation:
                        locationName: 'CMP Container Terminal Copenhagen'
                        UNLocationCode: DKCPH
                      moves:
                        - carrierCode: 'MAEU'
                          carrierCodeListProvider: 'NMFTA'
                          restows:
                            totalRestows: 155
                          totalUnits: 155
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while fetching the Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/port-call-services'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while fetching Port Call Service'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Port Call Services requests
                  description: |
                    Calling the endPoint

                        GET /port-call-services
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/port-call-services'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to fetch a list of Port Call Services has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Port Call Service requests reached'
                        errorCodeMessage: 'A maximum of 1000 Port Call Services can be requested per hour'
  '/timestamps/{timestampID}':
    put:
      parameters:
        - $ref: '#/components/parameters/timestampIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service
      operationId: put-timestamp
      summary: Initiates a new or updates a Timestamp
      description: |
        Creates or updates a **Timestamp** record. The caller must provide a unique `timestampID` (UUIDv4), which identifies the **Timestamp**. If updating an existing **Timestamp**, e.g. updating the `delayReasonCode`, the provided `timestampID` must match the existing record.

        The **Timestamp** includes:
        
          - link to the **Port Call Service** (required): `portCallServiceID`
          - link to the **Timestamp** it replies to (required in case it is not the initial **Timestamp**): `replyToTimestampID`
          - a `ERP-A` classification (required): `classifierCode`
          - dateTime of the **Timestamp** (required): `dateTime`
          - an updated location (optional only with `REQ`uested **Timestamp**): `portCallServiceLocation`
          - **Timestamp** information (optional): `delayReasonCode` and `remark`
          - The ability to send the record with informational purpose only, using `isFYI=true`

        This call is used to provide a **Timestamp** in an `ERP-A` negotiation (or just an `A` for non-negotiations) for a **Port Call Service**.
      requestBody:
        description: |
          Any `ERP-A` **Timestamp**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Timestamp'
      responses:
        '204':
          description: |
            **Timestamp** for a **Port Call Service** accepted
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case creating a new **Timestamp** fails schema validation, or the referenced `portCallServiceID` in the payload does not exist, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Timestamp missing classifierCode
                  description: |
                    `classifierCode` is a mandatory property in the **Timestamp**. This is an example of how the error object would look in case this property is missing.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/timestamps/d26f740f-9dc3-42af-9277-472f155944e2'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'classifierCode property not found - it is a mandatory property in Timestamp'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: 'classifierCode'
                        errorCodeText: 'mandatory property missing'
                        errorCodeMessage: 'classifierCode must be provided as part of a Timestamp'
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallServiceID` cannot be found. This can be because because the `portCallServiceID` does not exist in the implementer system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/timestamps/d26f740f-9dc3-42af-9277-472f155944e2'
                    statusCode: 404
                    statusCodeText: 'Not Found'
                    statusCodeMessage: 'portCallServiceID not found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: 'portCallServiceID Not Found'
                        errorCodeMessage: 'The Port Call Service does not exist'
        '409':
          description: |
            In case creating a new **Timestamp** that is linked to a **Port Call Service** that has been `CANCELLED`, a `409` (Conflict) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictRequestExample:
                  summary: |
                    Creating a Timestamp that links to a CANCELLED Port Call Service
                  description: |
                    Creating a **Timestamp** that links to a CANCELLED **Port Call Service**, returns a `409` (Conflict).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/timestamps/d26f740f-9dc3-42af-9277-472f155944e2'
                    statusCode: 409
                    statusCodeText: 'Conflict'
                    statusCodeMessage: 'Trying to link a Timestamp to a CANCELLED Port Call Service'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Linking to a CANCELLED Port Call Service'
                        errorCodeMessage: Cannot link a Timestamp to a Port Call Service that has been CANCELLED'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/timestamps/d26f740f-9dc3-42af-9277-472f155944e2'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Timestamp'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Timestamps
                  description: |
                    Calling the endPoint

                        PUT /timestamps/{timestampID}
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/timestamps/d26f740f-9dc3-42af-9277-472f155944e2'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to create a Timestamp has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Timestamp requests reached'
                        errorCodeMessage: 'A maximum of 100 unique Timestamps can be requested per hour'
  '/timestamps':
    get:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDQueryParam'
        - $ref: '#/components/parameters/timestampIDQueryParam'
        - $ref: '#/components/parameters/classifierCodeQueryParam'

        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service
      operationId: get-timestamp
      summary: Retrieves a list of Timestamps
      description: |
        Retrieves a list of **Timestamps** that match the specified filter criteria. It is **mandatory** to provide at least 1 of the following filters:
          * `timestampID`
          * `portCallServiceID`

        Additionally `classifierCode` can be optionally added to narrow the result set even further.

        The result set of this endPoint will always include **Timestamps** that are linked to **Port Calls** that have **not yet been completed**. Definition of a completed **Port Call** is:
        ````
        A **Port Call**:
        - that has a **Terminal Call**
        - that has a **Port Call Service** with: `portCallServiceTypeCode=BERTH` AND `portCallServiceEventTypeCode=DEPA`
        - that has a **Timestamp** with: `classifierCode=PLN` AND `dateTime < {now}`
        ````
        This can potentially result in empty result sets. **Example:** filtering by `timestampID` included in a **Port Call** that has been completed.

        Here are some example queries:
          * To get a specific **Timestamp** use the `timestampID` filter with the ID of the **Timestamp** to filter by. This results in at most a single object. The response will return an empty array if no **Timestamp** known by the **Service Consumer** is linked to the provided `timestampID`.
          * To get a list of **Timestamps** for a specific **Port Call Service** use the `portCallServiceID` filter with the `portCallServiceID` of the **Port Call Service** to filter by. This will result in a list of potentially many **Timestamps** all of which will be linked to the **Port Call Service** specified.

        **Note:** Beware it is possible to specify filters that exclude all results. Example: if filtering by `timestampID` and a `classifierCode` that does **not** belong to the same `timestampID` - the result set will be an empty list. No error will be reported.
      responses:
        '200':
          description: |
            Get the list of **Timestamp** matching the specified filter
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timestamps'
              examples:
                timestampsMatchingPortCallServiceID:
                  summary: |
                    Get the Timestamps matching portCallServiceID=20648fdc-4287-4e0f-81e8-f5ad9b3e5973
                  description: |
                    Get all the **Timestamps** that matches the `portCallServiceID=20648fdc-4287-4e0f-81e8-f5ad9b3e5973`. The request would look like this:

                        GET /timestamps?portCallServiceID=20648fdc-4287-4e0f-81e8-f5ad9b3e5973

                    In this example there are 3 **Timestamps** linked to the **Port Call Service** with `portCallServiceID=20648fdc-4287-4e0f-81e8-f5ad9b3e5973`. An `EST` (Estimated), then a `REQ` (Requested) suggesting an hour later and last a `PLN` (Planned) confirming the `REQ`.
                  value:
                    - timestampID: '05986866-1d62-4f84-bc10-3e1b0ddf6990'
                      portCallServiceID: '20648fdc-4287-4e0f-81e8-f5ad9b3e5973'
                      classifierCode: 'EST'
                      dateTime: '2019-11-12T07:41:00+08:30'
                    - timestampID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      replyToTimestampID: '05986866-1d62-4f84-bc10-3e1b0ddf6990'
                      portCallServiceID: '20648fdc-4287-4e0f-81e8-f5ad9b3e5973'
                      classifierCode: 'REQ'
                      dateTime: '2019-11-12T08:41:00+08:30'
                    - timestampID: '2a3aea90-42f8-4c0e-98d7-f0f6892f4563'
                      replyToTimestampID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      portCallServiceID: '20648fdc-4287-4e0f-81e8-f5ad9b3e5973'
                      classifierCode: 'PLN'
                      dateTime: '2019-11-12T08:41:00+08:30'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/timestamps'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Timestamp'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Timestamp requests
                  description: |
                    Calling the endPoint

                        GET /timestamps
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/timestamps'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to fetch a list of Timestamps has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Timestamp requests reached'
                        errorCodeMessage: 'A maximum of 1000 Timestamps can be requested per hour'
  '/vessel-statuses/{portCallServiceID}':
    put:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service - Service Consumer
      operationId: put-vessel-status
      summary: Send Vessel Status for a Port Call Service
      description: |
        Updates a **Vessel Status** record for a **Port Call Service**. The caller must provide a `portCallServiceID` (UUIDv4), which identifies the **Port Call Service** to update.

        The **Vessel Status** includes:
        
          - link to the **Port Call Service** (required): `portCallServiceID`
          - dynamic information about a **Vessel** (optional): `draft`, `airDraft`, `aftDraft`, `forwardDraft`, `vesselPosition` and `milesToDestinationPort` 
          - The ability to send the record with informational purpose only, using `isFYI=true`

        This call is used to provide a **Vessel Status** (dynamic Vessel information) for a Vessel connected to a **Port Call Service**. It is up to the implementer if "new" records are stored every time this endPoint is called or the same record is updated.
      requestBody:
        description: Send dynamic Vessel information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VesselStatus'
      responses:
        '204':
          description: |
            Dynamic Vessel information for a **Port Call Service** received.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case updating a **Vessel Status** fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Vessel Status missing portCallServiceID
                  description: |
                    `portCallServiceID` is a mandatory property in the **Vessel Status**. This is an example of how the error object would look in case this property is missing.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/vessel-statuses/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'portCallServiceID object not found - it is a mandatory property in Vessel Status'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: 'portCallServiceID'
                        errorCodeText: 'mandatory property missing'
                        errorCodeMessage: 'portCallServiceID must be provided as part of a Vessel Status'
        '404':
          description: |
            If the implementer does not know the `portCallServiceID` path parameter (e.g. the resource does not exist), it is possible for the implementer to reject the request by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallServiceID` cannot be found. This can be because the `portCallServiceID` does not exist in the implementer system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/vessel-statuses/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 404
                    statusCodeText: 'Not Found'
                    statusCodeMessage: 'portCallServiceID not found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: 'portCallServiceID Not Found'
                        errorCodeMessage: 'The Port Call Service does not exist'
        '409':
          description: |
            In case updating a **Vessel Status** that is linked to a **Port Call Service** that has been `CANCELLED`, a `409` (Conflict) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictRequestExample:
                  summary: |
                    Updating the Vessel Status that links to a CANCELLED Port Call Service
                  description: |
                    Updating the **Vessel Status** that links to a CANCELLED **Port Call Service**, returns a `409` (Conflict).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/vessel-status/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 409
                    statusCodeText: 'Conflict'
                    statusCodeMessage: 'Trying to update the Vessel Status for a CANCELLED Port Call Service'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Linking to a CANCELLED Port Call Service'
                        errorCodeMessage: 'Cannot link Vessel Status to a Port Call Service that has been CANCELLED'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/vessel-statuses/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Vessel Status'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Vessel Status updates
                  description: |
                    Calling the endPoint

                        PUT /vessel-status/{portCallStatusID}
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'PUT'
                    requestUri: '/vessel-status/085a3207-5e45-49cf-8e1b-f8442beaf545'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to update the Vessel Status has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Vessel Status updates reached'
                        errorCodeMessage: 'A maximum of 100 unique Vessel Status can be updated per hour'
  '/vessel-statuses':
    get:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDRequiredQueryParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service
      operationId: get-vessel-status
      summary: Retrieves a list of Vessel Statuses
      description: |
        Retrieves a list of **Vessel Statuses** that match the specified filter criteria. It is **mandatory** to provide the `portCallServiceID`.

        The result set of this endPoint will always include **Vessel Statuses** that are linked to **Port Calls** that have **not yet been completed**. Definition of a completed **Port Call** is:
        ````
        A **Port Call**:
        - that has a **Terminal Call**
        - that has a **Port Call Service** with: `portCallServiceTypeCode=BERTH` AND `portCallServiceEventTypeCode=DEPA`
        - that has a **Timestamp** with: `classifierCode=PLN` AND `dateTime < {now}`
        ````
        This can potentially result in empty result sets. **Example:** filtering by `portCallServiceID` included in a **Port Call** that has been completed.

        Here is an example query:
          * To get a list of **Vessel Statuses** for a specific **Port Call Service** use the `portCallServiceID` filter with the `portCallServiceID` of the **Port Call Service** to filter by. This will result in a list of potentially many **Vessel Statuses** all of which will be linked to the **Port Call Service** specified.
        
        The implementation of the **Vessel Status** allows for two possible approaches: it can either be a list with a single object that is updated each time the **Vessel Status** is sent, or it can be a list of **Vessel Status** updates. If multiple **Vessel Status** updates are included in the response, the result set must be sorted, with the newest update appearing at the top of the list and the oldest at the bottom.
      responses:
        '200':
          description: |
            Get the list of **Vessel Statuses** matching the specified filter.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VesselStatuses'
              examples:
                vesselStatusesMatchingPortCallServiceID:
                  summary: |
                    Get the Vessel Statuses matching portCallServiceID=20648fdc-4287-4e0f-81e8-f5ad9b3e5973
                  description: |
                    Get all the **Vessel Statuses** that matches the `portCallServiceID=20648fdc-4287-4e0f-81e8-f5ad9b3e5973`. The request would look like this:

                        GET /vessel-Statuses?portCallServiceID=20648fdc-4287-4e0f-81e8-f5ad9b3e5973

                    In this example there are 3 **Vessel Statuses** linked to the **Port Call Service** with `portCallServiceID=20648fdc-4287-4e0f-81e8-f5ad9b3e5973`.
                  value:
                    - portCallServiceID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      draft: 12.5
                      airDraft: 55
                      aftDraft: 37
                      forwardDraft: 35
                      dimensionUnit: 'MTR'
                      milesToDestinationPort: 0
                      isFYI: false
                    - portCallServiceID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      draft: 14.5
                      airDraft: 53
                      aftDraft: 39
                      forwardDraft: 37
                      dimensionUnit: 'MTR'
                      milesToDestinationPort: 0
                      isFYI: false
                    - portCallServiceID: '0342254a-5927-4856-b9c9-aa12e7c00563'
                      draft: 16.5
                      airDraft: 51
                      aftDraft: 41
                      forwardDraft: 39
                      dimensionUnit: 'MTR'
                      milesToDestinationPort: 0
                      isFYI: false
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/vessel-statuses'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Vessel Status'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Timestamp requests
                  description: |
                    Calling the endPoint

                        GET /vessel-statuses
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'GET'
                    requestUri: '/vessel-statuses'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to fetch a list of Vessel Statuses has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Vessel Status requests reached'
                        errorCodeMessage: 'A maximum of 1000 Vessel Statuses can be requested per hour'
  '/port-call-services/{portCallServiceID}/decline':
    post:
      parameters:
        - $ref: '#/components/parameters/portCallServiceIDPathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
        - $ref: '#/components/parameters/Sending-Party'
        - $ref: '#/components/parameters/Receiving-Party'
      tags:
        - Port Call Service - Service Provider
      operationId: decline-port-call-service
      summary: Decline a Port Call service
      description: |
        **Service Consumer** declining a **Port Call Service**.

        Allows the **Service Consumer** to `DECLINE` a **Port Call Service**, signaling that the **Port Call Service** is no longer going to happen.

        When a **Service Provider** receives a `DECLINE`, it is their responsibility to propagate this information to any secondary receivers, they previously informed using the `isFYI=true` property, while creating **Port Call Service** or sending related updates.

        The **Service Provider** is responsible for:
          - propagating the `DECLINE` to any secondary receivers

        Once a **Port Call Service** has been `DECLINED`, this action **CANNOT** be undone. In case the `DECLINE` has to be "undone" a **Service Provider** must create a new **Port Call Service**.
      requestBody:
        description: |
          **Service Consumer** declining a **Port Call service**
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Decline'
      responses:
        '204':
          description: |
            **Port Call Service** successfully declined
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case declining a **Port Call Service** fails schema validation, a `400` (Bad Request) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    isFYI provided as a number
                  description: |
                    `isFYI` is a boolean property - cannot set the value to '12'. This is an example of how the error object would look in case the value of this property is specified wrongly.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7004` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/decline'
                    statusCode: 400
                    statusCodeText: 'Bad Request'
                    statusCodeMessage: 'isFYI has wrong type - boolean expected but integer found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7004
                        property: 'isFYI'
                        errorCodeText: 'wrong property type'
                        errorCodeMessage: 'isFYI should be a boolean. `12` provided as value'
        '404':
          description: |
            If the implementer does not know the `portCallServiceID` path parameter (e.g. the resource does not exist), it is possible for the implementer to reject the request by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `portCallServiceID` cannot be found. This can be because the `portCallServiceID` does not exist in the implementer system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7006` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/decline'
                    statusCode: 404
                    statusCodeText: 'Not Found'
                    statusCodeMessage: 'portCallServiceID not found'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7006
                        errorCodeText: 'portCallServiceID Not Found'
                        errorCodeMessage: 'The Port Call Service does not exist'
        '500':
          description: |
            In case a server error occurs in implementer system, a `500` (Internal Server Error) is returned.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Port Call Service
                  description: |
                    An Internal Server Error has occurred - the caller should contact {implementer-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`).

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7005` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/port-call-services/085a3207-5e45-49cf-8e1b-f8442beaf545/decline'
                    statusCode: 500
                    statusCodeText: 'Internal Server Error'
                    statusCodeMessage: 'Internal Server Error occurred while processing Port Call Service'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-11-21T09:41:00Z'
                    errors:
                      - errorCode: 7005
                        errorCodeText: 'Internal Error occurred'
                        errorCodeMessage: 'Internal Error occurred'
        default:
          description: Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Decline requests
                  description: |
                    Calling the endPoint

                        POST /port-call-services/{portCallServiceID}/decline
                    
                    too many times within a time period results in an error.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: 'POST'
                    requestUri: '/terminal-calls/085a3207-5e45-49cf-8e1b-f8442beaf545/decline'
                    statusCode: 429
                    statusCodeText: 'Too Many Requests'
                    statusCodeMessage: 'Too many requests to decline a Port Call Service has been requested. Please try again in 1 hour'
                    providerCorrelationReference: '4426d965-0dd8-4005-8c63-dc68b01c4962'
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: 'Max Port Call Service declines reached'
                        errorCodeMessage: 'A maximum of 100 unique Port Call Services can be declined per hour'
components:
  headers:
    API-Version:
      schema:
        type: string
        example: 2.0.0
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
      required: true
  parameters:
    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '2'
      description: |
        An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.
    Sending-Party:
      in: header
      name: Sending-Party
      required: false
      schema:
        type: string
        maxLength: 4096
        example: 'Sender-7101ad01-d608-483c-b746-e060ba335d51'
      description: |
        In case the request is being sent **on behalf of** another party - it is possible to add the identifier of the party `Sending` the message here. This header can be used when relaying messages.
    Receiving-Party:
      in: header
      name: Receiving-Party
      required: false
      schema:
        type: string
        maxLength: 4096
        example: 'Request-Receiver-fff76466-070b-463e-8dc2-efc55f108e74'
      description: |
        In case the request needs to be received **on behalf of** another party - it is possible to add the identifier of the party `Receiving` the message here. This header can be used when relaying messages.
    ##############
    # Query params
    ##############

    # Technical query parameters

    portCallIDQueryParam:
      in: query
      name: portCallID
      description: |
        The **Port Call Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `portCallID` filter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
    terminalCallIDQueryParam:
      in: query
      name: terminalCallID
      description: |
        The **Terminal Call Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `terminalCallID` filter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
    portCallServiceIDQueryParam:
      in: query
      name: portCallServiceID
      description: |
        The **Port Call Service Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `portCallServiceID` filter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
    portCallServiceIDRequiredQueryParam:
      in: query
      name: portCallServiceID
      description: |
        The **Port Call Service Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `portCallServiceID` filter.
      required: true
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563

    # Port Call query parameters

    UNLocationCodeQueryParam:
      in: query
      name: UNLocationCode
      description: |
        The **UN Location Code** specifying where a port is located. Specifying this filter will ensure that the result set contains only objects matching the `UNLocationCode` filter.
      schema:
        type: string
        pattern: ^[A-Z]{2}[A-Z2-9]{3}$
        minLength: 5
        maxLength: 5
        example: NLAMS
    portVisitReferenceQueryParam:
      in: query
      name: portVisitReference
      description: |
        The **Port Visit Reference** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `portVisitReference` filter.
      schema:
        type: string
        maxLength: 50
        example: NLAMS1234589
    carrierServiceNameQueryParam:
      in: query
      name: carrierServiceName
      description: |
        The **Carrier specific Service Name** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `carrierServiceName` filter.
      schema:
        type: string
        maxLength: 50
        pattern: ^\S(?:.*\S)?$
        example: Great Lion Service
    carrierServiceCodeQueryParam:
      in: query
      name: carrierServiceCode
      description: |
        The **Carrier specific Service Code** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `carrierServiceCode` filter.
      schema:
        type: string
        maxLength: 11
        pattern: ^\S(?:.*\S)?$
        example: FE1
    universalServiceReferenceQueryParam:
      in: query
      name: universalServiceReference
      description: |
        The **Universal Service Reference** (`USR`) as defined by DCSA to filter by. Specifying this filter will ensure that the result set contains only objects matching the `universalServiceReference` filter.
      schema:
        type: string
        pattern: ^SR\d{5}[A-Z]$
        maxLength: 8
        minLength: 8
        example: SR12345A

    # Terminal Call query parameters

    terminalCallReferenceQueryParam:
      in: query
      name: terminalCallReference
      description: |
        The **Terminal Call Reference** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `terminalCallReference` filter.
      schema:
        type: string
        maxLength: 100
        example: '15063401'
    carrierImportVoyageNumberQueryParam:
      in: query
      name: carrierImportVoyageNumber
      description: |
        The **Carrier Import Voyage Number** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `carrierImportVoyageNumber` filter.
      schema:
        type: string
        maxLength: 50
        pattern: ^\S(?:.*\S)?$
        example: 2103N
    carrierExportVoyageNumberQueryParam:
      in: query
      name: carrierExportVoyageNumber
      description: |
        The **Carrier Export Voyage Number** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `carrierExportVoyageNumber` filter.
      schema:
        type: string
        maxLength: 50
        pattern: ^\S(?:.*\S)?$
        example: 2103S
    universalImportVoyageReferenceQueryParam:
      in: query
      name: universalImportVoyageReference
      description: |
        The **Universal Import Voyage Reference** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `universalImportVoyageReference` filter.
      schema:
        type: string
        pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
        minLength: 5
        maxLength: 5
        example: 2103N
    universalExportVoyageReferenceQueryParam:
      in: query
      name: universalExportVoyageReference
      description: |
        The **Universal Export Voyage Reference** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `universalExportVoyageReference` filter.
      schema:
        type: string
        pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
        minLength: 5
        maxLength: 5
        example: 2103N

    # Port Call Service query parameters

    portCallServiceTypeQueryParam:
      in: query
      name: portCallServiceTypeCode
      description: |
        The **Port Call Service Type** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `portCallServiceTypeCode` filter.
      schema:
        type: string
        maxLength: 50
        pattern: ^\S(?:.*\S)?$
        example: BERTH

    # Vessel query parameters

    vesselIMONumberQueryParam:
      in: query
      name: vesselIMONumber
      description: |
        The **Vessel IMO Number** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `vesselIMONumber` filter.
      schema:
        type: string
        pattern: ^\d{7,8}$
        minLength: 7
        maxLength: 8
        example: '9321483'
    vesselNameQueryParam:
      in: query
      name: vesselName
      description: |
        The **Vessel Name** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `vesselName` filter.
      schema:
        type: string
        pattern: ^\S(?:.*\S)?$
        maxLength: 50
        example: King of the Seas
    MMSINumberQueryParam:
      in: query
      name: MMSINumber
      description: |
        The **MMSI Number** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `MMSINumber` filter.
      schema:
        type: string
        pattern: ^\d{9}$
        minLength: 9
        maxLength: 9
        example: '278111222'

    # Timestamp query parameters
    timestampIDQueryParam:
      in: query
      name: timestampID
      description: |
        The **Timestamp Identifier** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `timestampID` filter.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
    classifierCodeQueryParam:
      in: query
      name: classifierCode
      description: |
        The **Classifier Code** to filter by. Specifying this filter will ensure that the result set contains only objects matching the `classifierCode` filter.
      schema:
        type: string
        enum:
          - ACT
          - EST
          - PLN
          - REQ
        example: 'ACT'

    #############
    # Path params
    #############
    portCallServiceIDPathParam:
      in: path
      name: portCallServiceID
      description: |
        The **Service Provider** created identifier for the **Port Call Service**.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
      required: true
    portCallIDPathParam:
      in: path
      name: portCallID
      description: |
        The **Service Provider** created identifier for the **Port Call**.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
      required: true
    terminalCallIDPathParam:
      in: path
      name: terminalCallID
      description: |
        The **Service Provider** created identifier for the **Terminal Call**.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
      required: true
    timestampIDPathParam:
      in: path
      name: timestampID
      description: |
        The Service **Service Provider** or **Service Consumer** created identifier for the **Timestamp**.
      schema:
        type: string
        format: uuid
        example: 0342254a-5927-4856-b9c9-aa12e7c00563
      required: true
  schemas:
    ###########
    # Port Call
    ###########
    PortCalls:
      type: array
      description: |
        An array of **Port Call** objects matching the filters provided.
      items:
        $ref: '#/components/schemas/PortCall'

    PortCall:
      type: object
      title: Port Call
      description: |
        **Port Call** information. The `portCallID` uniquely identifies the **Port Call**. Any subsequent **Terminal Calls** linked to the same **Port Call** MUST use the same `portCallID`. An optional `portVisitReference` can be added in order to link the **Port Call** to external systems. It is mandatory to provide the **Vessel** information.
      properties:
        portCallID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Port call**. The `portCallID` is created by the **Service Provider**. The `portCallID` **MUST** only be created once per **Port Call**. To be used in all communication regarding the **Port Call**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portVisitReference:
          type: string
          maxLength: 50
          description: |
            The unique reference that can be used to link different **Terminal Calls** to the same port visit. The reference is provided by the port to uniquely identify a **Port Call**.
          example: NLAMS1234589
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download).
          example: NLAMS
        vessel:
          $ref: '#/components/schemas/Vessel'
        omitted:
          type: boolean
          readOnly: true
          default: false
          description: |
            If set to `true` it indicates that the **Port Call** has been omitted by the carrier.
          example: false
        isFYI:
          type: boolean
          writeOnly: true
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - portCallID
        - UNLocationCode
        - vessel

    ###############
    # Terminal Call
    ###############
    TerminalCalls:
      type: array
      description: |
        An array of **Terminal Call** objects matching the filters provided.
      items:
        $ref: '#/components/schemas/TerminalCall'

    TerminalCall:
      type: object
      title: Terminal Call
      description: |
        **Terminal Call** information. The `terminalCallID` uniquely identifies the **Terminal Call**. Any subsequent **Port Call Services** linked to the same **Terminal Call** MUST use the same `terminalCallID`. An optional `terminalCallReference` can be added in order to link the **Terminal Call** to external systems e.g Operational Vessel Schedules (**OVS**).
      properties:
        terminalCallID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Terminal Call**. The `terminalCallID` is created by the **Service Provider**. The `terminalCallID` **MUST** only be created once per **Terminal Call**. To be used in all communication regarding the **Terminal Call**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portCallID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Port call**. The `portCallID` is created by the **Service Provider**. The `portCallID` **MUST** only be created once per **Port Call**. To be used in all communication regarding the **Port Call**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        terminalCallReference:
          type: string
          description: |
            The unique reference for a **Terminal Call**. It's the vessel operator's responsibility to provide the **Terminal Call Reference**, other parties are obliged to pick it up and use it.

            In **Operational Vessel Schedules (OVS) 3.0** this field can be found as `transportCallReference`.
          maxLength: 100
          example: '15063401'
        terminalCallSequenceNumber:
          type: integer
          format: int32
          description: |
            A sequential number assigned to each **Terminal Call** within a **Port Call**, indicating the order in which the calls are scheduled to occur. This number helps differentiate multiple terminal visits in the same **Port Call**.
          example: 2
        carrierServiceName:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The carrier specific name of the service for which the schedule details are published.
          example: Great Lion Service
        carrierServiceCode:
          type: string
          maxLength: 11
          pattern: ^\S(?:.*\S)?$
          description: |
            The carrier specific code of the service for which the schedule details are published.
          example: FE1
        universalServiceReference:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          minLength: 8
          maxLength: 8
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.
          example: SR12345A
        carrierImportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
          example: 2103N
        carrierExportVoyageNumber:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
          example: 2103S
        universalImportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`

            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`

            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        omitted:
          type: boolean
          readOnly: true
          default: false
          description: |
            If set to `true` it indicates that the **Terminal Call** has been omitted by the carrier.
          example: false
        isFYI:
          type: boolean
          writeOnly: true
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - terminalCallID
        - portCallID
        - carrierServiceName
        - carrierServiceCode

    ###################
    # Port Call Service
    ###################
    PortCallServices:
      type: array
      description: |
        An array of **Port Call Services** matching the filters provided.
      items:
        $ref: '#/components/schemas/PortCallService'

    PortCallService:
      type: object
      title: Port Call Service
      description: |
        The **Port Call Service** contains all information about the service being provided.
      properties:
        terminalCallID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Terminal Call**. The `terminalCallID` is created by the **Service Provider**. The `terminalCallID` **MUST** only be created once per **Terminal Call**. To be used in all communication regarding the **Terminal Call**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portCallServiceID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Port Call Service**. The `portCallServiceID` is created by the **Service Provider**. To be used in all communication regarding the **Port Call Service** (i.e. sending a **Timestamp** with the timestamps endpoint).
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portCallServiceTypeCode:
          type: string
          maxLength: 50
          pattern: ^\S(?:.*\S)?$
          description: |
            The type of the **Port Call Service**.

            **Port Call Services** negotiable through an `ERP`-pattern including an `A`, can be one of:
            - `BERTH` (Berth)
            - `CARGO_OPERATIONS` (Cargo operations)
            - `PILOTAGE` (Pilotage)
            - `TOWAGE` (Towage)
            - `MOORING` (Mooring)
            - `BUNKERING` (Bunkering)
            - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
            - `ANCHORAGE` (Anchorage)
            - `SLUDGE` (Sludge)

            **Port Call Services** without `ERP`-pattern having only an `A`, can be one of:

            - `SEA_PASSAGE` (Sea Passage)
            - `ALL_FAST` (All Fast)
            - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
            - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
            - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
            - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
            - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
            - `LASHING` (Lashing)
            - `SAFETY` (Safety)
            - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
            - `SHORE_POWER` (ShorePower)

            **Port Call Service** without an `ERP` and without an `A`, can be one of:
            - `MOVES` (Moves)
          example: BERTH
        portCallServiceEventTypeCode:
          type: string
          description: |
            The code to identify the type of event that is related to the **Port Call Service**:
            - `STRT` (Started)
            - `CMPL` (Completed)
            - `ARRI` (Arrived)
            - `DEPA` (Departed)

            **Conditions:**
            - These `portCallServiceTypeCode` values can only be used with `portCallServiceEventTypeCode` values `STRT` and `CMPL`:
              - `CARGO_OPERATIONS` (Cargo operations)
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)
              - `BUNKERING` (Bunkering)
              - `ANCHORAGE` (Anchorage)
              - `SLUDGE` (Sludge)
              - `SEA_PASSAGE` (Sea Passage)
              - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
              - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
              - `LASHING` (Lashing)
              - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
              - `SHORE_POWER` (ShorePower)

            - The `portCallServiceTypeCode='BERTH'` (Berth) can only be used with `portCallServiceEventTypeCode` values `ARRI` and `DEPA`.

            - These `portCallServiceTypeCode` values can only be used with `portCallServiceEventTypeCode` value `ARRI`:
              - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
              - `ALL_FAST` (All Fast)
              - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
              - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
              - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
              - `MOVES` (Moves)

            - The `portCallServiceTypeCode='SAFETY'` can only be used with `portCallServiceEventTypeCode` value `DEPA`.
          enum:
            - STRT
            - CMPL
            - ARRI
            - DEPA
          example: STRT
        portCallPhaseTypeCode:
          type: string
          description: |
            The general direction of the `Vessel` for which information applies
            - `INBD` (Inbound)
            - `ALGS` (Alongside)
            - `SHIF` (Shifting)
            - `OUTB` (Outbound)

            **Recommendations:**
            - `INBD` should preferably be used with the following `portCallServiceTypeCode`:
              - `BERTH` (Berth)
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)
              - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
              - `SEA_PASSAGE` (Sea Passage)

            - `ALGS` should preferably be used with the following `portCallServiceTypeCode`:
              - `BERTH` (Berth)
              - `BUNKERING` (Bunkering)
              - `CARGO_OPERATIONS` (Cargo operations)
              - `ALL_FAST` (All Fast)
              - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
              - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
              - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
              - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
              - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
              - `LASHING` (Lashing)
              - `SAFETY` (Safety)
              - `SHORE_POWER` (ShorePower)

            - `SHIF` should preferably be used with the following `portCallServiceTypeCode`:
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)

            - `OUTB` should preferably be used with the following `portCallServiceTypeCode`:
              - `BERTH` (Berth)
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)
              - `SEA_PASSAGE` (Sea Passage)

            - The property `portCallPhaseTypeCode` should preferably **not** be sent with the following `portCallServiceTypeCode`:
              - `ANCHORAGE` (Anchorage)
              - `SLUDGE` (Sludge)
              - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
              - `MOVES` (Moves)
          enum:
            - INBD
            - ALGS
            - SHIF
            - OUTB
          example: ALGS
        facilityTypeCode:
          type: string
          maxLength: 4
          description: |
            A specialized version of the facilityCode to be used in the **Port Call Service**. The code to identify the specific type of facility.
            - `PBPL` (Pilot boarding place)
            - `BRTH` (Berth)
            - `ANCH` (Anchorage Location)

            **Recommendations:**
              - `PBPL`, when used, should preferably be used with the following `portCallServiceTypeCode`:
                - `PILOTAGE` (Pilotage)
                - `TOWAGE` (Towage)
                - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)

              - `BRTH`, when used, should preferably be used with the following `portCallServiceTypeCode`:
                - `BERTH` (Berth)
                - `CARGO_OPERATIONS` (Cargo operations)
                - `PILOTAGE` (Pilotage)
                - `TOWAGE` (Towage)
                - `MOORING` (Mooring)
                - `BUNKERING` (Bunkering)
                - `SLUDGE` (Sludge)
                - `ALL_FAST` (All Fast)
                - `GANGWAY_DOWN_AND_SECURE` (Gangway down and secure)
                - `VESSEL_READY_FOR_CARGO_OPERATIONS` (Vessel Ready for cargo operations)
                - `VESSEL_READY_TO_SAIL` (Vessel Ready to sail)
                - `DISCHARGE_CARGO_OPERATIONS` (Discharge cargo operations)
                - `LOADING_CARGO_OPERATIONS` (Loading cargo operations)
                - `LASHING` (Lashing)
                - `SAFETY` (Safety)
                - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
                - `SHORE_POWER` (ShorePower)

            - `ANCH`, when used, should preferably be used with the following `portCallServiceTypeCode`:
              - `ANCHORAGE` (Anchorage)
              - `ANCHORAGE_OPERATIONS` (Anchorage Operations)
          enum:
            - PBPL
            - BRTH
            - ANCH
          example: BRTH
        portCallServiceLocation:
          $ref: '#/components/schemas/PortCallServiceLocation'
        moves:
          $ref: '#/components/schemas/MovesList'
        cancelled:
          type: boolean
          readOnly: true
          default: false
          description: |
            The **Port Call Service** has been `cancelled` by the **Service Provider**.
          example: false
        declined:
          type: boolean
          readOnly: true
          default: false
          description: |
            The **Port Call Service** has been `declined` by the **Service Consumer**.
          example: false
        isFYI:
          type: boolean
          writeOnly: true
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - terminalCallID
        - portCallServiceID
        - portCallServiceTypeCode
        - portCallServiceEventTypeCode
        - portCallServiceLocation

    ###########
    # Timestamp
    ###########
    Timestamps:
      type: array
      description: |
        An array of **Timestamps** matching the filters provided.
      items:
        $ref: '#/components/schemas/Timestamp'

    Timestamp:
      title: Timestamp
      type: object
      description: |
        Date and time for an `ERP-A` **Timestamp** when a **Port Call Service** should be provided (for `ERP`) or has been provided (for `A`).
      properties:
        timestampID:
          type: string
          format: uuid
          description: |
            Universally unique identifier for the **Timestamp**. The creator of the **Timestamp** is responsible to create the `timestampID`.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        replyToTimestampID:
          type: string
          format: uuid
          description: |
            The identifier of the **Timestamp** being replied to. Omitted in case the **Timestamp** is the initial **Timestamp**.

            **Conditions:**
            - Only applicable after initial **Timestamp** has been sent.
            - Can only reply to a **Timestamp** with the same `portCallServiceID`
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        portCallServiceID:
          type: string
          format: uuid
          description: |
            Links the **Timestamp** to a **Port Call Service**.
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        classifierCode:
          type: string
          description: |
            Code for describing the **Timestamp**.

            Possible values are:
            - `ACT` (Actual)
            - `EST` (Estimated)
            - `PLN` (Planned)
            - `REQ` (Requested)

            **Conditions:**
            - `EST`, `PLN` and `ACT` can **only** be used by the **Service Provider** when sending a **Timestamp** to the **Service Consumer**.
            - `REQ` is **only** to be used by the **Service Consumer** when sending a **Timestamp** to the **Service Provider**.
            - `ACT` can be used in a **Timestamp** for any **Port Call Service** except `portCallServiceTypeCode='MOVES'`
            - `EST`, `REQ`and `PLN` can be used in a **Timestamp** for any **Port Call Service** with `portCallServiceTypeCode` having one of the following values:
              - `BERTH` (Berth)
              - `CARGO_OPERATIONS` (Cargo operations)
              - `PILOTAGE` (Pilotage)
              - `TOWAGE` (Towage)
              - `MOORING` (Mooring)
              - `BUNKERING` (Bunkering)
              - `PILOT_BOARDING_PLACE` (Pilot Boarding Place)
              - `ANCHORAGE` (Anchorage)
              - `SLUDGE` (Sludge)

          enum:
            - ACT
            - EST
            - PLN
            - REQ
          example: EST
        dateTime:
          type: string
          format: date-time
          description: |
            The local date and time, when the **Port Call Service Event Type Code** of a **Port Call Service Type** is estimated, requested, planned to happen, or has happened.
          example: '2019-11-12T07:41:00+08:30'
        portCallServiceLocation:
          $ref: '#/components/schemas/PortCallServiceLocationTimestamp'
        delayReasonCode:
          type: string
          maxLength: 3
          description: |
            Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.
          example: STR
        remark:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Port closed due to strike
        isFYI:
          type: boolean
          writeOnly: true
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - timestampID
        - portCallServiceID
        - classifierCode
        - dateTime

    ########
    # Vessel
    ########
    Vessel:
      type: object
      title: Vessel
      description: |
        **Vessel** related to this **Port Call**.
      properties:
        vesselIMONumber:
          type: string
          pattern: ^\d{7,8}$
          minLength: 7
          maxLength: 8
          description: |
            The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd's register code, which does not change during the lifetime of the vessel.

            **Condition:** At least one of `vesselIMONumber` or `MMSINumber` **MUST** be specified in order to identify the `Vessel`. It is also acceptable to provide both properties.
          example: '9321483'
        MMSINumber:
          type: string
          description: |
            Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.

            **Condition:** At least one of `vesselIMONumber` or `MMSINumber` **MUST** be specified in order to identify the `Vessel`. It is also acceptable to provide both properties.
          pattern: ^\d{9}$
          minLength: 9
          maxLength: 9
          example: '278111222'
        name:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
        lengthOverall:
          type: number
          format: float
          description: |
            The maximum length of a ship's hull measured parallel to the waterline (Length OverAll).

            If the length is specified in feet (`FOT`) then the decimal part means a fraction of a foot and **not** as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6").
          example: 245.45
        width:
          type: number
          format: float
          description: |
            Overall width of the ship measured at the widest point of the nominal waterline.

            If the width is specified in feet (`FOT`) then the decimal part means a fraction of a foot and **not** as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6").
          example: 37.33
        dimensionUnit:
          type: string
          description: |
            The unit of measure which can be expressed in
            - `MTR` (Meter)
            - `FOT` (Foot)
            
            **Condition:** Mandatory to provide if `lengthOverall` or `width` is provided.
          enum:
            - MTR
            - FOT
          example: MTR
        callSign:
          type: string
          maxLength: 10
          pattern: ^\S(?:.*\S)?$
          description: |
            A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a three letter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.
          example: NCVV
        typeCode:
          type: string
          description: |
            Categorization of ocean-going vessels distinguished by the main cargo the vessel carries. Possible values:
            - `GCGO` (General cargo)
            - `CONT` (Container)
            - `RORO` (RoRo)
            - `CARC` (Car carrier)
            - `PASS` (Passenger)
            - `FERY` (Ferry)
            - `BULK` (Bulk)
            - `TANK` (Tanker)
            - `LGTK` (Liquefied gas tanker)
            - `ASSI` (Assistance)
            - `PILO` (Pilot boat)
          enum:
            - GCGO
            - CONT
            - RORO
            - CARC
            - PASS
            - FERY
            - BULK
            - TANK
            - LGTK
            - ASSI
            - PILO
          example: CONT

    ##############
    # VesselStatus
    ##############
    VesselStatuses:
      type: array
      description: |
        An array of **Vessel Status** objects matching the filters provided.
      items:
        $ref: '#/components/schemas/VesselStatus'

    VesselStatus:
      title: Vessel Status
      type: object
      description: |
        Dynamic data for a **Vessel**. This includes `draft`(s), `milesToDestinationPort` and the location of the vessel.
      properties:
        portCallServiceID:
          type: string
          format: uuid
          description: |
            Universal unique identifier for the **Port Call Service**. The `portCallServiceID` is created by the **Service Provider**. To be used in all communication regarding the **Port Call Service** (i.e. sending a **Vessel Status** with the vessel-status endpoint).
          example: 0342254a-5927-4856-b9c9-aa12e7c00563
        draft:
          type: number
          format: float
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) of a ship. The depth to which a ship is immersed in water.

            **Note:** If the draft is specified in feet (`FOT`) then the decimal part means a fraction of a foot and **not** as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6").
          example: 12.5
        airDraft:
          type: number
          format: float
          description: |
            The vertical distance from the surface of the water to the highest point of mast or aerial.

            **Note:** If the vertical draft is specified in feet (`FOT`) then the decimal part means a fraction of a foot and **not as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6").
          example: 55
        aftDraft:
          type: number
          format: float
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) at the stern (after part) of the vessel. The depth to which the after part of the ship is immersed in water.

            **Note:** If the vertical draft is specified in feet (`FOT`) then the decimal part means a fraction of a foot and **not as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6").
          example: 37
        forwardDraft:
          type: number
          format: float
          description: |
            The vertical distance between the waterline and the bottom of the hull (keel) at the bow (forward part) of the vessel. The depth to which the forward part of the ship is immersed in water.

            **Note:** If the vertical draft is specified in feet (`FOT`) then the decimal part means a fraction of a foot and **not as a number of inches. E.g. 120.5 feet means 120 and a half foot (which would be 120'6").
          example: 35
        dimensionUnit:
          type: string
          description: |
            The unit of measure which can be expressed in
            - `MTR` (Meter)
            - `FOT` (Foot)
            
            **Condition:** Mandatory to provide if `draft`, `airDraft`, `aftDraft` or `forwardDraft` is provided.
          enum:
            - MTR
            - FOT
          example: MTR
        vesselPosition:
          $ref: '#/components/schemas/VesselPosition'
        milesToDestinationPort:
          type: number
          format: float
          description: |
            Remaining distance reported by the vessel to the next destination port in nautical miles to the berth in that port.
          example: 245.45
        isFYI:
          type: boolean
          writeOnly: true
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true
      required:
        - portCallServiceID

    #################
    # Vessel position
    #################
    VesselPosition:
      type: object
      title: Vessel Position
      description: |
        The location can be specified using **any** of the nested structures:
        - `UNLocationCode`
        - `facility` (used to specify a location using a `facilityCode` and a `facilityCodeListProvider`)
        - `geoCoordinate` (used to specify a location using `latitude` and `longitude`)

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as a `facility` and as a `geoCoordinate`) that both ways point to the same location.
      example:
        locationName: CMP Container Terminal Copenhagen
        UNLocationCode: DKCPH
        facility:
          facilityCode: CMPDK
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download).
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'

    ############################
    # Port Call Service Location
    ############################
    PortCallServiceLocation:
      type: object
      title: Port Call Service Location
      description: |
        The location **MUST** be specified as a `UNLocationCode` and can also be specified using **any** of the nested structures:
        - `facility` (used to specify a location using a `facilityCode` and a `facilityCodeListProvider`)
        - `geoCoordinate` (used to specify a location using `latitude` and `longitude`)

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as a `facility` and as a `geoCoordinate`) that both ways point to the same location.
      example:
        locationName: CMP Container Terminal Copenhagen
        UNLocationCode: DKCPH
        facility:
          facilityCode: CMPDK
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download).
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
      required:
        - UNLocationCode

    ################################################
    # Port Call Service Location (used in Timestamp)
    ################################################
    PortCallServiceLocationTimestamp:
      type: object
      title: Port Call Service Location (Timestamp)
      description: |
        The location **MUST** be specified as a `UNLocationCode` and can also be specified using **any** of the nested structures:
        - `facility` (used to specify a location using a `facilityCode` and a `facilityCodeListProvider`)
        - `geoCoordinate` (used to specify a location using `latitude` and `longitude`)

        **Conditions:**
        - It is expected that if a location is specified in multiple ways (e.g. both as a `facility` and as a `geoCoordinate`) that both ways point to the same location.
        - this property is **only** to be used in combination with `classifierCode=REQ` (a requested **Timestamp**) and can only be used by a **Service Consumer**
      example:
        locationName: CMP Container Terminal Copenhagen
        UNLocationCode: DKCPH
        facility:
          facilityCode: CMPDK
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download).
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'
      required:
        - UNLocationCode

    ###################
    # Facility Location
    ###################
    Facility:
      title: Facility
      type: object
      description: |
        An object used to express a location using a **Facility**. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      properties:
        facilityCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 6
          description: |
            The code used for identifying the specific facility. This code does not include the **UN Location Code**.

            The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:

            - `SMDG` (the codeList used is the [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/))
            - `BIC` (the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/))
          example: ADT
        facilityCodeListProvider:
          type: string
          description: |
            The **Service Provider** used for identifying the facility Code. Some facility codes are only defined in combination with an **UN Location Code**
            - `BIC` (Requires a UN Location Code)
            - `SMDG` (Requires a UN Location Code)
          enum:
            - BIC
            - SMDG
          example: SMDG
        subFacility:
          type: string
          maxLength: 100
          pattern: ^\S(?:.*\S)?$
          description: |
            The position along the line of a berth, specified by one point (e.g. bollard, manifold, ramp number), allowing the ship to berth in the correct position along the berth.
          example: Bollard 20
      required:
        - facilityCode
        - facilityCodeListProvider

    #########################
    # Geo Coordinate Location
    #########################
    GeoCoordinate:
      type: object
      title: Geo Coordinate
      description: |
        An object used to express a location using `latitude` and `longitude`.
      properties:
        latitude:
          type: string
          description: Geographic coordinate that specifies the north-south position of a point on the Earth's surface.
          maxLength: 10
          example: '48.8585500'
        longitude:
          type: string
          description: Geographic coordinate that specifies the east-west position of a point on the Earth's surface.
          maxLength: 11
          example: '2.294492036'
      required:
        - latitude
        - longitude

    ########
    # Cancel
    ########
    Cancel:
      type: object
      title: Cancel
      description: |
        Used by **Service Provider** to cancel a **Port Call Service**.
      properties:
        reason:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Storms ahead
        isFYI:
          type: boolean
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true

    #########
    # Decline
    #########
    Decline:
      type: object
      title: Decline
      description: |
        Used by **Service Consumer** to decline a **Port Call Service**.
      properties:
        reason:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Crane broken
        isFYI:
          type: boolean
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true

    ######
    # Omit
    ######
    OmitPortCall:
      type: object
      title: Omit Port Call
      description: |
        Used by **Service Consumer** to omit a **Port Call**.
      properties:
        reason:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Engine failure
        isFYI:
          type: boolean
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true

    OmitTerminalCall:
      type: object
      title: Omit Terminal Call
      description: |
        Used by **Service Consumer** to omit a **Terminal Call**.
      properties:
        reason:
          type: string
          maxLength: 500
          description: |
            Free text to provide additional information on the context.
          example: Engine failure
        isFYI:
          type: boolean
          default: false
          description: |
            If set to `true` it indicates that this message is primarily meant for another party - but is sent as a FYI (for your information).
          example: true

    #######
    # Moves
    #######
    MovesList:
      type: array
      description: |
        An array of **Moves**. Each object in the array can represent moves data for a specific VSA partner in the vessel or as an accumulated result for the remaining VSA partners in the vessel.
      items:
        $ref: '#/components/schemas/Moves'
    Moves:
      type: object
      title: Moves
      description: |
        Forecasted units of containers to move for loading and discharging, empty or laden, covering various types such as Dry, reefer, Out-of-Gauge (OOG), and units of containers to restow at a terminal. These can be detailed at varying levels of granularity.

        ### Multiple Moves Objects with Carrier Codes
        If `carrierCode` and `carrierCodeListProvider` are provided for multiple **Moves** objects, any object without these fields represents the accumulated result of moves for the remaining VSA partners in the vessel.
        
        ### Single Moves Object Without Carrier Codes
        If only one **Moves** object exists and does not include `carrierCode` and `carrierCodeListProvider`, it represents the accumulated result for all VSA partners on the vessel.

        ### Single Moves Object with Carrier Codes
        If only one **Moves** object exists and includes `carrierCode` and `carrierCodeListProvider`, it represents moves specifically for the indicated carrier.

        **Condition:** Can only be provided if `portCallServiceTypeCode` is `MOVES`
      properties:
        carrierCode:
          type: string
          description: |
            Providing this property means that the **Moves** is only related to this particular `carrierCode`. Omitting this property means that the **Moves** is an aggregated result from all VSA-Partners.

            The carrier code based on either the **SMDG** or **SCAC** code lists.

            **Condition:** Mandatory if `carrierCodeListProvider` is provided.

            **Condition:** If there are multiple `moves` objects, there can be a maximum of only one `moves` object without a `carrierCode`.
            
            **Condition:** If there are multiple `moves` objects, a `carrierCode` MUST NOT be repeated.
          maxLength: 4
          pattern: ^\S+$
          example: MAEU
        carrierCodeListProvider:
          type: string
          description: |
            Identifies the code list **Service Provider** used for the `carrierCode`. Possible values are:
              - `SMDG` (Ship Message Design Group)
              - `NMFTA` (National Motor Freight Traffic Association)

            **Condition:** Mandatory if `carrierCode` is provided.
          example: NMFTA
          enum:
            - SMDG
            - NMFTA
        restows:
          $ref: '#/components/schemas/Restows'
      oneOf:
        - $ref: '#/components/schemas/TotalUnits'
        - $ref: '#/components/schemas/SpecificUnits'

    Restows:
      type: object
      title: Restows
      description: |
        Forecasted container units to restow, where containers are off loaded from on board the ship and put back onto the ship either at the same stow position or a different stow position.
      oneOf:
        - $ref: '#/components/schemas/TotalRestows'
        - $ref: '#/components/schemas/ContainerRestows'

    TotalRestows:
      type: object
      title: Total units to restow
      additionalProperties: false
      description: |
        Forecasted total units of containers to restow.
      properties:
        totalRestows:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted total units of containers to restow.
          example: 155
      required:
        - totalRestows

    ContainerRestows:
      type: object
      title: Container units to restow
      description: |
        Forecasted container units to restow, covering three sizes: **20-foot**, **40-foot** containers, and **45-foot** containers.
      properties:
        _20_units:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted units of **20-foot** containers.
          example: 25
        _40_units:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted units of **40-foot** containers.
          example: 30
        _45_units:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted units of **45-foot** containers.
          example: 30
      required:
        - _20_units
        - _40_units
        - _45_units

    TotalUnits:
      type: object
      title: Total Units (Dry + Reefer + OOG)
      additionalProperties: false
      description: |
        Forecasted total units of containers to move for loading and discharging, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG).
      properties:
        totalUnits:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted total units of containers.
          example: 155
      required:
        - totalUnits

    SpecificUnits:
      type: object
      title: Specific Units (for load and discharge)
      description: |
        Forecasted units of containers to move for loading and discharging, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG).
      properties:
        loadUnits:
          $ref: '#/components/schemas/LoadUnits'
        dischargeUnits:
          $ref: '#/components/schemas/DischargeUnits'

    LoadUnits:
      type: object
      title: Load Units
      description: |
        Forecasted total units of containers to move for loading, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG).
      properties:
        ladenContainerUnits:
          $ref: '#/components/schemas/LadenContainerUnits'
        emptyContainerUnits:
          $ref: '#/components/schemas/EmptyContainerUnits'
        reeferPluggedContainerUnits:
          $ref: '#/components/schemas/ReeferPluggedContainerUnits'
        oogUnits:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted Out-of-gauge (OOG) units.
          example: 2

    DischargeUnits:
      type: object
      title: Discharge Units
      description: |
        Forecasted total units of containers to move for discharging, empty or laden, at a terminal, covering various types such as Dry, Reefer, Out-of-Gauge (OOG).
      properties:
        ladenContainerUnits:
          $ref: '#/components/schemas/LadenContainerUnits'
        emptyContainerUnits:
          $ref: '#/components/schemas/EmptyContainerUnits'
        reeferPluggedContainerUnits:
          $ref: '#/components/schemas/ReeferPluggedContainerUnits'
        oogUnits:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted Out-of-gauge (OOG) units.
          example: 2

    LadenContainerUnits:
      type: object
      title: Laden Container Units
      description: |
        Forecasted laden containers.
      oneOf:
        - $ref: '#/components/schemas/TotalLadenUnits'
        - $ref: '#/components/schemas/ContainerUnits'

    TotalLadenUnits:
      type: object
      title: Total Laden Units (Dry)
      additionalProperties: false
      description: |
        Forecasted total dry laden units of containers to move at a terminal.
      properties:
        totalUnits:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted total units of containers.
          example: 155
      required:
        - totalUnits

    ContainerUnits:
      type: object
      title: Container Units
      description: |
        Forecasted units of containers to move for **20-foot**, **40-foot** and **45-foot** containers.
      properties:
        _20_units:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted units of **20-foot** containers.
          example: 25
        _40_units:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted units of **40-foot** containers.
          example: 30
        _45_units:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted units of **45-foot** containers.
          example: 15
      required:
        - _20_units
        - _40_units
        - _45_units

    EmptyContainerUnits:
      type: object
      title: Empty Container Units
      description: |
        Forecasted empty containers.
      oneOf:
        - $ref: '#/components/schemas/TotalEmptyUnits'
        - $ref: '#/components/schemas/ContainerUnits'

    TotalEmptyUnits:
      type: object
      title: Total Empty Units
      additionalProperties: false
      description: |
        Forecasted total empty units of containers to move at a terminal.
      properties:
        totalUnits:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted total units of containers.
          example: 155
      required:
        - totalUnits

    ReeferPluggedContainerUnits:
      type: object
      title: Reefer Plugged Container Units
      description: |
        Forecasted reefer containers that are plugged.
      oneOf:
        - $ref: '#/components/schemas/TotalReeferPluggedUnits'
        - $ref: '#/components/schemas/ContainerUnits'

    TotalReeferPluggedUnits:
      type: object
      title: Total Reefer Plugged Units
      additionalProperties: false
      description: |
        Forecasted total reefer plugged units of containers to move at a terminal.
      properties:
        totalUnits:
          type: integer
          format: int32
          minimum: 0
          description: |
            Forecasted total units of containers.
          example: 155
      required:
        - totalUnits

    ################
    # Error Response
    ################
    ErrorResponse:
      title: Error Response
      type: object
      description:
        Unexpected error.
      properties:
        httpMethod:
          description: |
            The HTTP method used to make the request e.g. `GET`, `POST`, etc.
          type: string
          example: POST
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTION
            - PATCH
        requestUri:
          description: |
            The URI that was requested.
          type: string
          example: /port-call-services/0342254a-5927-4856-b9c9-aa12e7c00563
        statusCode:
          description: |
            The HTTP status code returned.
          type: integer
          format: int32
          example: 400
        statusCodeText:
          description: |
            A standard short description corresponding to the HTTP status code.
          type: string
          maxLength: 50
          example: Bad Request
        statusCodeMessage:
          description: |
            A long description corresponding to the HTTP status code with additional information.
          type: string
          maxLength: 200
          example: The supplied data could not be accepted
        providerCorrelationReference:
          description: |
            A unique identifier to the HTTP request within the scope of the API provider.
          type: string
          maxLength: 100
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          description: |
            The DateTime corresponding to the error occurring.
          type: string
          format: date-time
          example: '2024-09-04T09:41:00Z'
        errors:
          type: array
          description: |
            An array of errors providing more detail about the root cause.
          minItems: 1
          items:
            $ref: '#/components/schemas/DetailedError'
      required:
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
        - errorDateTime
        - errors
    DetailedError:
      type: object
      title: Detailed Error
      description: |
        A detailed description of what has caused the error.
      properties:
        errorCode:
          type: integer
          format: int32
          description: |
            The detailed error code returned.

              - `7000-7999` Technical error codes
              - `8000-8999` Functional error codes
              - `9000-9999` API provider-specific error codes            

            [Error codes as specified by DCSA](https://developer.dcsa.org/standard-error-codes).
          minimum: 7000
          maximum: 9999
          example: 7003
        property:
          type: string
          maxLength: 100
          description: |
            The name of the property causing the error.
          example: facilityCode
        value:
          type: string
          maxLength: 500
          description: |
            The value of the property causing the error serialised as a string exactly as in the original request.
          example: SG SIN WHS
        jsonPath:
          type: string
          maxLength: 500
          description: |
            A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
          example: $.location.facilityCode
        errorCodeText:
          description: |
            A standard short description corresponding to the `errorCode`.
          type: string
          maxLength: 100
          example: invalidData
        errorCodeMessage:
          type: string
          maxLength: 5000
          description: |
            A long description corresponding to the `errorCode` with additional information.
          example: Spaces not allowed in facility code
      required:
        - errorCodeText
        - errorCodeMessage
