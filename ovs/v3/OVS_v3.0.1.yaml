openapi: 3.0.3
info:
  title: Operational Vessel Schedules
  description: |
    <h1>DCSA OpenAPI specification for Operational Vessel Schedules</h1>
    
    The Interface Standards for OVS and other documentation can be found on the [DCSA Website](https://dcsa.org/standards/operational-vessel-schedules/).
    
    For explanation to specific values or objects please refer to the [Information Model](https://dcsa.org/wp-content/uploads/2024/01/DCSA-Information-Model-2023.Q4.pdf).
    
    ### Stats API
    The Stats API offers crucial statistical information for both API providers and consumers to enhance their services and helps DCSA to understand and scale the ecosystem. We expect you to invoke the Stats API for every request made to the Operational Vessel Schedules API. Further details can be found [here](https://developer.dcsa.org/#/http/guides/api-guides/stats-api)
    
    ### API Design & Implementation Principles
    This API follows the guidelines defined in version 2.0 of the API Design & Implementation Principles which can be found on the [DCSA Developer Portal](https://developer.dcsa.org/api_design)

    ### Changelog and Contact Us
    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/ovs/v3#v301). If you have any questions, feel free to [Contact Us](https://dcsa.org/get-involved/contact-us).

    API specification issued by [DCSA.org](https://dcsa.org/).
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: https://dcsa.org
    email: info@dcsa.org
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.0.1
tags:
  - name: Operational Vessel Schedules
    description: ' '
paths:
  /v3/service-schedules:
    get:
      tags:
        - Operational Vessel Schedules
      summary: |
        Get a list of Schedules
      operationId: get-v3-service-schedules
      description: |
        Get a list of service schedules. The result is `Vessel-Centric` - this means that the `Vessel` is in the top of the hierarchy of the response structure. A service is a heirarchical structure with the following elements:
        - One or more `Services` which can contain one or more `Vessels`
        - A `Vessel` which can call multiple `Ports` (`TransportCalls`).
        - A `Port` (`TransportCall`) can contain one or more `TimeStamps`.
        
        The number of service schedules in the list can be narrowed down by providing filter parameters. The resulting payload will always include **entire voyage(s) being matched**. This means that even though a filter only matches a single `Port` in a `Voyage` or a single `Timestamp` within a `Port` in a `Voyage` - **the entire Voyage matched** is returned. If the `carrierImportVoyageNumber` of the `Port` differs from the `carrierExportVoyageNumber` of the `Port` then the **entire Voyage** for both these Voyage numbers are included.
        
        An example of this is when `&UNLocationCode=DEHAM` is used as a filter parameter. In this case **entire Voyages** would be listed where `DEHAM` is a `Port`.
        
        Be aware that it is possible to specify filters that are mutially exclusive resulting in an empty response list. An example of this could be when both using `vesselIMONumber` and `vesselName` filters at the same time:
        
        ```
        &vesselIMONumber=9321483&vesselName=King of the Seas
        ```
        
        If no `Vessel` exists where `vesselIMONumber` is **9321483** and `vesselName` is **King of the Seas** then the result will be an empty list
        
        If no `startDate` filter is provided then **3 months** prior to the request data is used. If no `endDate` filters is provided then **6 months** after the request date is used.
      parameters:
        - name: carrierServiceName
          in: query
          description: |
            The carrier service name to filter by. The result will only return schedules including the service name.
          schema:
            type: string
            maxLength: 50
            example: Great Lion Service
        - name: carrierServiceCode
          in: query
          description: |
            The carrier specific service code to filter by. The result will only return schedules including the service code.
          schema:
            type: string
            maxLength: 11
            example: FE1
        - name: universalServiceReference
          in: query
          description: |
            The **U**niversal **S**ervice **R**eference (`USR`) as defined by **DCSA** to filter by. The service code must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`. The result will only return schedules including the service reference
          schema:
            type: string
            pattern: ^SR\d{5}[A-Z]$
            maxLength: 8
            example: SR12345A
        - name: vesselIMONumber
          in: query
          description: |
            The identifier of a vessel via the `vesselIMONumber`. The result will only return schedules including the vessel with the specified `vesselIMONumber`. It is not a requirement for dummy vessels to have an `vesselIMONumber`. In this case filtering by `vesselName` should be used.
          schema:
            type: string
            pattern: ^\d{7}$
            maxLength: 7
            example: '9321483'
        - name: MMSINumber
          in: query
          description: |
            The identifier of a vessel via the `MMSINumber`. The result will only return schedules including the vessel with the specified `MMSINumber`. It is not a requirement for dummy vessels to have an `MMSINumber`. In this case filtering by `vesselName` should be used.
          schema:
            type: string
            pattern: ^\d{9}$
            minLength: 9
            maxLength: 9
            example: '278111222'
        - name: vesselName
          in: query
          description: |
            The name of a vessel. The result will only return schedules including the vessel with the specified name. Be aware that the `vesselName` is not unique and might match multiple vessels. If possible, filtering by `IMO Number` is preferred. In case of dummy vessels an `IMO Number` might not exist in which case this filter is to be used.'
          schema:
            type: string
            maxLength: 35
            example: King of the Seas
        - name: carrierVoyageNumber
          in: query
          description: |
            The carrier specific identifier of a `Voyage` - can be both **importVoyageNumber** and **exportVoyageNumber**. The result will only return schedules including the `Ports` where `carrierVoyageNumber` is either `carrierImportVoyageNumber` or `carrierExportVoyageNumber`
          schema:
            type: string
            maxLength: 50
            example: 2103S
        - name: universalVoyageReference
          in: query
          description: |
            The Universal Reference of a `Voyage` - can be both **importUniversalVoyageReference** and **exportUniversalVoyageReference**. The result will only return schedules including the `Ports` where `universalVoyageReference` is either `importUniversalVoyageReference` or `exportUniversalVoyageReference`
          schema:
            type: string
            pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
            maxLength: 5
            example: 2201N
        - name: UNLocationCode
          in: query
          description: |
            The `UN Location Code` specifying where a port is located. Specifying this filter will only return schedules including **entire Voyages** related to this particular `UN Location Code`.
          schema:
            type: string
            pattern: ^[A-Z]{2}[A-Z2-9]{3}$
            minLength: 5
            maxLength: 5
            example: NLAMS
        - name: facilitySMDGCode
          in: query
          description: |
            The `facilitySMDGCode` specifying a specific facility (using SMDG Code). Be aware that the `facilitySMDGCode` does not contain a `UNLocationCode` - this must be specified in the `UNLocationCode` filter. Specifying this filter will only return schedules including **entire Voyages** related to this particular `facilitySMDGCode`.
          schema:
            type: string
            maxLength: 6
            example: APM
        - name: startDate
          in: query
          description: |
            The start date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or after (`≥`) the `startDate` the **entire Voyage** (import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call. If this filter is not provided the default value is **3 months** prior to request time.
          schema:
            type: string
            format: date
            example: '2020-04-06'
        - name: endDate
          in: query
          description: |
            The end date of the period for which schedule information is requested. If a date of any Timestamp (`ATA`, `ETA` or `PTA`) inside a `PortCall` matches a date on or before (`≤`) the `endDate` the **entire Voyage**(import- and export-Voyage) matching the `PortCall` will be included in the result. All matching is done towards local Date at the place of the port call. If this filter is not provided the default value is **6 months** after request time.
          schema:
            type: string
            format: date
            example: '2020-04-10'
        - name: limit
          in: query
          description: |
            Specifies the maximum number of `Service Schedules` to include in each page of the response.
          schema:
            minimum: 0
            type: number
            default: 100
        - name: cursor
          in: query
          description: |
            A server-generated value that identifies the next page position in a collection. When `cursor` is provided, it **MUST NOT** be combined with any other query parameters (including `limit`); such parameters will be ignored and MAY result in a `400` error.
          schema:
            type: string
            maxLength: 1024
            example: fE9mZnNldHw9MTAmbGltaXQ9MTA
        - name: API-Version
          in: header
          description: |
            From v3.0.1 and onward - every API request and response must contain the API-Version header, set to the full version of the implemented DCSA standard.
          schema:
            type: string
            example: '3.0.1'
      responses:
        '200':
          description: OK
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
            Next-Page-Cursor:
              schema:
                type: string
                maxLength: 1024
                example: fE9mZnNldHw9MTAmbGltaXQ9MTA
              description: |
                The Next-Page-Cursor header contains a cursor value that points to the next page of results in a paginated API response.
                When an initial `GET` endpoint request includes the query parameter `limit=...` the API provider limits the number of items in the root array of the response to the specified limit. If the response would contain more items than the specified limit, the API provider includes only the first set of limit items and appends the following response header:
                `Next-Page-Cursor=fE9mZnNldHw9MTAmbGltaXQ9MTA`, a string that acts as a reference for the next page of results. The cursor value is used in subsequent requests to retrieve the next page by passing it as a query parameter: `?cursor=fE9mZnNldHw9MTAmbGltaXQ9MTA`.

                To retrieve the next page, the API consumer sends a `GET` request to the endpoint URL with only `?cursor=fE9mZnNldHw9MTAmbGltaXQ9MTA` as query parameter. The limit of items per page and any other query parameters may not be altered, therefore it may also not be specified when requesting subsequent pages. The API provider must ignore any query parameters passed along with a cursor, and should return a `400` error if any other query parameter is passed along with the `cursor`.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceSchedule'
        '400':
          description: Bad Request
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                noUNLocationCode:
                  summary: |
                    UNLocationCode does not exist
                  value:
                    httpMethod: GET
                    requestUri: https://dcsa.org/ovs/v3/service-schedules?UNLocationCode=XX123
                    statusCode: 400
                    statusCodeText: Bad Request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors:
                    - errorCode: 7007
                      property: UNLocationCode
                      value: NA
                      errorCodeText: invalidQuery
                      erorCodeMessage: UNLocationCode does not exist
        '500':
          description: Internal Server Error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalError:
                  summary:
                    Internal Error
                  value:
                    httpMethod: GET
                    requestUri: https://dcsa.org/ovs/v3/service-schedules
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: Cannot process request.
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2019-11-12T07:41:00+08:30'
                    errors: []
components:
  schemas:
    ServiceSchedule:
      type: object
      title: Service Schedule
      description: |
        The timetable of the roundtrip sequence of ports being served by a (number of) vessel(s) on a specific Proforma (schedule). Synonyms are rotation, loop, or string. A Service is defined by rotation, transit times, weekdays of departure per port, and frequencies.
      properties:
        carrierServiceName:
          type: string
          maxLength: 50
          description: |
            The name of the service.
          example: Great Lion Service
        carrierServiceCode:
          type: string
          maxLength: 11
          description: |
            The carrier-specific code of the service for which the schedule details are published.
          example: FE1
        universalServiceReference:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          maxLength: 8
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.
          example: SR12345A
        vesselSchedules:
          type: array
          items:
            $ref: '#/components/schemas/VesselSchedule'
      required:
        - carrierServiceCode
        - carrierServiceName
    VesselSchedule:
      type: object
      title: Vessel Schedule
      description: |
        The timetable of departure and arrival times for each port call on the rotation of the vessel in question.
      properties:
        vesselOperatorSMDGLinerCode:
          type: string
          maxLength: 10
          description: |
            The carrier who is in charge of the vessel operation based on the SMDG code.
            
            If not available at the moment of sharing the schedule, use `TBD` (To be defined).
            
            In the case an operator is still using a code not from SMDG, use the available code.
          example: HLC
        vesselIMONumber:
          type: string
          pattern: ^\d{7}$
          maxLength: 7
          description: |
            The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd's register code, which does not change during the lifetime of the vessel

            **Condition:** If `isDummyVessel` is `false` - at least one of `vesselIMONumber` or `MMSINumber` **MUST** be specified in order to identify the `Vessel`. It is also acceptable to provide both properties. If `isDummyVessel` is `true` it is optional to provide this property.

            **Condition:** Please note that if the requester is on a version `3.0.0` (indicated by the `APIVersion` being blank or containing the value `3`) and it is not a dummy vessel (`isDummyVessel: false`) then this property **MUST** be present.
          example: '9321483'
        MMSINumber:
          type: string
          pattern: ^\d{9}$
          minLength: 9
          maxLength: 9
          description: |
            Maritime Mobile Service Identities (MMSIs) are nine-digit numbers used by maritime digital selective calling (DSC), automatic identification systems (AIS) and certain other equipment to uniquely identify a ship or a coast radio station.

            **Condition:** If `isDummyVessel` is `false` - at least one of `vesselIMONumber` or `MMSINumber` **MUST** be specified in order to identify the `Vessel`. It is also acceptable to provide both properties.  If `isDummyVessel` is `true` it is optional to provide this property.

            **Condition:** It is only possible to use this property in case the requester is on version `3.0.1` or later or `vesselIMONumber` is also provided. In case the requester is on version `3.0.0` (indicated by the `APIVersion` header being blank or containing the value `3`) - this property cannot be used unless `vesselIMONumber` is also present.
          example: '278111222'
        vesselName:
          type: string
          maxLength: 35
          description: |
            The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
        vesselCallSign:
          type: string
          maxLength: 10
          description: |
            A unique alphanumeric identity that belongs to the vessel and is assigned by the International Telecommunication Union (ITU). It consists of a threeletter alphanumeric prefix that indicates nationality, followed by one to four characters to identify the individual vessel. For instance, vessels registered under Denmark are assigned the prefix ranges 5PA-5QZ, OUAOZZ, and XPA-XPZ. The Call Sign changes whenever a vessel changes its flag.
          example: NCVV
        isDummyVessel:
          type: boolean
          description: |
            Is this a dummy vessel? In case no vessel has been asigned yet - this property can be set to `true` indicating that the `vesselIMONumber`/`MMSINumber` does not exist.
        transportCalls:
          type: array
          items:
            $ref: '#/components/schemas/TransportCall'
      required:
      - isDummyVessel
      - vesselOperatorSMDGLinerCode
    TransportCall:
      type: object
      title: Transport Call
      description: |
        A transportCall in the schedule. A transportCall can be either just a Port or further specified as a terminalCall.
        
        The order of the list is the sequence of the list
      properties:
        portVisitReference:
          type: string
          maxLength: 50
          description: |
            The unique reference that can be used to link different `transportCallReferences` to the same port visit. The reference is provided by the port to uniquely identify a port call
          example: NLAMS1234589
        transportCallReference:
          type: string
          maxLength: 100
          description: |
            The unique reference for a transport call. It’s the vessel operator’s responsibility to provide the Transport Call Reference, other parties are obliged to pick it up and use it. It can take the form of Port Call References as defined in OVS Definitions Document, or alternatively a reference as defined by the vessel operator.
          example: SR11111X-9321483-2107W-NLAMS-ACT-1-1
        carrierImportVoyageNumber:
          type: string
          maxLength: 50
          description: |
            The identifier of an import voyage. The carrier-specific identifier of the import Voyage.

            **Note:** In case the `carrierImportVoyageNumber` is not known, `9999R` should be interpreted as "no voyage number". The value `9999R` is reserved as a placeholder and **MUST NOT** be used for real voyage numbers.
          example: 2103N
        carrierExportVoyageNumber:
          type: string
          maxLength: 50
          description: |
            The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
          example: 2103S
        universalImportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          description: |
            A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        location:
          description: |
            General purpose object to capture location-related data, the location can be specified in **one** of the following ways: `UN Location Code`, a `Facility` or an `Address`.
          discriminator:
            propertyName: locationType
            mapping:
              UNLO: "#/components/schemas/UNLocationLocation"
              FACS: "#/components/schemas/FacilitySMDGLocation"
              ADDR: "#/components/schemas/AddressLocation"
          oneOf:
          - $ref: '#/components/schemas/UNLocationLocation'
          - $ref: '#/components/schemas/FacilitySMDGLocation'
          - $ref: '#/components/schemas/AddressLocation'
        statusCode:
          type: string
          description: |
            The set of codes in `Status Code` are ONLY meant to communicate any change / exception to the published schedule. This is not required in case of normal schedule. Possible values are:
            
            - `OMIT` (Omit)
            - `BLNK` (Blank)
            - `ADHO` (Ad Hoc)
            - `PHOT` (Phase Out)
            - `PHIN` (Phase In)
            - `SLID` (Sliding)
            - `ROTC` (Rotation Change)
            - `CUTR` (Cut and Run)

            **Deprecated:** Use `statusCodes` instead. If `statusCodes` is used - then values in this property are ignored.
          deprecated: true
          example: OMIT
        statusCodes:
          type: array
          description: |
            Possibility to add multiple status codes to a `TransportCall`.
            
            **Note:** This property takes precedence over `statusCode` (if both are present - only the ones provided in this property are used).
          items:
            type: string
            description: |
              The set of codes are ONLY meant to communicate any change / exception to the published schedule. This is not required in case of normal schedule. Possible values are:
              
              - `OMIT` (Omit)
              - `BLNK` (Blank)
              - `ADHO` (Ad Hoc)
              - `PHOT` (Phase Out)
              - `PHIN` (Phase In)
              - `SLID` (Sliding)
              - `ROTC` (Rotation Change)
              - `CUTR` (Cut and Run)
              - `DRYD` (Dry Dock)
              - `BUNK` (Bunkering)
              - `OOSV` (Out of service)
            example: OMIT
        timestamps:
          type: array
          items:
            $ref: '#/components/schemas/Timestamp'
      required:
        - carrierImportVoyageNumber
        - transportCallReference
    UNLocationLocation:
      type: object
      title: UN Location
      description: |
        An interface used to express a location using a `Un Location Code`.
      properties:
        locationName:
          type: string
          pattern: ^\S+(\s+\S+)*$
          maxLength: 100
          description: |
            The name of the location.
          example: Port of Amsterdam
        locationType:
          type: string
          maxLength: 4
          description: |
            Discriminator used to identify this as a `UNLocation` location interface.
          example: UNLO
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

             - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
             - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
      required:
      - UNLocationCode
      - locationType
    FacilitySMDGLocation:
      type: object
      title: Facility SMDG Location
      description: |
        An interface used to express a location using a `Facility` by the `SMDG` code list. The `facilitySMDGCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      properties:
        locationName:
          type: string
          maxLength: 100
          description: |
            The name of the location.
          example: Port of Amsterdam
        locationType:
          type: string
          maxLength: 4
          description: |
            Discriminator used to identify this as a `Facility Location` interface only using `SMDG` code list.
          example: FACS
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

             - 2 characters for the country code using [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
             - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://en.wikipedia.org/wiki/UN/LOCODE)
          example: NLAMS
        facilitySMDGCode:
          type: string
          maxLength: 6
          description: |
            The code used for identifying the specific facility. This code does not include the UN Location Code.

            The codeList used by SMDG is the [SMDG Terminal Code List](https://smdg.org/wp-content/uploads/Codelists/Terminals/SMDG-Terminal-Code-List-v20210401.xlsx)
          example: ACT
      required:
      - UNLocationCode
      - facilitySMDGCode
      - locationType
    AddressLocation:
      type: object
      title: Address Location
      description: |
        An interface used to express a location using an `Address` object.
      properties:
        locationName:
          type: string
          maxLength: 100
          description: |
            The name of the location.
          example: Port of Amsterdam
        locationType:
          type: string
          maxLength: 4
          description: |
            Discriminator used to identify this as an `Address` location interface.
          example: ADDR
        address:
          type: object
          description: An object for storing address related information.
          properties:
            name:
              maxLength: 100
              type: string
              description: Name of the address.
              example: John
            street:
              maxLength: 100
              type: string
              description: The name of the street of the party’s address.
              example: Ruijggoordweg
            streetNumber:
              maxLength: 50
              type: string
              description: The number of the street of the party’s address.
              example: '100'
            floor:
              maxLength: 50
              type: string
              description: The floor of the party’s street number.
              example: N/A
            postCode:
              maxLength: 50
              type: string
              description: The post code of the party’s address.
              example: 1047 HM
            city:
              maxLength: 65
              type: string
              description: The city name of the party’s address.
              example: Amsterdam
            stateRegion:
              maxLength: 65
              type: string
              description: The state/region of the party’s address.
              example: North Holland
            country:
              maxLength: 75
              type: string
              description: The country of the party’s address.
              example: The Netherlands
          required:
          - name
      required:
      - address
      - locationType
    Timestamp:
      type: object
      title: Timestamp
      description: |
        A timestamp for a port.
      properties:
        eventTypeCode:
          type: string
          description: |
            Identifier for type of `transportEvent`
            - `ARRI` (Arrived)
            - `DEPA` (Departed)
          enum:
          - ARRI
          - DEPA
          example: ARRI
        eventClassifierCode:
          type: string
          description: |
            Code for the event classifier. Values can vary depending on eventType.

            - **Actual:** The **recorded time** when the event has actually occurred.
            - **Estimated:** The updated schedule time based on the **latest regional or coastal schedule (RS/CS)**. It reflects the most up-to-date estimated time as the voyage progresses and can be updated (weekly or daily) several times after the voyage start.
            - **Planned:** The scheduled time based on the **long-term service plan** (LTS), published well in advance (typically 12-14 weeks) before the voyage begins, and showing when an event *is planned* to occur.

            More information can be found in the OVS Definitions document. Possible value codes:
            - `ACT` (Actual)
            - `EST` (Estimated)
            - `PLN` (Planned)
          enum:
          - PLN
          - EST
          - ACT
          example: EST
        eventDateTime:
          type: string
          format: date-time
          description: |
            Time in the timestamp.
          example: '2025-01-14T09:21:00+01:00'
        delayReasonCode:
          type: string
          maxLength: 3
          description: |
            Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.

            **Deprecated:** Use `delayReasonCodes` instead. If `delayReasonCodes` is used - then values in this property are ignored.
          deprecated: true
          example: WEA
        delayReasonCodes:
          type: array
          description: |
            Possibility to add multiple delay reason codes to a `Timestamp`.
            
            **Note:** This property takes precedence over `delayReasonCode` (if both are present - only the ones provided in this property are used).
          items:
            type: string
            maxLength: 3
            description: |
              Reason code for the delay. See SMDG [Code list DELAY](https://smdg.org/documents/smdg-code-lists/delay-reason-and-port-call-activity/) for a list of valid codes to be used for this attribute.
            example: WEA
        changeRemark:
          type: string
          maxLength: 250
          description: |
            Free text field to provide information as to why the `TransportEvent` was sent.
          example: Bad weather
      required:
      - eventClassifierCode
      - eventDateTime
      - eventTypeCode
    ErrorResponse:
      type: object
      title: Error Response
      description: |
        Unexpected error
      properties:
        httpMethod:
          type: string
          description: |
            The HTTP method used to make the request e.g. `GET`, `POST`, etc
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - DELETE
          - OPTION
          - PATCH
          example: POST
        requestUri:
          type: string
          description: |
            The URI that was requested.
          example: /v1/events
        statusCode:
          type: integer
          format: int32
          description: |
            The HTTP status code returned.
          example: 400
        statusCodeText:
          type: string
          maxLength: 50
          description: |
            A standard short description corresponding to the HTTP status code.
          example: Bad Request
        statusCodeMessage:
          type: string
          maxLength: 200
          description: |
            A long description corresponding to the HTTP status code with additional information.
          example: The supplied data could not be accepted
        providerCorrelationReference:
          type: string
          maxLength: 100
          description: |
            A unique identifier to the HTTP request within the scope of the API provider.
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          type: string
          description: |
            The DateTime corresponding to the error occuring.
          format: date-time
          example: 2019-11-12T07:41:00+08:30
        errors:
          type: array
          description: |
            An array of errors provding more detail about the root cause.
          items:
            $ref: "#/components/schemas/DetailedError"
      required:
      - httpMethod
      - requestUri
      - statusCode
      - statusCodeText
      - errorDateTime
      - errors
    DetailedError:
      type: object
      title: Detailed Error
      description: |
        A detailed object used to describe the error.
      properties:
        errorCode:
          maximum: 9999
          minimum: 7000
          type: integer
          description: "The detailed error code returned.\n\n  - `7000-7999` Technical error codes\n  - `8000-8999` Functional error codes\n  - `9000-9999` API provider-specific error codes            \n\n[Error codes as specified by DCSA](https://dcsa.atlassian.net/wiki/spaces/DTG/pages/197132308/Standard+Error+Codes).\n"
          format: int32
          example: 7003
        property:
          maxLength: 100
          type: string
          description: |
            The name of the property causing the error.
          example: facilityCode
        value:
          maxLength: 500
          type: string
          description: |
            The value of the property causing the error serialised as a string exactly as in the original request.
          example: SG SIN WHS
        jsonPath:
          maxLength: 500
          type: string
          description: |
            A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
          example: $.location.facilityCode
        errorCodeText:
          maxLength: 100
          type: string
          description: |
            A standard short description corresponding to the `errorCode`.
          example: invalidData
        erorCodeMessage:
          maxLength: 200
          type: string
          description: |
            A long description corresponding to the `errorCode` with additional information.
          example: Spaces not allowed in facility code
      required:
      - errorCodeText
  headers:
    API-Version:
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
      schema:
        type: string
        example: 3.0.0
