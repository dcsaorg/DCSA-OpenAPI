openapi: 3.0.3
servers:
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/dcsaorg/DCSA_BKG/2.0.0'
info:
  version: 2.0.1
  title: DCSA Booking API
  description: |
    <h1>DCSA OpenAPI specification for the Booking process</h1>

    This API is intended as an API between a carrier and anyone creating a `Booking`. The process includes:

    - Booking request
    - Booking update
    - Booking confirmation
    - Booking amendment
    - Booking cancellation
    - Booking rejection

    For explanation of specific values or objects please refer to the [Information Model](https://developer.dcsa.org/documentation/information_models). This API specification does not define the allowable updates and their timing in accordance with the established business rules. **All use cases mentioned in this API specification refer to use cases defined in [DCSA Interface Standard for the Booking process 2.0](https://dcsa.org/standards/booking/documentation-booking-2)**.

    All other documents related to the Booking publication can be found [here](https://dcsa.org/standards/booking-process/)

    ### Booking (Implemented by provider)

    It is possible to use the Booking API as a standalone API. In that case poll on the following endPoints:

        GET /v2/bookings/{bookingReference}

    in order to poll information about status changes.

    **Note:** All `/v2/bookings` endPoints must be implemented by the provider.

    ### Notifications (Implemented by consumer)
    It is possible to have notifications pushed to you whenever the provider needs input and/or a state change. The format of the notification is defined by the [Booking Notification endPoint](#/BookingNotification).

        POST /v2/booking-notifications

    The endPoints support both a **Lightweight Notification** and a **Full State Transfer**. How much data is sent via this Notification endPoint depends on what kind of Notification is being subscribed to.

    Signing up for notifications is defined outside the scope of this API specification.

    **Note:** This endPoint is to be implemented by the consumers of the `Booking API` in order to receive push events.

    ### API Design & Implementation Principles
    This API follows the guidelines defined in version 2.0 of the API Design & Implementation Principles which can be found on the [DCSA Developer Portal](https://developer.dcsa.org/api_design)

    ### Changelog and GitHub
    For a changelog please click [here](https://github.com/dcsaorg/DCSA-OpenAPI/tree/master/bkg/v2#v200). If you have any questions, feel free to [Contact Us](https://dcsa.org/get-involved/contact-us).

    API specification issued by [DCSA.org](https://dcsa.org/).
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
  contact:
    name: Digital Container Shipping Association (DCSA)
    url: 'https://dcsa.org'
    email: info@dcsa.org
security: []
tags:
  - name: Booking
    description: Booking endPoints to be implemented by **providers** of the Booking API
  - name: Notifications
    description: Notifications to be implemented by the **consumers** of the Booking API
paths:
  /v2/bookings:
    post:
      tags:
        - Booking
      summary: |
        Creates a new Booking
      operationId: create-bookings
      parameters:
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |
        Creates a new booking request. This endPoint corresponds with **UseCase 1 - Submit booking request**.

        ## Precondition
        The consumer has information for a `Booking Request`

        ## Postcondition
        The provider has received the `Booking Request`. 

        The consumer will receive a `202` (Accepted) if the request payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow for the `202` (Accepted) response
        The following occurs when a provider receives a `Booking Request`:

        1. The payload (`Booking Request`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**
        2. The payload is schema-valid which means
            - all required properties are provided
            - all values provided have correct data type.

            A `carrierBookingRequestReference` (as a reference to the `Booking Request`) is created and linked to the payload in the provider system.
        
            **For the rest of this description and in all examples the value `cbrr-123` will be used as `carrierBookingRequestReference`**

        3. A `202` (Accepted) response is returned with a payload containing **only** the `carrierBookingRequestReference`:
            ```
            {
              carrierBookingRequestReference: 'cbrr-123'
            }
            ```

        For `POST` `Booking Request` the process ends here. The `Booking Request`:
          - is now accepted by the provider system
          - the `Booking Request` does not yet have any status and cannot be queried (no `GET` request is possible until the `Booking Request` is further processed in the provider system)
          - a `202` (Accepted) response is sent to the consumer with a payload **only** containing the `carrierBookingRequestReference`
          - awaits further processing by the provider

        The provider will now start asynchronous processing. Once processed, the status `RECEIVED` of the `Booking Request` will be communicated via a [Booking Notification](#/BookingNotification). In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the

            GET /v2/bookings/{bookingReference}
        
        endPoint to check if the `bookingStatus` of the `Booking Request` has changed.
        
        After the status has changed to `RECEIVED` further processing can continue by provider and will be communicated via a [Booking Notification](#/BookingNotification). In case the consumer does not subscribe to notifications it is necessary for the consumer to poll the above endPoint.
      requestBody:
        description: The payload used to create a `Booking Request`
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBooking'
            examples:
              dryExample:
                summary: |
                  Standard dry cargo Booking
                description: |
                  Make a `Booking Request` with standard Dry cargo being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTerm:
                    haulageChargesPaymentTermCode: PRE
                    portChargesPaymentTermCode: PRE
                  destinationChargesPaymentTerm:
                    haulageChargesPaymentTermCode: COL
                    portChargesPaymentTermCode: PRE
                    otherChargesPaymentTermCode: PRE
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: CR
                      value: KN-00103004
                  documentParties:
                    bookingAgent:
                      partyName: KN Bremerhaven
                      address:
                        street: Amerikaring
                        streetNumber: '40'
                        postCode: '27568'
                        city: Bremerhaven
                        countryCode: DE
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 42G1
                      units: 3
                      commodities:
                        - commodityType: 'Dry cargo, Freight all kinds'
                          cargoGrossWeight:
                            value: 36000
                            unit: KGM
              reeferExample:
                summary: |
                  Reefer cargo Booking (Apple Juice)
                description: |
                  Make a `Booking Request` with reefer requirements (1Â° celsius with vents and drain holes open and genset required) sent from Bremerhaven, Germany to Norfolk, US
                value:
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTerm:
                    haulageChargesPaymentTermCode: PRE
                    portChargesPaymentTermCode: PRE
                    otherChargesPaymentTermCode: PRE
                  destinationChargesPaymentTerm:
                    haulageChargesPaymentTermCode: COL
                    portChargesPaymentTermCode: PRE
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: CR
                      value: KN-00103004
                  documentParties:
                    bookingAgent:
                      partyName: KN Bremerhaven
                      address:
                        street: Amerikaring
                        streetNumber: '40'
                        postCode: '27568'
                        city: Bremerhaven
                        countryCode: DE
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 45R1
                      units: 3
                      isNonOperatingReefer: false
                      activeReeferSettings:
                        temperatureSetpoint: 1
                        temperatureUnit: CEL
                        isVentilationOpen: true
                        isDrainholesOpen: false
                        isGeneratorSetRequired: true
                      commodities:
                        - commodityType: Apple juice
                          HSCodes:
                            - '20097919'
                          cargoGrossWeight:
                            value: 36000
                            unit: KGM
              norExample:
                summary: |
                  Standard dry cargo Booking using a Reefer Container
                description: |
                  Make a `Booking Request` with standard Dry cargo using a reefer container being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTerm:
                    haulageChargesPaymentTermCode: PRE
                    portChargesPaymentTermCode: PRE
                    otherChargesPaymentTermCode: PRE
                  destinationChargesPaymentTerm:
                    haulageChargesPaymentTermCode: COL
                    portChargesPaymentTermCode: PRE
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: CR
                      value: KN-00103004
                  documentParties:
                    bookingAgent:
                      partyName: KN Bremerhaven
                      address:
                        street: Amerikaring
                        streetNumber: '40'
                        postCode: '27568'
                        city: Bremerhaven
                        countryCode: DE
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 45R1
                      isNonOperatingReefer: true
                      units: 3
                      commodities:
                        - commodityType: 'Dry cargo, Freight all kinds'
                          cargoGrossWeight:
                            value: 36000
                            unit: KGM
              dgExample:
                summary: |
                  Dangerous Goods (DG) cargo Booking
                description: |
                  Make a `Booking Request` with DG cargo (*Environmentally hazardous substance, liquid, N.O.S (Propiconazole)*) being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTerm:
                    haulageChargesPaymentTermCode: PRE
                    portChargesPaymentTermCode: PRE
                  destinationChargesPaymentTerm:
                    haulageChargesPaymentTermCode: COL
                    portChargesPaymentTermCode: PRE
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: CR
                      value: KN-00103004
                  documentParties:
                    bookingAgent:
                      partyName: KN Bremerhaven
                      address:
                        street: Amerikaring
                        streetNumber: '40'
                        postCode: '27568'
                        city: Bremerhaven
                        countryCode: DE
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 42G1
                      units: 3
                      commodities:
                        - commodityType: 'Environmentally hazardous substance, liquid, N.O.S (Propiconazole)'
                          HSCodes:
                            - '293499'
                          cargoGrossWeight:
                            value: 36000
                            unit: KGM
                          outerPackaging:
                            imoPackagingCode: 3A1
                            numberOfPackages: 100
                            description: 'Jerrican, steel'
                            dangerousGoods:
                              - UNNumber: '3082'
                                properShippingName: |
                                  Environmentally hazardous substance, liquid, N.O.S
                                imoClass: '9'
                                isMarinePollutant: false
                                packingGroup: 3
                                isLimitedQuantity: false
                                isExceptedQuantity: false
                                isSalvagePackings: false
                                isEmptyUncleanedResidue: false
                                isWaste: false
                                isHot: false
                                isCompetentAuthorityApprovalRequired: false
                                emergencyContactDetails:
                                  contact: John Doe
                                  phone: +1 123062970
                                EMSNumber: F-A S-F
                                isReportableQuantity: false
                                grossWeight:
                                  value: 12000
                                  unit: KGM
      responses:
        '202':
          description: |
            `Booking Request` has been successfully accepted by the provider. The `Booking Request` does not yet have a `bookingStatus` - it is not possible to call the `GET` endPoint until the `Booking Request` is further processed in provider system. The consumer is now awaiting provider to process the `Booking Request` asynchronously.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBookingResponse'
              examples:
                acceptedExample:
                  summary: |
                    Booking request accepted
                  description: |
                    A `Booking Request` has been accepted (no `bookingStatus`) and schema validated by provider
                  value:
                    carrierBookingRequestReference: cbrr-123
        '400':
          description: |
            In case the `Booking Request` does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Booking missing receiptTypeAtOrigin
                  description: |
                    `receiptTypeAtOrigin` is a mandatory property in the `Booking Request`. This is an example of how the error object would look in case this property is missing

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: |
                      receiptTypeAtOrigin not found - it is a mandatory property in Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: receiptTypeAtOrigin
                        errorCodeText: mandatory property missing
                        errorCodeMessage: |
                          receiptTypeAtOrigin must be provided as part of a Booking request
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking Request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: |
                      Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Bookings Requests
                  description: |
                    Calling the endPoint

                        POST /v2/bookings

                    too many times within a time period.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/bookings
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: |
                      Too many request to create a booking has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Booking requests reached
                        errorCodeMessage: A maximum of 10 Bookings can be created per hour
  '/v2/bookings/{bookingReference}':
    put:
      tags:
        - Booking
      summary: |
        Updates the Booking
      operationId: update-bookings
      parameters:
        - $ref: '#/components/parameters/bookingReferencePathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      description: |
        Updates the `Booking Request` with the `bookingReference`. The path can contain one of `carrierBookingRequestReference` or `carrierBookingReference`. Once a Booking has been `CONFIRMED` the `carrierBookingReference` **MUST** always be used. This endPoint corresponds with one of
        - **UseCase 3 - Submit updated Booking request**
        - **UseCase 7 - Request amendments to confirmed Booking**

        This endPoint is to be used in response to
        - **UseCase 2 - Request to update Booking request**
        - **UseCase 6 - Request to amend confirmed Booking**

        the endPoint can also be used in case `bookingStatus='RECEIVED'` and the consumer has an update to the `Booking Request`.

        ## Precondition
        In order to update a `Booking Request`, the status of the `Booking Request` needs to be in state
        - `RECEIVED` in case the consumer has updated information for the `Booking Request`
        - `PENDING_UPDATE` in case the provider has requested the consumer to update the `Booking Request` (a result of **UseCase 2 - Request to update Booking request**)
        - `UPDATE_RECEIVED` in case the consumer has additional changes to an already sent update
        - `PENDING_AMENDMENT` in case the provider has requested the consumer to amend the `Booking Request` (a result of **UseCase 6 - Request to amend confirmed Booking**)
        - `CONFIRMED` in case the consumer has an amendment to the `Booking Request`

        ## Postcondition
        The provider has received an update (**UseCase 3 - Submit updated Booking request**) or an amendment (**UseCase 7 - Request amendments to confirmed Booking**) to the `Booking Request`.

        In case an amendment was received to the `Booking Request` (**UseCase 7 - Request to amend confirmed Booking**) - the amendment will be called `Amended Booking`. The `Amended Booking` and the "original" `Booking Request` will **co-exist** until a new amendment is submitted by the consumer (via **UseCase 7: Request amendments to confirmed Booking**) or until the provider requests an update (sets the `bookingStatus='PENDING_AMENDMENT'` via **UseCase 6: Request to amend confirmed Booking**). If the `amendedBookingStatus` is present it always represents the latest version of an amendment received by the provider.

        The consumer will receive a `202` (Accepted) if the payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow for the `202` (Accepted) response
        The following occurs when a provider receives an **update** (or an **amendment**) to a `Booking Request`
        1. The payload (`Booking Request`) is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**
        2. The payload is schema-valid which means
           - all required properties are provided
           - all values provided have correct data type
        3. An empty response along with `202` (Accepted) is returned and the consumer now awaits further processing by the provider.

        For `PUT` `Booking Request` the process ends here. The Booking Request:
          - is now accepted by the provider system
          - the status of the `Booking Request` is unchanged.
          - a `202` (Accepted) response is sent with an empty payload
          - awaits further processing by the provider
        
        The provider will now start asynchronous processing. Once processed, the state will change to one of the following values depending on the use case for calling the `PUT` endPoint:
          - `UPDATE_RECEIVED` in case this endPoint has been used to:
            - send an update to a newly created Booking (precondition: `bookingStatus='RECEIVED'`)
            - send an update to a Booking because of a request from provider via **UseCase 2 - Request to update Booking request** (precondition: `bookingStatus='PENDING_UPDATE'`)
            - send an additional update to a Booking that has already received an update  (precondition: `bookingStatus='UPDATE_RECEIVED'`)
          - `bookingStatus` will stay as `PENDING_AMENDMENT` but `amendedBookingStatus` will change to `AMENDMENT_RECEIVED` in case this endPoint is being used in response to a request from provider via **UseCase 6 - Request to amend Confirmed Booking** (precondition: `bookingStatus='PENDING_AMENDMENT'`)
          - `bookingStatus` will stay as `CONFIRMED` but `amendedBookingStatus` will change to `AMENDMENT_RECEIVED` in case this endPoint is being used to update an already confirmed Booking via  **UseCase 7 - Request Amendments to Confirmed Booking** (precondition: `bookingStatus='CONFIRMED'`)

        Once processed, the new state will be communicated via a [Booking Notification](#/BookingNotification). In case the consumer does not subscribe to notifications it is necessary for the consumer to poll on the 

            GET /v2/bookings/{bookingReference}
        
        endPoint to check if the `bookingStatus` and `amendedBookingStatus` of the `Booking` has changed.

        If the consumer wants to get the content of the `Amended Booking` provided via this `PUT` endPoint, the `GET` endPoint needs to be used in combination with the `?amendedContent=true` queryParameter:

            GET /v2/bookings/{bookingReference}?amendedContent=true

        It is possible to `GET` the content of the `Amended Booking` via the example above until one of:

        - the provider requests for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the "old update" is no longer accessible
        - the consumer submits a new update (**UseCase 7: Request amendment to confirmed Booking**) in which case the "new amendment" provided **replaces** the "old amendment".
        - the provider re-confirms the `Booking` (**UseCase 5: Confirm booking request**) in which case the "old update" is no longer accessible.
      requestBody:
        description: |
          Parameters used to update the `Booking request`
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBooking'
            examples:
              dryExample:
                summary: |
                  Standard dry cargo Booking
                description: |
                  Updating a `Booking Request` with standard Dry cargo being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  carrierBookingRequestReference: cbrr-123
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTerm:
                    haulageChargesPaymentTermCode: PRE
                    portChargesPaymentTermCode: PRE
                  destinationChargesPaymentTerm:
                    haulageChargesPaymentTermCode: COL
                    portChargesPaymentTermCode: PRE
                    otherChargesPaymentTermCode: PRE
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: CR
                      value: KN-00103004
                  documentParties:
                    bookingAgent:
                      partyName: KN Bremerhaven
                      address:
                        street: Amerikaring
                        streetNumber: '40'
                        postCode: '27568'
                        city: Bremerhaven
                        countryCode: DE
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 42G1
                      units: 3
                      commodities:
                        - commodityType: 'Dry cargo, Freight all kinds'
                          cargoGrossWeight:
                            value: 36000
                            unit: KGM
              reeferExample:
                summary: |
                  Reefer cargo Booking (Apple Juice)
                description: |
                  Updating a `Booking Request` with reefer requirements (2Â° celsius with vents and drain holes open and genset required) sent from Bremerhaven, Germany to Norfolk, US
                value:
                  carrierBookingRequestReference: cbrr-123
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTerm:
                    haulageChargesPaymentTermCode: PRE
                    portChargesPaymentTermCode: PRE
                    otherChargesPaymentTermCode: PRE
                  destinationChargesPaymentTerm:
                    haulageChargesPaymentTermCode: COL
                    portChargesPaymentTermCode: PRE
                    otherChargesPaymentTermCode: PRE
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: CR
                      value: KN-00103004
                  documentParties:
                    bookingAgent:
                      partyName: KN Bremerhaven
                      address:
                        street: Amerikaring
                        streetNumber: '40'
                        postCode: '27568'
                        city: Bremerhaven
                        countryCode: DE
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 45R1
                      units: 3
                      isNonOperatingReefer: false
                      activeReeferSettings:
                        temperatureSetpoint: 2
                        temperatureUnit: CEL
                        isVentilationOpen: true
                        isDrainholesOpen: false
                        isGeneratorSetRequired: true
                      commodities:
                        - commodityType: Apple juice
                          HSCodes:
                            - '20097919'
                          cargoGrossWeight:
                            value: 36000
                            unit: KGM
              norExample:
                summary: |
                  Standard dry cargo Booking using a Reefer Container
                description: |
                  Update a `Booking Request` with standard Dry cargo using a reefer container being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  carrierBookingRequestReference: cbrr-123
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTerm:
                    haulageChargesPaymentTermCode: PRE
                    portChargesPaymentTermCode: PRE
                  destinationChargesPaymentTerm:
                    haulageChargesPaymentTermCode: COL
                    portChargesPaymentTermCode: PRE
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: CR
                      value: KN-00103004
                  documentParties:
                    bookingAgent:
                      partyName: KN Bremerhaven
                      address:
                        street: Amerikaring
                        streetNumber: '40'
                        postCode: '27568'
                        city: Bremerhaven
                        countryCode: DE
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 45R1
                      isNonOperatingReefer: true
                      units: 3
                      commodities:
                        - commodityType: 'Dry cargo, Freight all kinds'
                          cargoGrossWeight:
                            value: 36000
                            unit: KGM
              dgExample:
                summary: |
                  Dangerous Goods (DG) cargo Booking
                description: |
                  Update a `Confirmed Booking` (a `Booking` with `carrierBookingReference='cbr-987'`) with DG cargo (*Environmentally hazardous substance, liquid, N.O.S (Propiconazole)*) being sent from Bremerhaven, Germany to Norfolk, US
                value:
                  carrierBookingRequestReference: cbrr-123
                  carrierBookingReference: cbr-987
                  receiptTypeAtOrigin: CY
                  deliveryTypeAtDestination: CY
                  cargoMovementTypeAtOrigin: FCL
                  cargoMovementTypeAtDestination: FCL
                  serviceContractReference: HHL51800000
                  freightPaymentTermCode: PRE
                  originChargesPaymentTerm:
                    haulageChargesPaymentTermCode: PRE
                    portChargesPaymentTermCode: PRE
                    otherChargesPaymentTermCode: PRE
                  destinationChargesPaymentTerm:
                    haulageChargesPaymentTermCode: COL
                    portChargesPaymentTermCode: PRE
                  contractQuotationReference: HHL1401
                  vessel:
                    name: MAERSK IOWA
                    vesselIMONumber: '9298686'
                  carrierServiceCode: TA1
                  carrierExportVoyageNumber: 403W
                  isPartialLoadAllowed: false
                  isExportDeclarationRequired: false
                  expectedDepartureDate: '2024-01-20'
                  incoTerms: EXW
                  isEquipmentSubstitutionAllowed: false
                  references:
                    - type: CR
                      value: KN-00103004
                  documentParties:
                    bookingAgent:
                      partyName: KN Bremerhaven
                      address:
                        street: Amerikaring
                        streetNumber: '40'
                        postCode: '27568'
                        city: Bremerhaven
                        countryCode: DE
                      partyContactDetails:
                        - name: Export operations department
                          phone: +49 471 945410
                  partyContactDetails:
                    - name: Diane
                      phone: +49 471 945410
                  shipmentLocations:
                    - location:
                        locationName: Bremerhaven
                        UNLocationCode: DEBRV
                      locationTypeCode: POL
                    - location:
                        locationName: Norfolk
                        UNLocationCode: USORF
                      locationTypeCode: POD
                  requestedEquipments:
                    - isShipperOwned: false
                      ISOEquipmentCode: 42G1
                      units: 3
                      commodities:
                        - commodityType: 'Environmentally hazardous substance, liquid, N.O.S (Propiconazole)'
                          HSCodes:
                            - '293499'
                          cargoGrossWeight:
                            value: 36000
                            unit: KGM
                          outerPackaging:
                            imoPackagingCode: 3A1
                            numberOfPackages: 100
                            description: 'Jerrican, steel'
                            dangerousGoods:
                              - UNNumber: '3082'
                                properShippingName: |
                                  Environmentally hazardous substance, liquid, N.O.S
                                imoClass: '9'
                                isMarinePollutant: false
                                packingGroup: 3
                                isLimitedQuantity: false
                                isExceptedQuantity: false
                                isSalvagePackings: false
                                isEmptyUncleanedResidue: false
                                isWaste: false
                                isHot: false
                                isCompetentAuthorityApprovalRequired: false
                                emergencyContactDetails:
                                  contact: John Doe
                                  phone: +1 123062970
                                EMSNumber: F-A S-F
                                isReportableQuantity: false
                                grossWeight:
                                  value: 12000
                                  unit: KGM
      responses:
        '202':
          description: |
            The `Booking request` update has been successfully accepted by the provider. `bookingStatus` does not change and response payload is empty. Further processing will be done by provider.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              examples:
                noContentExample:
                  summary: |
                    Booking request updated with no content
                  description: |
                    An updated `Booking request` received, schema validated and accepted by provider - the `Booking` now awaits provider action, `bookingStatus` does not change.
                  value: null
        '400':
          description: |
            In case the updated/amended `Booking request` does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Booking missing receiptTypeAtOrigin
                  description: |
                    `receiptTypeAtOrigin` is a mandatory property in the `Booking request`. This is an example of how the error object would look in case this property is missing.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: |
                      receiptTypeAtOrigin not found - it is a mandatory property in Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: receiptTypeAtOrigin
                        errorCodeText: mandatory property missing
                        errorCodeMessage: |
                          receiptTypeAtOrigin must be provided as part of a Booking request
        '404':
          description: |
            In case the provider does not know of the `bookingReference` used in the request (this could be because of a `POST` request that has not finished processing or simply because the resource does not exist) - it is possible for the provider to reject the requests by returning a `404` (Not Found).
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `bookingReference` cannot be found. This can be because a `Post` request has not been finished processing or because the `bookingReference` does not exist in the provider system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: |
                      bookingReference not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: bookingReference Not Found
                        errorCodeMessage: |
                          The Booking does not exist
        '409':
          description: |
            In case the provider is processing the `Booking request` - it is possible for the provider to reject new incoming requests by returning a `409` (Conflict)
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictExample:
                  summary: |
                    Conflicting request
                  description: |
                    The provider is already processing a request and needs to finish this process before any new requests are processed

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 409
                    statusCodeText: Conflict
                    statusCodeMessage: |
                      Previous request is being processed. Please try again
                      later
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Conflicting request is being processed
                        errorCodeMessage: |
                          The Booking cannot be updated/amended while it is being processed. Please try again later
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: |
                      Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Updating too many Bookings requests
                  description: |
                    Calling the endPoint
                    
                        GET /v2/bookings/cbrr-123
                    
                    too many times within a time period.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PUT
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: |
                      Too many request to update a booking has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Booking requests reached
                        errorCodeMessage: A maximum of 10 Bookings can be updated per hour
    get:
      tags:
        - Booking
      summary: |
        Gets the Booking
      operationId: get-bookings
      description: |
        Retrieves the `Booking Request` with the `bookingReference`. The path can contain a `carrierBookingRequestReference` or a `carrierBookingReference`. Once the Booking is confirmed - it is **only** possible to use the `carrierBookingReference`. It is recommended to use this endPoint to `GET` data before an update is made to make sure latest version is being updated.

        The default payload when calling this endPoint is the "original" `Booking`. It is also possible to get the latest amendment to a `Booking` called the `Amended Booking`. In order to get the `Amended Booking`, it is necessary to use the query parameter `amendedContent` and set it to `true`.

            GET /v2/bookings/{bookingReference}?amendedContent=true

        The `status` of the "original" `Booking` is included in both payloads as `bookingStatus`. `amendedBookingStatus` and related content is only available after the provider has approved the `Booking` via **UseCase 5: Confirm Booking request** and until:
        - the provider requests for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the "old update" is no longer accessible.
        - the consumer submits a new amendment (**UseCase 7: Request amendment to confirmed Booking**) in which case the "new update" provided **replaces** the "old update".
        - the provider re-confirms the `Booking` (**UseCase 5: Confirm booking request**) in which case the "old update" is no longer accessible.

        If `amendedContent=true` is requested but no amendment has yet been provided by the consumer **or** the state of the "original" `Booking` is `PENDING_AMENDMENT`, then a `404` (Not Found) is returned.

        If the provider is requesting changes to the `Booking`, the `Feedback` object is used to inform the consumer what needs to change.

        In case no subscription (`Notification`) has been set up - it is possible to use this endPoint to poll on in order to detect if `bookingStatus` and/or `amendedBookingStatus` has changed.

        In case a previous request is being processed by the provider - a `202` (Accepted) with **no payload** can be used as a response until the processing is finished.
      parameters:
        - $ref: '#/components/parameters/bookingReferencePathParam'
        - $ref: '#/components/parameters/amendedContent'
        - $ref: '#/components/parameters/Api-Version-Major'
      responses:
        '200':
          description: Request successful
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
              examples:
                dryNotConfirmedExample:
                  summary: |
                    Standard dry cargo Booking (not confirmed)
                  description: |
                    Gets a `Booking Request` with standard Dry cargo which has not yet been confirmed. The `Booking` is in state `PENDING_UPDATE` and requires some changes (specified in the `feedbacks` property)
                  value:
                    carrierBookingRequestReference: cbrr-123
                    bookingStatus: PENDING_UPDATE
                    receiptTypeAtOrigin: CY
                    deliveryTypeAtDestination: CY
                    cargoMovementTypeAtOrigin: FCL
                    cargoMovementTypeAtDestination: FCL
                    serviceContractReference: HHL51800000
                    freightPaymentTermCode: PRE
                    originChargesPaymentTerm:
                      haulageChargesPaymentTermCode: PRE
                      portChargesPaymentTermCode: PRE
                    destinationChargesPaymentTerm:
                      haulageChargesPaymentTermCode: COL
                      portChargesPaymentTermCode: PRE
                      otherChargesPaymentTermCode: PRE
                    contractQuotationReference: HHL1401
                    vessel:
                      name: MAERSK IOWA
                      vesselIMONumber: '9298686'
                    carrierServiceCode: TA1
                    carrierExportVoyageNumber: 403W
                    isPartialLoadAllowed: false
                    isExportDeclarationRequired: false
                    expectedDepartureDate: '2024-01-20'
                    incoTerms: EXW
                    isEquipmentSubstitutionAllowed: false
                    references:
                      - type: CR
                        value: KN-00103004
                    documentParties:
                      bookingAgent:
                        partyName: KN Bremerhaven
                        address:
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          countryCode: DE
                        partyContactDetails:
                          - name: Export operations department
                            phone: +49 471 945410
                    partyContactDetails:
                      - name: Diane
                        phone: +49 471 945410
                    shipmentLocations:
                      - location:
                          locationName: Bremerhaven
                          UNLocationCode: DEBRV
                        locationTypeCode: POL
                      - location:
                          locationName: Norfolk
                          UNLocationCode: USORF
                        locationTypeCode: POD
                    requestedEquipments:
                      - isShipperOwned: false
                        ISOEquipmentCode: 42G1
                        units: 3
                        commodities:
                          - commodityType: 'Dry cargo, Freight all kinds'
                            cargoGrossWeight:
                              value: 36000
                              unit: KGM
                    feedbacks:
                      - severity: ERROR
                        code: PROPERTY_VALUE_MUST_CHANGE
                        message: |
                          Not enough available "42G1" equipment. Please change to "22G1" instead
                        jsonPath: $.requestedEquipment.units
                        property: 'units'
                dryConfirmedExample:
                  summary: |
                    Gets a confirmed Standard dry cargo Booking
                  description: |
                    Gets a `Confirmed Booking` with standard Dry cargo. In this example the `Booking` has previously received an amendment which was confirmed (`amendedBookingStatus='AMENDMENT_CONFIRMED'`)

                    As part of the confirmation the `Booking` is enriched with a `transportPlan`, `shipmentCutOffTimes`, `carrierClauses` and in this example also an `advanceManifestFiling` since the `Booking` is arriving in US.
                  value:
                    carrierBookingRequestReference: cbrr-123
                    carrierBookingReference: cbr-987
                    bookingStatus: CONFIRMED
                    amendedBookingStatus: AMENDMENT_CONFIRMED
                    receiptTypeAtOrigin: CY
                    deliveryTypeAtDestination: CY
                    cargoMovementTypeAtOrigin: FCL
                    cargoMovementTypeAtDestination: FCL
                    serviceContractReference: HHL51800000
                    freightPaymentTermCode: PRE
                    originChargesPaymentTerm:
                      haulageChargesPaymentTermCode: PRE
                      portChargesPaymentTermCode: PRE
                      otherChargesPaymentTermCode: COL
                    destinationChargesPaymentTerm:
                      haulageChargesPaymentTermCode: COL
                      portChargesPaymentTermCode: PRE
                      otherChargesPaymentTermCode: COL
                    contractQuotationReference: HHL1401
                    vessel:
                      name: MAERSK IOWA
                      vesselIMONumber: '9298686'
                    carrierServiceCode: TA1
                    carrierExportVoyageNumber: 403W
                    isPartialLoadAllowed: false
                    isExportDeclarationRequired: false
                    expectedDepartureDate: '2024-01-20'
                    incoTerms: EXW
                    isEquipmentSubstitutionAllowed: false
                    references:
                      - type: CR
                        value: KN-00103004
                    documentParties:
                      bookingAgent:
                        partyName: KN Bremerhaven
                        address:
                          street: Amerikaring
                          streetNumber: '40'
                          postCode: '27568'
                          city: Bremerhaven
                          countryCode: DE
                        partyContactDetails:
                          - name: Export operations department
                            phone: +49 471 945410
                    partyContactDetails:
                      - name: Diane
                        phone: +49 471 945410
                    shipmentLocations:
                      - location:
                          locationName: Bremerhaven
                          UNLocationCode: DEBRV
                        locationTypeCode: POL
                      - location:
                          locationName: Norfolk
                          UNLocationCode: USORF
                        locationTypeCode: POD
                    requestedEquipments:
                      - isShipperOwned: false
                        ISOEquipmentCode: 42G1
                        units: 3
                        commodities:
                          - commodityType: 'Dry cargo, Freight all kinds'
                            cargoGrossWeight:
                              value: 36000
                              unit: KGM
                    confirmedEquipments:
                      - ISOEquipmentCode: 42G1
                        units: 3
                    transportPlan:
                      - transportPlanStage: MNC
                        transportPlanStageSequenceNumber: 1
                        loadLocation:
                          locationName: Bremerhaven
                          UNLocationCode: DEBRV
                        dischargeLocation:
                          locationName: Norfolk
                          UNLocationCode: USORF
                        plannedDepartureDate: '2024-01-20'
                        plannedArrivalDate: '2024-01-31'
                        modeOfTransport: VESSEL
                        vesselName: MAERSK IOWA
                        vesselIMONumber: '9298686'
                        carrierServiceCode: TA1
                        carrierExportVoyageNumber: 403W
                    shipmentCutOffTimes:
                      - cutOffDateTimeCode: DCO
                        cutOffDateTime: '2024-01-17T22:30:00Z'
                      - cutOffDateTimeCode: VCO
                        cutOffDateTime: '2024-01-18T22:30:00Z'
                      - cutOffDateTimeCode: FCO
                        cutOffDateTime: '2024-01-19T13:30:00Z'
                    advanceManifestFilings:
                      - manifestTypeCode: ACE
                        countryCode: US
                    carrierClauses:
                      - The date of shipment, the carrying vessel and the schedule are not guaranteed and are always subject to changes.
                      - 'Operations such as lifting, stowage, drayage and customs declaration of containers are based on the description of the nature, quantity, measurement and weight declared by the Shipper. The Shipper shall be liable for any damage, loss, expense and fines incurred by Carrier XYZ or its agents due to incorrectness or incompleteness of such declaration.'
                      - 'Warranted shipper must fulfill the requirements of SOLAS regulations and the IMO guidelines regarding the Verified Gross Mass (VGM) of container carrying cargo (msc.1/circ.1474, 9 June 2014).'
                      - 'In accordance with SOLAS regulations and IMO guidelines regarding the VGM (verified gross mass), any expenses incurred because the VGM was submitted late or was not submitted at all will be charged back to the customer with an additional administration fee.'
        '202':
          description: |
            The `Booking` is currently being processed by the provider. No payload is returned. A new `GET` request has to be made periodically to check if the provider has finished processing the `Booking`.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '404':
          description: |
            In case the consumer is requesting the `Amended Booking` by calling:

                GET /v2/bookings/{bookingReference}?amendedContent=true
            
            but:
            - the `Booking` has not yet been confirmed
            - the `Booking` has been confirmed but no amendment has yet been provided by the consumer
            - the provider has requested for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the "old update" is no longer accessible.

            a `404` (Not Found) is returned.

            A `404` (Not Found) can also be sent in case the provider does not know of the `bookingReference` used in the request (the resource does not exist)
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `bookingReference` cannot be found. The `bookingReference` does not exist in the provider system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: |
                      bookingReference not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: bookingReference Not Found
                        errorCodeMessage: |
                          The Booking does not exist
                notFoundAmendmentExample:
                  summary: |
                    Missing amended Booking
                  description: |
                    The `Amended Booking` response is requested - but no `Amended Booking` exists.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123?amendedContent=true
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: No amended booking exists
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: No amended booking
                        errorCodeMessage: No amended booking available
        '409':
          description: |
            In case the provider is processing the `Booking request` - it is possible for the provider to reject new incoming requests by returning a `409` (Conflict)
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictExample:
                  summary: |
                    Conflicting request
                  description: |
                    The provider is already processing a request and needs to finish this process before any new requests are processed

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 409
                    statusCodeText: Conflict
                    statusCodeMessage: |
                      Previous request is being processed. Please try again
                      later
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Conflicting request is being processed
                        errorCodeMessage: |
                          The Booking cannot be updated/amended while it is being processed. Please try again later
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: |
                      Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            Unexpected error
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getError:
                  summary: |
                    GET non-existing Booking Request
                  description: |
                    Calling

                        GET /v2/bookings/cbrr-123
                    
                    results in an error as booking `cbrr-123` does not exist.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: |
                      The requested carrierBookingRequestReference does not exist
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Non existent carrierBookingRequestReference
                        errorCodeMessage: |
                          carrierBookingRequestReference `cbrr-123` does not exist
    patch:
      tags:
        - Booking
      summary: |
        Cancels the Booking or cancels an Amendment
      operationId: cancel-booking
      description: |
        A shipper initiated cancellation of the `Booking` or `Booking Amendment` with the `bookingReference`. The path can contain a `carrierBookingRequestReference` or a `carrierBookingReference`. Once the `Booking` is confirmed - it is **only** possible to use the `carrierBookingReference`.

        This endPoint corresponds with **UseCase 11 - Cancel Booking Request by shipper**, **UseCase 9 - Cancel amendment to confirmed Booking** or **UseCase 13 - Cancel confirmed Booking by shipper**.

        ## Precondition
        In order to cancel a `Booking`, the `bookingStatus` must be one of
        - `RECEIVED`
        - `PENDING_UPDATE`
        - `UPDATE_RECEIVED`
        - `CONFIRMED`
        - `PENDING_AMENDMENT`

        In order to cancel a `Booking Amendment`, the status of the `Booking Amendment` must be
        - `AMENDMENT_RECEIVED`

        ## Postcondition
        The provider has received a cancellation from the consumer for a `Booking` or for a `Booking Amendment`.

        The consumer will receive a `202` (Accepted) if the payload schema-validates or a `400` (Bad Request) if it does not.

        ## Flow for the `202` (Accepted) response
        The following occurs when a provider receives a cancellation request:
        1. The payload is schema-validated. In case the payload **is invalid** a `400` (Bad Request) is returned.

           **The process stops here!**
        2. The payload is schema-valid which means:
           - all required properties are provided.
           - all values provided have correct data type.
        3. An empty response is returned and the consumer now awaits further processing by the provider.
        
        Once processed, the `Booking` or `Amended Booking` is cancelled and a [Booking Notification](#/BookingNotification) is sent. In case of a Confirmed Booking - the provider has the opportunity to decline the Cancellation of the Booking (in which case the `bookingCancellationStatus='CANCELLATION_DECLINED'`).
      parameters:
        - $ref: '#/components/parameters/bookingReferencePathParam'
        - $ref: '#/components/parameters/Api-Version-Major'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelBookingRequest'
            examples:
              bookingCancelledExample:
                summary: |
                  Booking Request cancelled
                description: |
                  The consumer wants to cancel the `Booking Request`. This is done by setting the `bookingStatus` to `CANCELLED` and provide an optional `reason`.
                value:
                  bookingStatus: CANCELLED
                  reason: Cancelling due to strike
              amendmentCancelledExample:
                summary: |
                  Amendment cancelled
                description: |
                  The consumer wants to **only** cancel the amendment (and keep the confirmed `Booking`). This is done by setting the `amendedBookingStatus` to `AMENDMENT_CANCELLED`.
                value:
                  amendedBookingStatus: AMENDMENT_CANCELLED
              requestConfirmedBookingCancelledExample:
                summary: |
                  Request to cancel a Confirmed Booking
                description: |
                  The consumer requests to cancel a `Confirmed Booking`. This is done by setting the `bookingCancellationStatus` to `CANCELLATION_RECEIVED` and provide an optional `reason`.
                value:
                  bookingCancellationStatus: CANCELLATION_RECEIVED
                  reason: Cancelling due to internal issues
      responses:
        '202':
          description: |
            Booking cancellation has been accepted.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              examples:
                bookingCancelledExample:
                  summary: |
                    Booking Request cancelled
                  description: |
                    The consumer has requested that the `Booking Request` should be cancelled. The cancellation request has been accepted and is now awaiting further processing by the provider
                  value: null
                amendmentCancelledExample:
                  summary: |
                    Amendment cancellation on a confirmed Booking accepted
                  description: |
                    The consumer has requested that the amendment to a confirmed `Booking` is to be cancelled. The cancellation request as been accepted and is now awaiting further processing by the provider
                  value: null
                confirmedBookingCancellationExample:
                  summary: |
                    Request to Cancel a confirmed Booking accepted
                  description: |
                    The consumer has requested to cancel a confirmed `Booking`. The cancellation request has been accepted and is now awaiting further processing by the provider
                  value: null
        '400':
          description: |
            In case the cancel payload does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Wrong `amendedBookingStatus`
                  description: |
                    `APPROVE` is not a possible value when PATCHING a `Booking`.

                    **NB**: The `errorCode` is not yet standardized by DCSA. The value `7003` is just a "random example".
                  value:
                    httpMethod: PATCH
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: APPROVE is not a valid status to set
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: amendedBookingStatus
                        value: APPROVE
                        errorCodeText: incorrect value
                        errorCodeMessage: 'Only AMENDMENT_CANCELLED is an allowed value: APPROVE was inserted'
        '404':
          description: |
            In case the consumer is cancelling the `Amended Booking` by setting:

                `amendedBookingStatus='AMENDMENT_CANCELLED'`
            
            but:
            - the `Booking` has not yet been confirmed
            - the `Booking` has been confirmed but no amendment has yet been provided by the consumer
            - the provider has requested for a new amendment (**UseCase 6: Request to amend confirmed Booking**) in which case the "old update" is no longer accessible.

            a `404` (Not Found) is returned.

            A `404` (Not Found) can also be sent in case the provider does not know of the `bookingReference` used in the request (the resource does not exist)
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                notFoundExample:
                  summary: |
                    Not Found request
                  description: |
                    The provided `bookingReference` cannot be found. The `bookingReference` does not exist in the provider system.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: |
                      bookingReference not found
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: bookingReference Not Found
                        errorCodeMessage: |
                          The Booking does not exist
                notFoundAmendmentExample:
                  summary: |
                    Missing amended Booking
                  description: |
                    Cancelling the `Amendment` is requested - but no `Amended Booking` exists.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: GET
                    requestUri: /v2/bookings/cbrr-123?amendedContent=true
                    statusCode: 404
                    statusCodeText: Not Found
                    statusCodeMessage: No amended booking exists
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: No amended booking
                        errorCodeMessage: No amended booking available
        '409':
          description: |
            In case the provider is processing a `Booking request` - it is possible for the provider to reject the cancellation by returning a `409` (Conflict). This is also to be used in case a cancellation to a Confirmed Booking is done via the `carrierBookingRequestReference`.
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                conflictExample:
                  summary: |
                    Conflicting request
                  description: |
                    The provider is already processing a request and needs to finish this process.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PATCH
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 409
                    statusCodeText: Conflict
                    statusCodeMessage: |
                      Previous request is being processed. Please try again later
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Conflicting request is being processed
                        errorCodeMessage: Conflicting request is being processed
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Booking request
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PATCH
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: |
                      Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Updating too many Bookings requests
                  description: |
                    Calling the endPoint
                    
                        PATCH /v2/bookings/cbrr-123
                    
                    too many times within a time period.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: PATCH
                    requestUri: /v2/bookings/cbrr-123
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: |
                      Too many request to cancel a booking has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Booking requests reached
                        errorCodeMessage: A maximum of 10 Bookings can be cancelled per hour
  /v2/booking-notifications:
    post:
      tags:
        - Notifications
      summary: Send a new Booking Notification
      operationId: booking-notifications
      description: |
        Creates a new [`Booking Notification`](#/BookingNotification). This endPoint is called whenever a `Booking` that a consumer has subscribed to changes state or is updated.

        **This endPoint is to be implemented by a consumer of the Booking API in order to receive Notifications**
      parameters:
        - $ref: '#/components/parameters/Api-Version-Major'
      requestBody:
        description: |
          The payload used to create a [`Booking Notification`](#/BookingNotification)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingNotification'
            examples:
              receivedLightweightExample:
                summary: |
                  Booking request received (Lightweight)
                description: |
                  A lightweight notification explaining that a `Booking Request` has been received and stored in provider system (`bookingStatus='RECEIVED'`).
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.booking.v2
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: BKG001
                  data:
                    bookingStatus: RECEIVED
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
              receivedFullStateTransferExample:
                summary: |
                  Booking request received (Full State Transfer)
                description: |
                  A full state transfer notification explaining that a `Booking Request` has been received and stored in provider system (`bookingStatus='RECEIVED'`).
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.booking.v2
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: BKG001
                  data:
                    bookingStatus: RECEIVED
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    booking:
                      carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                      bookingStatus: RECEIVED
                      receiptTypeAtOrigin: CY
                      deliveryTypeAtDestination: CY
                      cargoMovementTypeAtOrigin: FCL
                      cargoMovementTypeAtDestination: FCL
                      serviceContractReference: HHL51800000
                      freightPaymentTermCode: PRE
                      originChargesPaymentTerm:
                        haulageChargesPaymentTermCode: PRE
                        portChargesPaymentTermCode: PRE
                      destinationChargesPaymentTerm:
                        haulageChargesPaymentTermCode: COL
                        portChargesPaymentTermCode: PRE
                        otherChargesPaymentTermCode: PRE
                      contractQuotationReference: HHL1401
                      vessel:
                        name: MAERSK IOWA
                        vesselIMONumber: '9298686'
                      carrierServiceCode: TA1
                      carrierExportVoyageNumber: 403W
                      isPartialLoadAllowed: false
                      isExportDeclarationRequired: false
                      expectedDepartureDate: '2024-01-20'
                      incoTerms: EXW
                      isEquipmentSubstitutionAllowed: false
                      references:
                        - type: CR
                          value: KN-00103004
                      documentParties:
                        bookingAgent:
                          partyName: KN Bremerhaven
                          address:
                            street: Amerikaring
                            streetNumber: '40'
                            postCode: '27568'
                            city: Bremerhaven
                            countryCode: DE
                          partyContactDetails:
                            - name: Export operations department
                              phone: +49 471 945410
                      partyContactDetails:
                        - name: Diane
                          phone: +49 471 945410
                      shipmentLocations:
                        - location:
                            locationName: Bremerhaven
                            UNLocationCode: DEBRV
                          locationTypeCode: POL
                        - location:
                            locationName: Norfolk
                            UNLocationCode: USORF
                          locationTypeCode: POD
                      requestedEquipments:
                        - isShipperOwned: false
                          ISOEquipmentCode: 42G1
                          units: 3
                          commodities:
                            - commodityType: 'Dry cargo, Freight all kinds'
                              cargoGrossWeight:
                                value: 36000
                                unit: KGM
              declinedLightweightExample:
                summary: |
                  Booking amendment declined (Lightweight)
                description: |
                  A lightweight notification explaining that an amendment to a `Booking` has been declined (`amendedBookingStatus='AMENDMENT_DECLINED'`)
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.booking.v2
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: BKG001
                  data:
                    bookingStatus: CONFIRMED
                    amendedBookingStatus: AMENDMENT_DECLINED
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    carrierBookingReference: ABC709951
                    feedbacks:
                      - severity: INFO
                        code: INFORMATIONAL_MESSAGE
                        message: Declined because of no equipment availability
              declinedFullStateTransferExample:
                summary: |
                  Booking amendment declined (Full State Transfer)
                description: |
                  A full state transfer notification explaining that an amendment to a `Booking` has been declined (`amendedBookingStatus='AMENDMENT_DECLINED'`). The notification both contains the Booking from before the amendment (in the `booking` property) it also contains the amended booking (in the `amendedBooking` property).
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.booking.v2
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: BKG001
                  data:
                    bookingStatus: CONFIRMED
                    amendedBookingStatus: AMENDMENT_DECLINED
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    carrierBookingReference: ABC709951
                    feedbacks:
                      - severity: INFO
                        code: INFORMATIONAL_MESSAGE
                        message: Declined because of no equipment availability
                    booking:
                      carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                      carrierBookingReference: ABC709951
                      bookingStatus: CONFIRMED
                      amendedBookingStatus: AMENDMENT_DECLINED
                      receiptTypeAtOrigin: CY
                      deliveryTypeAtDestination: CY
                      cargoMovementTypeAtOrigin: FCL
                      cargoMovementTypeAtDestination: FCL
                      serviceContractReference: HHL51800000
                      freightPaymentTermCode: PRE
                      originChargesPaymentTerm:
                        haulageChargesPaymentTermCode: PRE
                        portChargesPaymentTermCode: PRE
                        otherChargesPaymentTermCode: COL
                      destinationChargesPaymentTerm:
                        haulageChargesPaymentTermCode: COL
                        portChargesPaymentTermCode: PRE
                        otherChargesPaymentTermCode: COL
                      contractQuotationReference: HHL1401
                      vessel:
                        name: MAERSK IOWA
                        vesselIMONumber: '9298686'
                      carrierServiceCode: TA1
                      carrierExportVoyageNumber: 403W
                      isPartialLoadAllowed: false
                      isExportDeclarationRequired: false
                      expectedDepartureDate: '2024-01-20'
                      incoTerms: EXW
                      isEquipmentSubstitutionAllowed: false
                      references:
                        - type: CR
                          value: KN-00103004
                      documentParties:
                        bookingAgent:
                          partyName: KN Bremerhaven
                          address:
                            street: Amerikaring
                            streetNumber: '40'
                            postCode: '27568'
                            city: Bremerhaven
                            countryCode: DE
                          partyContactDetails:
                            - name: Export operations department
                              phone: +49 471 945410
                      partyContactDetails:
                        - name: Diane
                          phone: +49 471 945410
                      shipmentLocations:
                        - location:
                            locationName: Bremerhaven
                            UNLocationCode: DEBRV
                          locationTypeCode: POL
                        - location:
                            locationName: Norfolk
                            UNLocationCode: USORF
                          locationTypeCode: POD
                      requestedEquipments:
                        - isShipperOwned: false
                          ISOEquipmentCode: 42G1
                          units: 3
                          commodities:
                            - commodityType: 'Dry cargo, Freight all kinds'
                              cargoGrossWeight:
                                value: 36000
                                unit: KGM
                      confirmedEquipments:
                        - ISOEquipmentCode: 42G1
                          units: 3
                      transportPlan:
                        - transportPlanStage: MNC
                          transportPlanStageSequenceNumber: 1
                          loadLocation:
                            locationName: Bremerhaven
                            UNLocationCode: DEBRV
                          dischargeLocation:
                            locationName: Norfolk
                            UNLocationCode: USORF
                          plannedDepartureDate: '2024-01-20'
                          plannedArrivalDate: '2024-01-31'
                          modeOfTransport: VESSEL
                          vesselName: MAERSK IOWA
                          vesselIMONumber: '9298686'
                          carrierServiceCode: TA1
                          carrierExportVoyageNumber: 403W
                      shipmentCutOffTimes:
                        - cutOffDateTimeCode: DCO
                          cutOffDateTime: '2024-01-17T22:30:00Z'
                        - cutOffDateTimeCode: VCO
                          cutOffDateTime: '2024-01-18T22:30:00Z'
                        - cutOffDateTimeCode: FCO
                          cutOffDateTime: '2024-01-19T13:30:00Z'
                      advanceManifestFilings:
                        - manifestTypeCode: ACE
                          countryCode: US
                      carrierClauses:
                        - The date of shipment, the carrying vessel and the schedule are not guaranteed and are always subject to changes.
                        - 'Operations such as lifting, stowage, drayage and customs declaration of containers are based on the description of the nature, quantity, measurement and weight declared by the Shipper. The Shipper shall be liable for any damage, loss, expense and fines incurred by Carrier XYZ or its agents due to incorrectness or incompleteness of such declaration.'
                        - 'Warranted shipper must fulfill the requirements of SOLAS regulations and the IMO guidelines regarding the Verified Gross Mass (VGM) of container carrying cargo (msc.1/circ.1474, 9 June 2014).'
                        - 'In accordance with SOLAS regulations and IMO guidelines regarding the VGM (verified gross mass), any expenses incurred because the VGM was submitted late or was not submitted at all will be charged back to the customer with an additional administration fee.'
                    amendedBooking:
                      carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                      carrierBookingReference: ABC709951
                      bookingStatus: CONFIRMED
                      amendedBookingStatus: AMENDMENT_DECLINED
                      receiptTypeAtOrigin: CY
                      deliveryTypeAtDestination: CY
                      cargoMovementTypeAtOrigin: FCL
                      cargoMovementTypeAtDestination: FCL
                      serviceContractReference: HHL51800000
                      freightPaymentTermCode: PRE
                      originChargesPaymentTerm:
                        haulageChargesPaymentTermCode: PRE
                        portChargesPaymentTermCode: PRE
                        otherChargesPaymentTermCode: COL
                      destinationChargesPaymentTerm:
                        haulageChargesPaymentTermCode: COL
                        portChargesPaymentTermCode: PRE
                        otherChargesPaymentTermCode: COL
                      contractQuotationReference: HHL1401
                      vessel:
                        name: MAERSK IOWA
                        vesselIMONumber: '9298686'
                      carrierServiceCode: TA1
                      carrierExportVoyageNumber: 403W
                      isPartialLoadAllowed: false
                      isExportDeclarationRequired: false
                      expectedDepartureDate: '2024-01-20'
                      incoTerms: EXW
                      isEquipmentSubstitutionAllowed: false
                      references:
                        - type: CR
                          value: KN-00103004
                      documentParties:
                        bookingAgent:
                          partyName: KN Bremerhaven
                          address:
                            street: Amerikaring
                            streetNumber: '40'
                            postCode: '27568'
                            city: Bremerhaven
                            countryCode: DE
                          partyContactDetails:
                            - name: Export operations department
                              phone: +49 471 945410
                      partyContactDetails:
                        - name: Diane
                          phone: +49 471 945410
                      shipmentLocations:
                        - location:
                            locationName: Bremerhaven
                            UNLocationCode: DEBRV
                          locationTypeCode: POL
                        - location:
                            locationName: Norfolk
                            UNLocationCode: USORF
                          locationTypeCode: POD
                      requestedEquipments:
                        - isShipperOwned: false
                          ISOEquipmentCode: 42G1
                          units: 30
                          commodities:
                            - commodityType: 'Dry cargo, Freight all kinds'
                              cargoGrossWeight:
                                value: 36000
                                unit: KGM
              cancelConfirmedBookingLightweightExample:
                summary: |
                  Confirmed Booking cancelled (Lightweight)
                description: |
                  A lightweight notification explaining that a confirmed `Booking` has been cancelled (`bookingCancellationStatus='CANCELLATION_CONFIRMED'`)
                value:
                  specversion: '1.0'
                  id: 3cecb101-7a1a-43a4-9d62-e88a131651e2
                  source: 'https://member.com/'
                  type: org.dcsa.booking.v2
                  time: '2018-04-05T17:31:00Z'
                  datacontenttype: application/json
                  subscriptionReference: BKG001
                  data:
                    bookingStatus: CANCELLED
                    amendedBookingStatus: AMENDMENT_CANCELLED
                    bookingCancellationStatus: CANCELLATION_CONFIRMED
                    carrierBookingRequestReference: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
                    carrierBookingReference: ABC709951
      responses:
        '204':
          description: |
            No Content
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
        '400':
          description: |
            In case the `Notification` does not schema validate a `400` (Bad Request) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                badRequestExample:
                  summary: |
                    Booking missing carrierBookingReference or carrierBookingRequestReference
                  description: |
                    `carrierBookingReference` or `carrierBookingRequestReference` is a conditionally property in the `Notification` (at least one of them must be present). This is an example of how the error object would look in case this property is missing

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/booking-notifications
                    statusCode: 400
                    statusCodeText: Bad Request
                    statusCodeMessage: |
                      carrierBookingReference or carrierBookingRequestReference not found - one of them is a mandatory to provide in a Notification
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        property: carrierBookingReference or carrierBookingRequestReference
                        errorCodeText: mandatory property missing
                        errorCodeMessage: |
                          carrierBookingReference or carrierBookingRequestReference must be provided as part of a Notification
        '500':
          description: |
            In case a server error occurs in provider system a `500` (Internal Server Error) is returned
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                internalServerErrorExample:
                  summary: |
                    Internal Server Error while processing Notification
                  description: |
                    An Internal Server Error has occurred - the consumer should contact {provider-support} and provide the `providerCorrelationReference` (in the example this is `4426d965-0dd8-4005-8c63-dc68b01c4962`)

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/booking-notifications
                    statusCode: 500
                    statusCodeText: Internal Server Error
                    statusCodeMessage: |
                      Internal Server Error occurred while processing Booking request
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Internal Error occurred
                        errorCodeMessage: Internal Error occurred
        default:
          description: |
            For other errors the error object should be populated with relevant information
          headers:
            API-Version:
              $ref: '#/components/headers/API-Version'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                tooManyRequestsExample:
                  summary: |
                    Making too many Notifications
                  description: |
                    Calling the endPoint

                        POST /v2/booking-notifications

                    too many times within a time period.

                    **NB**: `errorCode` not yet standardized by DCSA. Value `7003` is just a "random example"
                  value:
                    httpMethod: POST
                    requestUri: /v2/booking-notifications
                    statusCode: 429
                    statusCodeText: Too Many Requests
                    statusCodeMessage: |
                      Too many request to create a Notification has been requested. Please try again in 1 hour
                    providerCorrelationReference: 4426d965-0dd8-4005-8c63-dc68b01c4962
                    errorDateTime: '2024-09-04T09:41:00Z'
                    errors:
                      - errorCode: 7003
                        errorCodeText: Max Notifications reached
                        errorCodeMessage: A maximum of 10 Notifications can be created per hour
components:
  headers:
    API-Version:
      schema:
        type: string
        example: 2.0.0
      description: |
        SemVer used to indicate the version of the contract (API version) returned.
  parameters:
    Api-Version-Major:
      in: header
      name: API-Version
      required: false
      schema:
        type: string
        example: '2'
      description: |
        An API-Version header **MAY** be added to the request (optional); if added it **MUST** only contain **MAJOR** version. API-Version header **MUST** be aligned with the URI version.

    #############
    # Path params
    #############
    amendedContent:
      in: query
      name: amendedContent
      description: |
        Controls whether the content of this payload is the amended Booking (`amendedContent=true`) or the confirmed Booking (`amendedContent=false`).

        If `amendedContent=true` and no amendment has been requested or if the provider is not able to send the amendment - the response will be a `404` Not Found
      schema:
        type: boolean
        default: false
        example: false
    bookingReferencePathParam:
      in: path
      name: bookingReference
      description: |
        This can be one of:
        - `carrierBookingRequestReference` (in case no carrierBookingReference has yet been appointed to the booking)
        - `carrierBookingReference`
      schema:
        type: string
        pattern: ^\S(?:.*\S)?$
        maxLength: 100
        example: CBR001
      required: true
  schemas:

    #########################
    # Create Booking Response
    #########################
    CreateBookingResponse:
      type: object
      title: Create Booking Response
      description: |
        **Only** the `carrierBookingRequestReference` is returned.
      properties:
        carrierBookingRequestReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            A reference to the booking during the booking request phase.
          example: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
      required:
        - carrierBookingRequestReference

    ########################
    # Cancel Booking Request
    ########################
    CancelBookingRequest:
      type: object
      title: Cancel Booking Request
      oneOf:
        - type: object
          title: Cancel Booking Request (prior to Booking Confirmation)
          properties:
            bookingStatus:
              type: string
              maxLength: 50
              description: |
                Setting the `bookingStatus` to `CANCELLED` cancels the `Booking Request` (only possible **before** it is `CONFIRMED` and using this property is only possible in combination with the `bookingReference` path-property being the `carrierBookingRequestReference`). The `Booking Request` will discontinue if the request is accepted by the provider.

                **Condition:** It is a precondition that the `bookingStatus` **is NOT** `CONFIRMED` or `PENDING_AMENDMENT` in order to cancel it. If this is not the case a `409` (Conflict) error response should be returned.

                Only possible value to set is `CANCELLED`.
              example: CANCELLED
          required:
            - bookingStatus
        - type: object
          title: Only cancel the amendment to a Confirmed Booking
          properties:
            amendedBookingStatus:
              type: string
              maxLength: 50
              description: |
                Setting the `amendedBookingStatus` to `AMENDMENT_CANCELLED` **only** cancels the amendment to a confirmed `Booking`. This is only possible in combination with the `bookingReference` path-property being the `carrierBookingReference`.

                **Condition:** It is a precondition that the `amendedBookingStatus` **is** `AMENDMENT_RECEIVED` in order to cancel it. If this is not the case a `404` (Not Found) error response should be returned.

                Only possible value to set is `AMENDMENT_CANCELLED`.
              example: AMENDMENT_CANCELLED
          required:
            - amendedBookingStatus
        - type: object
          title: Request to cancel a Confirmed Booking
          properties:
            bookingCancellationStatus:
              type: string
              maxLength: 50
              description: |
                Setting the `bookingCancellationStatus` to `CANCELLATION_RECEIVED` is a request to cancel a confirmed Booking (only possible **after** it is `CONFIRMED` and using this property is only possible in combination with the `bookingReference` path-property being the `carrierBookingReference`). Upon receiving this request the provider will check if it is possible to cancel the confirmed booking. Further processing is needed by the provider.

                **Condition:** It is a precondition that the `bookingStatus` **is** `CONFIRMED` or `PENDING_AMENDMENT` in order to cancel it. If this is not the case a `409` (Conflict) error response should be returned.

                Only possible value to set is `CANCELLATION_RECEIVED`.
              example: CANCELLATION_RECEIVED
          required:
            - bookingCancellationStatus
      properties:
        reason:
          type: string
          maxLength: 5000
          description: |
            An optional property where a reason for cancelling the booking or the amendment can be given.
          example: Booking cancelled due to internal problems

    ######################
    # Booking Notification
    ######################
    BookingNotification:
      type: object
      title: Booking Notification
      description: |
        `CloudEvent` specific properties for the `Notification`.
      properties:
        specversion:
          type: string
          description: |
            The version of the CloudEvents specification which the event uses. This enables the interpretation of the context. Compliant event producers MUST use a value of `1.0` when referring to this version of the specification.

            Currently, this attribute will only have the 'major' and 'minor' version numbers included in it. This allows for 'patch' changes to the specification to be made without changing this property's value in the serialization. Note: for 'release candidate' releases a suffix might be used for testing purposes.
          enum:
            - '1.0'
          example: '1.0'
        id:
          type: string
          maxLength: 100
          description: |
            Identifies the event. Producers MUST ensure that `source` + `id` is unique for each distinct event. If a duplicate event is re-sent (e.g. due to a network error) it MAY have the same `id`. Consumers MAY assume that Events with identical `source` and `id` are duplicates.
          example: 3cecb101-7a1a-43a4-9d62-e88a131651e2
        source:
          type: string
          maxLength: 4096
          description: |
            Identifies the context in which an event happened. Often this will include information such as the type of the event source, the organization publishing the event or the process that produced the event. The exact syntax and semantics behind the data encoded in the URI is defined by the event producer.

            Producers MUST ensure that `source` + `id` is unique for each distinct event.

            An application MAY assign a unique `source` to each distinct producer, which makes it easy to produce unique IDs since no other producer will have the same source. The application MAY use UUIDs, URNs, DNS authorities or an application-specific scheme to create unique `source` identifiers.

            A source MAY include more than one producer. In that case the producers MUST collaborate to ensure that `source` + `id` is unique for each distinct event.
          example: 'https://member.com/'
        type:
          type: string
          description: |
            This attribute contains a value describing the type of event related to the originating occurrence. Often this attribute is used for routing, observability, policy enforcement, etc. The format of this is producer defined and might include information such as the version of the type - see [Versioning of CloudEvents in the Primer](https://github.com/cloudevents/spec/blob/v1.0.2/cloudevents/primer.md#versioning-of-cloudevents) for more information.
          enum:
            - org.dcsa.booking.v2
          example: org.dcsa.booking.v2
        time:
          type: string
          format: date-time
          description: |
            Timestamp of when the occurrence happened. If the time of the occurrence cannot be determined then this attribute MAY be set to some other time (such as the current time) by the CloudEvents producer, however all producers for the same `source` MUST be consistent in this respect. In other words, either they all use the actual time of the occurrence or they all use the same algorithm to determine the value used.
          example: '2018-04-05T17:31:00Z'
        datacontenttype:
          type: string
          description: |
            Content type of `data` value. This attribute enables `data` to carry any type of content, whereby format and encoding might differ from that of the chosen event format. For example, an event rendered using the [JSON envelope](formats/json-format.md#3-envelope) format might carry an XML payload in `data`, and the consumer is informed by this attribute being set to "application/xml". The rules for how `data` content is rendered for different `datacontenttype` values are defined in the event format specifications; for example, the JSON event format defines the relationship in [section 3.1](formats/json-format.md#31-handling-of-data).

            For some binary mode protocol bindings, this field is directly mapped to the respective protocol's content-type metadata property. Normative rules for the binary mode and the content-type metadata mapping can be found in the respective protocol.

            In some event formats the `datacontenttype` attribute MAY be omitted. For example, if a JSON format event has no `datacontenttype` attribute, then it is implied that the `data` is a JSON value conforming to the "application/json" media type. In other words: a JSON-format event with no `datacontenttype` is exactly equivalent to one with `datacontenttype="application/json"`.

            When translating an event message with no `datacontenttype` attribute to a different format or protocol binding, the target `datacontenttype` SHOULD be set explicitly to the implied `datacontenttype` of the source.
          enum:
            - application/json
          example: application/json
        subscriptionReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            The reference of the subscription that has triggered this event
          example: 30675492-50ff-4e17-a7df-7a487a8ad343
        data:
          $ref: '#/components/schemas/BookingNotificationData'
      required:
        - specversion
        - id
        - source
        - type
        - time
        - datacontenttype
        - subscriptionReference
        - data

    ###############################
    # Data for Booking Notification
    ###############################
    BookingNotificationData:
      type: object
      title: Data
      description: |
        `Booking` specific properties for the `Notification`
      properties:
        bookingStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Booking`. Possible values are:

            - `RECEIVED` (Booking request has been received)
            - `PENDING_UPDATE` (An update is required to the Booking)
            - `UPDATE_RECEIVED` (An update has been received and is awaiting to be processed)
            - `CONFIRMED` (Booking has been Confirmed)
            - `PENDING_AMENDMENT` (An amendment is required to the Booking)
            - `REJECTED` (Booking discontinued by carrier before it has been Confirmed)
            - `DECLINED` (Booking discontinued by carrier after it has been Confirmed)
            - `CANCELLED` (Booking discontinued by consumer)
            - `COMPLETED` (The Transport Document this Booking is connected to has been Surrendered for Delivery)
          example: RECEIVED
        amendedBookingStatus:
          type: string
          maxLength: 50
          description: |
            The status of latest amendment added to the `Booking`. If no amendment has been requested - then this property is empty. Possible values are:

            - `AMENDMENT_RECEIVED` (An amendment has been received and is awaiting to be processed)
            - `AMENDMENT_CONFIRMED` (Amendment is confirmed)
            - `AMENDMENT_DECLINED` (Amendment discontinued by provider)
            - `AMENDMENT_CANCELLED` (Amendment discontinued by consumer)
          example: AMENDMENT_RECEIVED
        bookingCancellationStatus:
          type: string
          maxLength: 50
          description: |
            The status of the latest booking cancellation. If no cancellation has been requested - then this property is empty. Possible values are:
            - `CANCELLATION_RECEIVED` (A request to cancel a Confirmed Booking has been received and is awaiting to be processed)
            - `CANCELLATION_DECLINED` (Cancellation of the Confirmed Booking has been declined by provider)
            - `CANCELLATION_CONFIRMED` (Cancellation of the Confirmed Booking has been confirmed by provider)
          example: CANCELLATION_RECEIVED
        carrierBookingRequestReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            A reference to the booking during the booking request phase.

            **Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` is required to provide
          example: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
        carrierBookingReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.

            **Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` is required to provide
          example: ABC709951
        feedbacks:
          type: array
          description: |
            Feedback that can be provided includes, but is not limited to:
            - unsupported properties
            - changed values
            - removed properties
            - general information
          items:
            $ref: '#/components/schemas/Feedback'
        booking:
          $ref: '#/components/schemas/BookingFullNotification'
        amendedBooking:
          $ref: '#/components/schemas/AmendedBookingFullNotification'
      required:
        - bookingStatus

    #########################################
    # Booking object for Booking Notification
    #########################################
    BookingFullNotification:
      type: object
      title: Booking Full Notification
      description: |
        This property contains the booking in case the subscriber is subscribing to the `Full State Transfer` of the Booking.

        In case the subscriber does not subscribe to the `Full State Transfer` of the Booking then the content in this property can be ignored.
      allOf:
        - $ref: '#/components/schemas/Booking'

    #################################################
    # Amended Booking object for Booking Notification
    #################################################
    AmendedBookingFullNotification:
      type: object
      title: Amended Booking
      description: |
        This property contains the amended booking in case:
          - an amendment is currently active
          - the subscriber is subscribing to the `Full State Transfer` of the Booking

        In case the subscriber does not subscribe to the `Full State Transfer` of the Booking or no amendment is active - then the content in this property can be ignored.
      allOf:
        - $ref: '#/components/schemas/Booking'

    ##########
    # Feedback
    ##########
    Feedback:
      type: object
      title: Feedback
      description: |
        Feedback that can be provided includes, but is not limited to:
        - unsupported properties
        - changed values
        - removed properties
        - general information
      properties:
        severity:
          type: string
          maxLength: 50
          description: |
            The severity of the feedback. Possible values are:
            - `INFO` (Information - "Your reefer container will use renewable energy", "This earlier / premium service is available")
            - `WARN` (Warning - "I'm going to replace" / "Ignore this value" / "Use another value instead")
            - `ERROR` (Error - "This must be changed!")
          example: WARN
        code:
          type: string
          maxLength: 50
          description: |
            A code used to describe the feedback. Possible values are:
            - `INFORMATIONAL_MESSAGE` (INFO - to be used when providing extra information) 
            - `PROPERTY_WILL_BE_IGNORED` (WARN - to be used for unsupported properties/values)
            - `PROPERTY_VALUE_MUST_CHANGE` (ERROR - to be used when a wrong property/value is provided)
            - `PROPERTY_VALUE_HAS_BEEN_CHANGED` (WARN - when something has been auto-updated without consumer intervention)
            - `PROPERTY_VALUE_MAY_CHANGE` (WARN - when something is likely to change in the future)
            - `PROPERTY_HAS_BEEN_DELETED` (WARN - when something has been auto-deleted without consumer intervention)
          example: PROPERTY_WILL_BE_IGNORED
        message:
          type: string
          maxLength: 5000
          description: |
            A description with additional information.
          example: Spaces not allowed in facility code
        jsonPath:
          type: string
          maxLength: 500
          description: |
            A path to the property, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
          example: $.location.facilityCode
        property:
          type: string
          maxLength: 100
          description: |
            The name of the property causing the error/warning.
          example: facilityCode
      required:
        - severity
        - code
        - message

    #################
    # Error Responses
    #################
    ErrorResponse:
      title: Error Response
      type: object
      description: Unexpected error
      properties:
        httpMethod:
          description: |
            The HTTP method used to make the request e.g. `GET`, `POST`, etc
          type: string
          example: POST
          enum:
            - GET
            - HEAD
            - POST
            - PUT
            - DELETE
            - OPTION
            - PATCH
        requestUri:
          description: |
            The URI that was requested.
          type: string
          example: /v1/events
        statusCode:
          description: |
            The HTTP status code returned.
          type: integer
          format: int32
          example: 400
        statusCodeText:
          description: |
            A standard short description corresponding to the HTTP status code.
          type: string
          maxLength: 50
          example: Bad Request
        statusCodeMessage:
          description: |
            A long description corresponding to the HTTP status code with additional information.
          type: string
          maxLength: 200
          example: The supplied data could not be accepted
        providerCorrelationReference:
          description: |
            A unique identifier to the HTTP request within the scope of the API provider.
          type: string
          maxLength: 100
          example: 4426d965-0dd8-4005-8c63-dc68b01c4962
        errorDateTime:
          description: |
            The DateTime corresponding to the error occurring. Must be formatted using [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
          type: string
          format: date-time
          example: '2024-09-04T09:41:00Z'
        errors:
          type: array
          description: |
            An array of errors providing more detail about the root cause.
          minItems: 1
          items:
            $ref: '#/components/schemas/DetailedError'
      required:
        - httpMethod
        - requestUri
        - statusCode
        - statusCodeText
        - errorDateTime
        - errors

    DetailedError:
      type: object
      title: Detailed Error
      description: |
        A detailed description of what has caused the error.
      properties:
        errorCode:
          type: integer
          format: int32
          description: |
            The detailed error code returned.

              - `7000-7999` Technical error codes
              - `8000-8999` Functional error codes
              - `9000-9999` API provider-specific error codes            

            [Error codes as specified by DCSA](https://developer.dcsa.org/standard-error-codes).
          minimum: 7000
          maximum: 9999
          example: 7003
        property:
          type: string
          maxLength: 100
          description: |
            The name of the property causing the error.
          example: facilityCode
        value:
          type: string
          maxLength: 500
          description: |
            The value of the property causing the error serialised as a string exactly as in the original request.
          example: SG SIN WHS
        jsonPath:
          type: string
          maxLength: 500
          description: |
            A path to the property causing the error, formatted according to [JSONpath](https://github.com/json-path/JsonPath).
          example: $.location.facilityCode
        errorCodeText:
          description: |
            A standard short description corresponding to the `errorCode`.
          type: string
          maxLength: 100
          example: invalidData
        errorCodeMessage:
          type: string
          maxLength: 5000
          description: |
            A long description corresponding to the `errorCode` with additional information.
          example: Spaces not allowed in facility code
      required:
        - errorCodeText
        - errorCodeMessage

    ##################
    # Address Location
    ##################
    Address:
      type: object
      title: Address
      description: |
        An object for storing address related information
      properties:
        street:
          type: string
          maxLength: 70
          description: The name of the street.
          example: Ruijggoordweg
        streetNumber:
          type: string
          maxLength: 50
          description: The number of the street.
          example: '100'
        floor:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The floor of the street number.
          example: 2nd
        postCode:
          type: string
          maxLength: 10
          description: The post code.
          example: 1047 HM
        POBox:
          type: string
          maxLength: 20
          description: A numbered box at a post office where a person or business can have mail or parcels delivered.
          example: '123'
        city:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The name of the city.
          example: Amsterdam
        stateRegion:
          type: string
          maxLength: 65
          description: The name of the state/region.
          example: North Holland
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
      required:
        - street
        - city
        - countryCode

    ###################
    # Facility Location
    ###################
    Facility:
      title: Facility
      type: object
      description: |
        An object used to express a location using a `Facility`. The facility can be expressed using one of `BIC` code or `SMDG` code. The `facilityCode` does not contain the `UNLocationCode` - this should be provided in the `UnLocationCode` attribute.
      properties:
        facilityCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 6
          description: |
            The code used for identifying the specific facility. This code does not include the UN Location Code.

            The definition of the code depends on the `facilityCodeListProvider`. As code list providers maintain multiple codeLists the following codeList is used:

            - `SMDG` (the codeList used is the [SMDG Terminal Code List](https://smdg.org/documents/smdg-code-lists/))
            - `BIC` (the codeList used is the [BIC Facility Codes](https://www.bic-code.org/facility-codes/))
          example: ADT
        facilityCodeListProvider:
          type: string
          description: |
            The provider used for identifying the facility Code. Some facility codes are only defined in combination with an `UN Location Code`
            - `BIC` (Requires a UN Location Code)
            - `SMDG` (Requires a UN Location Code)
          enum:
            - BIC
            - SMDG
          example: SMDG
      required:
        - facilityCode
        - facilityCodeListProvider

    #########################
    # Geo Coordinate Location
    #########################
    GeoCoordinate:
      type: object
      title: Geo Coordinate
      description: |
        An object used to express a location using `latitude` and `longitude`.
      properties:
        latitude:
          type: string
          description: Geographic coordinate that specifies the northâsouth position of a point on the Earth's surface.
          maxLength: 10
          example: '48.8585500'
        longitude:
          type: string
          description: Geographic coordinate that specifies the eastâwest position of a point on the Earth's surface.
          maxLength: 11
          example: '2.294492036'
      required:
        - latitude
        - longitude

    ################
    # Create Booking
    ################
    CreateBooking:
      type: object
      title: Create Booking
      required:
        - receiptTypeAtOrigin
        - deliveryTypeAtDestination
        - cargoMovementTypeAtOrigin
        - cargoMovementTypeAtDestination
        - isEquipmentSubstitutionAllowed
        - shipmentLocations
        - requestedEquipments
        - documentParties
      properties:
        receiptTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Origin`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        deliveryTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Destination`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        cargoMovementTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:
            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        cargoMovementTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:
            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        serviceContractReference:
          type: string
          maxLength: 30
          description: |
            Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as âMQCâ) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.
            
            **Condition:** One of `serviceContractReference` or `contractQuotationReference` must be provided, but not both.
          example: HHL51800000
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        originChargesPaymentTerm:
          $ref: '#/components/schemas/OriginChargesPaymentTerm'
        destinationChargesPaymentTerm:
          $ref: '#/components/schemas/DestinationChargesPaymentTerm'
        contractQuotationReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.

            **Condition:** One of `contractQuotationReference` or `serviceContractReference` must be provided, but not both.
          example: HHL1401
        vessel:
          $ref: '#/components/schemas/Vessel'
        carrierServiceName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The name of a service as specified by the carrier.

            **Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceCode` are blank. If `routingReference` is provided - this property MUST not be provided.
          example: Great Lion Service
        carrierServiceCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The carrier specific code of the service for which the schedule details are published.

            **Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceName` are blank. If `routingReference` is provided - this property MUST not be provided.
          example: FE1
        universalServiceReference:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          minLength: 8
          maxLength: 8
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.

            **Condition:** If `routingReference` is provided - this property MUST not be provided.
          example: SR12345A
        carrierExportVoyageNumber:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          example: 2103S
          description: |
            The carrier specific identifier of the export Voyage.

            **Condition:** Mandatory if `expectedDepartureDate` or `expectedArrivalAtPlaceOfDeliveryStartDate` and `expectedArrivalAtPlaceOfDeliveryEndDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`

            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).

            **Condition:** If `routingReference` is provided - this property MUST not be provided.
          example: 2103N
        routingReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 5000
          description: |
            A reference to a predefined `route` specified in **Commercial Schedules - Point to point**. When specifying this property - it is not needed to specify the following properties:
              - `vessel` which includes:
                - `vesselName`
                - `vesselIMONumber`
              - `carrierServiceName`
              - `carrierServiceCode`
              - `universalServiceReference`
              - `carrierExportVoyageNumber`
              - `universalExportVoyageReference`
              - `expectedDepartureDate`
              - `expectedArrivalAtPlaceOfDeliveryStartDate` or `expectedArrivalAtPlaceOfDeliveryEndDate`
              - the following `locationTypeCode` in `shipmentLocations`:
                - `PRE` (Place of Receipt)
                - `POL` (Port of Loading)
                - `POD` (Port of Discharge)
                - `PDE` (Place of Delivery)
          example: Route123
        declaredValue:
          type: number
          format: float
          minimum: 0
          description: |
            The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and "Ad Valorem" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.
          example: 1231.1
        declaredValueCurrency:
          type: string
          pattern: ^[A-Z]{3}$
          minLength: 3
          maxLength: 3
          description: |
            The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).

            **Condition:** Mandatory if `declaredValue` is provided. If `declaredValue` is not provided, this field must be empty.
          example: DKK
        carrierCode:
          type: string
          pattern: ^\S+$
          maxLength: 4
          description: |
            The `SCAC` code (provided by [NMFTA](https://nmfta.org/scac/)) or `SMDG` code (provided by [SMDG](https://smdg.org/documents/smdg-code-lists/smdg-liner-code-list/)) of the carrier the booking request is intended for. `carrierCodeListProvider` defines which list the `carrierCode` is based upon.
          example: MMCU
        carrierCodeListProvider:
          type: string
          description: |
            The code list provider for the `carrierCode`. Possible values are:
            - `SMDG` (Ship Message Design Group)
            - `NMFTA` (National Motor Freight Traffic Association)
          enum:
            - SMDG
            - NMFTA
          example: NMFTA
        isPartialLoadAllowed:
          type: boolean
          description: |
            Indicates whether the shipper agrees to load part of the shipment in case not all of the cargo is delivered within cut-off.
            
            **Note:** The carrier is not liable in case unable to follow the customer's instructions due to operational constraints. If this value is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        isExportDeclarationRequired:
          type: boolean
          description: |
            Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.

            **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        exportDeclarationReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Reference number assigned to an Export declaration typically submitted by the exporter (or the freight forwarder on behalf of the exporter) that provides detailed information about the goods being exported. It serves as a record for the exporting country's government and is used for statistical, regulatory, and compliance purposes. The export declaration must typically be submitted to the relevant customs authorities before the goods leave the exporting country.
          example: ABC123123
        expectedDepartureDate:
          type: string
          format: date
          description: |
            The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedArrivalAtPlaceOfDeliveryDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-17'
        expectedArrivalAtPlaceOfDeliveryStartDate:
          type: string
          format: date
          description: |
            The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at `Place Of Delivery`.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-17'
        expectedArrivalAtPlaceOfDeliveryEndDate:
          type: string
          format: date
          description: |
            The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at `Place Of Delivery`.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-19'
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the `Transport Document`. Possible values are:
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique reference allocated by the shipping line to the `Transport Document` that the booking concerns.
          example: reserved-HHL123
        bookingChannelReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other.
            
            **Condition:** a booking channel is being used
          example: Inttra reference
        incoTerms:
          type: string
          maxLength: 3
          description: |
            Transport obligations, costs and risks as agreed between buyer and seller as defined by [Incoterms Rules](https://iccwbo.org/business-solutions/incoterms-rules/).
          example: FCA
        isEquipmentSubstitutionAllowed:
          type: boolean
          description: |
            Indicates if an alternate equipment type can be provided by the carrier.
          example: true
        invoicePayableAt:
          $ref: '#/components/schemas/InvoicePayableAt'
        placeOfBLIssue:
          $ref: '#/components/schemas/PlaceOfBLIssue'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/ReferenceShipper'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
        documentParties:
          $ref: '#/components/schemas/DocumentPartiesReq'
        partyContactDetails:
          type: array
          description: |
            The contact details of the person(s) to contact in relation to the **Booking** (changes, notifications etc.) 
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        shipmentLocations:
          type: array
          minItems: 1
          description: |
            A list of `Shipment Locations`
          items:
            $ref: '#/components/schemas/ShipmentLocation'
        requestedEquipments:
          type: array
          minItems: 1
          description: |
            List of `Requested Equipments`. Multiple containers can be requested within the same booking. For each Requested Equipment object with 2 or more units, it is a condition that the commodity (or list of commodities) defined within the same Requested Equipment object is the same for each requested unit.

            **Example:** 2 x 20' containing 50% shoes and 50% t-shirts can be requested within the same Requested Equipment object only if each 20' will contain 50% shoes and 50% t-shirts. If 1 x 20' will contain 100% shoes and the other 20' will be 100% t-shirts, 2 separate Requested Equipment objects must be defined.
          items:
            $ref: '#/components/schemas/RequestedEquipmentShipper'

    ################
    # Update Booking
    ################
    UpdateBooking:
      type: object
      title: Update Booking
      properties:
        carrierBookingRequestReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            A reference to the booking during the booking request phase.

            **Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided
          example: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
        carrierBookingReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.

            **Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided
          example: ABC709951
        receiptTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Origin`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        deliveryTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Destination`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        cargoMovementTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:
            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        cargoMovementTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:
            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        serviceContractReference:
          type: string
          maxLength: 30
          description: |
            Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as âMQCâ) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.
            
            **Condition:** One of `serviceContractReference` or `contractQuotationReference` must be provided, but not both.
          example: HHL51800000
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        originChargesPaymentTerm:
          $ref: '#/components/schemas/OriginChargesPaymentTerm'
        destinationChargesPaymentTerm:
          $ref: '#/components/schemas/DestinationChargesPaymentTerm'
        contractQuotationReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.

            **Condition:** One of `contractQuotationReference` or `serviceContractReference` must be provided, but not both.
          example: HHL1401
        vessel:
          $ref: '#/components/schemas/Vessel'
        carrierServiceName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The name of a service as specified by the carrier.

            **Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceCode` are blank. If `routingReference` is provided - this property MUST not be provided.
          example: Great Lion Service
        carrierServiceCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The carrier specific code of the service for which the schedule details are published.

            **Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceName` are blank. If `routingReference` is provided - this property MUST not be provided.
          example: FE1
        universalServiceReference:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          minLength: 8
          maxLength: 8
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.

            **Condition:** If `routingReference` is provided - this property MUST not be provided.
          example: SR12345A
        carrierExportVoyageNumber:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          example: 2103S
          description: |
            The carrier specific identifier of the export Voyage.

            **Condition:** Mandatory if `expectedDepartureDate` or `expectedArrivalAtPlaceOfDeliveryStartDate` and `expectedArrivalAtPlaceOfDeliveryEndDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).

            **Condition:** If `routingReference` is provided - this property MUST not be provided.
          example: 2103N
        routingReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 5000
          description: |
            A reference to a predefined `route` specified in **Commercial Schedules - Point to point**. When specifying this property - it is not needed to specify the following properties:
              - `vessel` which includes:
                - `vesselName`
                - `vesselIMONumber`
              - `carrierServiceName`
              - `carrierServiceCode`
              - `universalServiceReference`
              - `carrierExportVoyageNumber`
              - `universalExportVoyageReference`
              - `expectedDepartureDate`
              - `expectedArrivalAtPlaceOfDeliveryStartDate` or `expectedArrivalAtPlaceOfDeliveryEndDate`
              - the following `locationTypeCode` in `shipmentLocations`:
                - `PRE` (Place of Receipt)
                - `POL` (Port of Loading)
                - `POD` (Port of Discharge)
                - `PDE` (Place of Delivery)
          example: Route123
        declaredValue:
          type: number
          format: float
          minimum: 0
          description: |
            The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and "Ad Valorem" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.
          example: 1231.1
        declaredValueCurrency:
          type: string
          pattern: ^[A-Z]{3}$
          minLength: 3
          maxLength: 3
          description: |
            The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).

            **Condition:** Mandatory if `declaredValue` is provided. If `declaredValue` is not provided, this field must be empty.
          example: DKK
        carrierCode:
          type: string
          pattern: ^\S+$
          maxLength: 4
          description: |
            The `SCAC` code (provided by [NMFTA](https://nmfta.org/scac/)) or `SMDG` code (provided by [SMDG](https://smdg.org/documents/smdg-code-lists/smdg-liner-code-list/)) of the carrier the booking request is intended for. `carrierCodeListProvider` defines which list the `carrierCode` is based upon.
          example: MMCU
        carrierCodeListProvider:
          type: string
          description: |
            The code list provider for the `carrierCode`. Possible values are:
            - `SMDG` (Ship Message Design Group)
            - `NMFTA` (National Motor Freight Traffic Association)
          enum:
            - SMDG
            - NMFTA
          example: NMFTA
        isPartialLoadAllowed:
          type: boolean
          description: |
            Indicates whether the shipper agrees to load part of the shipment in case not all of the cargo is delivered within cut-off.
            
            **Note:** The carrier is not liable in case unable to follow the customer's instructions due to operational constraints. If this value is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        isExportDeclarationRequired:
          type: boolean
          description: |
            Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.

            **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        exportDeclarationReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Reference number assigned to an Export declaration typically submitted by the exporter (or the freight forwarder on behalf of the exporter) that provides detailed information about the goods being exported. It serves as a record for the exporting country's government and is used for statistical, regulatory, and compliance purposes. The export declaration must typically be submitted to the relevant customs authorities before the goods leave the exporting country.
          example: ABC123123
        expectedDepartureDate:
          type: string
          format: date
          description: |
            The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedArrivalAtPlaceOfDeliveryDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-17'
        expectedArrivalAtPlaceOfDeliveryStartDate:
          type: string
          format: date
          description: |
            The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at `Place Of Delivery`.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-17'
        expectedArrivalAtPlaceOfDeliveryEndDate:
          type: string
          format: date
          description: |
            The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at `Place Of Delivery`.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-19'
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the `Transport Document`. Possible values are:
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique reference allocated by the shipping line to the `Transport Document` that the booking concerns.
          example: reserved-HHL123
        bookingChannelReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other.
            
            **Condition:** a booking channel is being used
          example: Inttra reference
        incoTerms:
          type: string
          maxLength: 3
          description: |
            Transport obligations, costs and risks as agreed between buyer and seller as defined by [Incoterms Rules](https://iccwbo.org/business-solutions/incoterms-rules/).
          example: FCA
        isEquipmentSubstitutionAllowed:
          type: boolean
          description: |
            Indicates if an alternate equipment type can be provided by the carrier.
          example: true
        invoicePayableAt:
          $ref: '#/components/schemas/InvoicePayableAt'
        placeOfBLIssue:
          $ref: '#/components/schemas/PlaceOfBLIssue'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/ReferenceShipper'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
        documentParties:
          $ref: '#/components/schemas/DocumentPartiesReq'
        partyContactDetails:
          type: array
          description: |
            The contact details of the person(s) to contact in relation to the **Booking** (changes, notifications etc.) 
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        shipmentLocations:
          type: array
          minItems: 1
          description: |
            A list of `Shipment Locations`
          items:
            $ref: '#/components/schemas/ShipmentLocation'
        requestedEquipments:
          type: array
          minItems: 1
          description: |
            List of `Requested Equipments`. Multiple containers can be requested within the same booking. For each Requested Equipment object with 2 or more units, it is a condition that the commodity (or list of commodities) defined within the same Requested Equipment object is the same for each requested unit.

            **Example:** 2 x 20' containing 50% shoes and 50% t-shirts can be requested within the same Requested Equipment object only if each 20' will contain 50% shoes and 50% t-shirts. If 1 x 20' will contain 100% shoes and the other 20' will be 100% t-shirts, 2 separate Requested Equipment objects must be defined.
          items:
            $ref: '#/components/schemas/RequestedEquipmentShipper'
      required:
        - receiptTypeAtOrigin
        - deliveryTypeAtDestination
        - cargoMovementTypeAtOrigin
        - cargoMovementTypeAtDestination
        - isEquipmentSubstitutionAllowed
        - shipmentLocations
        - requestedEquipments
        - documentParties

    DocumentPartiesReq:
      type: object
      title: Document Parties (Shipper)
      description: |
        All `Parties` with associated roles.
      properties:
        bookingAgent:
          $ref: '#/components/schemas/BookingAgent'
        shipper:
          $ref: '#/components/schemas/Shipper'
        consignee:
          $ref: '#/components/schemas/Consignee'
        serviceContractOwner:
          $ref: '#/components/schemas/ServiceContractOwner'
        carrierBookingOffice:
          $ref: '#/components/schemas/CarrierBookingOffice'
        other:
          type: array
          description: 'A list of document parties that can be optionally provided at booking stage.'
          items:
            $ref: '#/components/schemas/OtherDocumentParty'
      required:
        - bookingAgent

    ###############
    # Fetch Booking
    ###############
    Booking:
      type: object
      title: Booking
      properties:
        carrierBookingRequestReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 100
          description: |
            A reference to the booking during the booking request phase.

            **Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided
          example: 24595eb0-5cfc-4381-9c3a-cedc1975e9aa
        carrierBookingReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The `carrierBookingReference` if know. Often this will not be known until the booking has been confirmed. Is available during a booking amendment.

            **Condition:** `carrierBookingRequestReference` and/or `carrierBookingReference` must be provided
          example: ABC709951
        bookingStatus:
          type: string
          maxLength: 50
          description: |
            The status of the `Booking`. Possible values are:
            - `RECEIVED` (Booking request has been received)
            - `PENDING_UPDATE` (An update is required to the Booking)
            - `UPDATE_RECEIVED` (An update has been received and is awaiting to be processed)
            - `CONFIRMED` (Booking has been Confirmed)
            - `PENDING_AMENDMENT` (An amendment is required to the Booking)
            - `REJECTED` (Booking discontinued by carrier before it has been Confirmed)
            - `DECLINED` (Booking discontinued by carrier after it has been Confirmed)
            - `CANCELLED` (Booking discontinued by consumer)
            - `COMPLETED` (The Transport Document this Booking is connected to has been Surrendered for Delivery)
          example: RECEIVED
        amendedBookingStatus:
          type: string
          maxLength: 50
          description: |
            The status of latest amendment added to the `Booking`. If no amendment has been requested - then this field is empty. Possible values are:
            - `AMENDMENT_RECEIVED` (An amendment has been received and is awaiting to be processed)
            - `AMENDMENT_CONFIRMED` (Amendment is confirmed)
            - `AMENDMENT_DECLINED` (Amendment discontinued by provider)
            - `AMENDMENT_CANCELLED` (Amendment discontinued by consumer)
          example: AMENDMENT_RECEIVED
        bookingCancellationStatus:
          type: string
          maxLength: 50
          description: |
            The status of the latest booking cancellation. If no cancellation has been requested - then this property is empty. Possible values are:
            - `CANCELLATION_RECEIVED` (A request to cancel a Confirmed Booking has been received and is awaiting to be processed)
            - `CANCELLATION_DECLINED` (Cancellation of the Confirmed Booking has been declined by provider)
            - `CANCELLATION_CONFIRMED` (Cancellation of the Confirmed Booking has been confirmed by provider)
          example: CANCELLATION_RECEIVED
        receiptTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Origin`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        deliveryTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Indicates the type of service offered at `Destination`. The options are:
            - `CY` (Container yard (incl. rail ramp))
            - `SD` (Store Door)
            - `CFS` (Container Freight Station)
          enum:
            - CY
            - SD
            - CFS
          example: CY
        cargoMovementTypeAtOrigin:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **loading** of the cargo into the container. Possible values are:
            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        cargoMovementTypeAtDestination:
          type: string
          maxLength: 3
          description: |
            Refers to the shipment term at the **unloading** of the cargo out of the container. Possible values are:
            - `FCL` (Full Container Load)
            - `LCL` (Less than Container Load)
          example: FCL
        serviceContractReference:
          type: string
          maxLength: 30
          description: |
            Reference number for agreement between shipper and carrier, which optionally includes a certain minimum quantity commitment (usually referred as âMQCâ) of cargo that the shipper commits to over a fixed period, and the carrier commits to a certain rate or rate schedule.
            
            **Condition:** One of `serviceContractReference` or `contractQuotationReference` must be provided, but not both.
          example: HHL51800000
        freightPaymentTermCode:
          type: string
          description: |
            An indicator of whether freight and ancillary fees for the main transport are prepaid (`PRE`) or collect (`COL`). When prepaid the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        originChargesPaymentTerm:
          $ref: '#/components/schemas/OriginChargesPaymentTerm'
        destinationChargesPaymentTerm:
          $ref: '#/components/schemas/DestinationChargesPaymentTerm'
        contractQuotationReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Information provided by the shipper to identify whether pricing for the shipment has been agreed via a contract or a quotation reference.

            **Condition:** One of `contractQuotationReference` or `serviceContractReference` must be provided, but not both.
          example: HHL1401
        vessel:
          $ref: '#/components/schemas/Vessel'
        carrierServiceName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The name of a service as specified by the carrier.

            **Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceCode` are blank. If `routingReference` is provided - this property MUST not be provided.
          example: Great Lion Service
        carrierServiceCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The carrier specific code of the service for which the schedule details are published.

            **Condition:** Mandatory if `carrierExportVoyageNumber` is provided and Vessel details or `carrierServiceName` are blank. If `routingReference` is provided - this property MUST not be provided.
          example: FE1
        universalServiceReference:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          maxLength: 8
          minLength: 8
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.

            **Condition:** If `routingReference` is provided - this property MUST not be provided.
          example: SR12345A
        carrierExportVoyageNumber:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          example: 2103S
          description: |
            The carrier specific identifier of the export Voyage.

            **Condition:** Mandatory if `expectedDepartureDate` or `expectedArrivalAtPlaceOfDeliveryStartDate` and `expectedArrivalAtPlaceOfDeliveryEndDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          maxLength: 5
          minLength: 5
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).

            **Condition:** If `routingReference` is provided - this property MUST not be provided.
          example: 2103N
        routingReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 5000
          description: |
            A reference to a predefined `route` specified in **Commercial Schedules - Point to point**. When specifying this property - it is not needed to specify the following properties:
              - `vessel` which includes:
                - `vesselName`
                - `vesselIMONumber`
              - `carrierServiceName`
              - `carrierServiceCode`
              - `universalServiceReference`
              - `carrierExportVoyageNumber`
              - `universalExportVoyageReference`
              - `expectedDepartureDate`
              - `expectedArrivalAtPlaceOfDeliveryStartDate` or `expectedArrivalAtPlaceOfDeliveryEndDate`
              - the following `locationTypeCode` in `shipmentLocations`:
                - `PRE` (Place of Receipt)
                - `POL` (Port of Loading)
                - `POD` (Port of Discharge)
                - `PDE` (Place of Delivery)
          example: Route123
        declaredValue:
          type: number
          format: float
          minimum: 0
          description: |
            The value of the cargo that the shipper declares in order to avoid the carrier's limitation of liability and "Ad Valorem" freight, i.e., freight which is calculated based on the value of the goods declared by the shipper.
          example: 1231.1
        declaredValueCurrency:
          type: string
          pattern: ^[A-Z]{3}$
          minLength: 3
          maxLength: 3
          description: |
            The currency used for the declared value, using the 3-character code defined by [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).

            **Condition:** Mandatory if `declaredValue` is provided. If `declaredValue` is not provided, this field must be empty.
          example: DKK
        carrierCode:
          type: string
          pattern: ^\S+$
          maxLength: 4
          description: |
            The `SCAC` code (provided by [NMFTA](https://nmfta.org/scac/)) or `SMDG` code (provided by [SMDG](https://smdg.org/documents/smdg-code-lists/smdg-liner-code-list/)) of the carrier the booking request is intended for. `carrierCodeListProvider` defines which list the `carrierCode` is based upon.
          example: MMCU
        carrierCodeListProvider:
          type: string
          description: |
            The code list provider for the `carrierCode`. Possible values are:
            - `SMDG` (Ship Message Design Group)
            - `NMFTA` (National Motor Freight Traffic Association)
          enum:
            - SMDG
            - NMFTA
          example: NMFTA
        isPartialLoadAllowed:
          type: boolean
          description: |
            Indicates whether the shipper agrees to load part of the shipment in case not all of the cargo is delivered within cut-off.
            
            **Note:** The carrier is not liable in case unable to follow the customer's instructions due to operational constraints. If this value is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        isExportDeclarationRequired:
          type: boolean
          description: |
            Information provided by the shipper whether an export declaration is required for this particular shipment/commodity/destination.

            **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        exportDeclarationReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Reference number assigned to an Export declaration typically submitted by the exporter (or the freight forwarder on behalf of the exporter) that provides detailed information about the goods being exported. It serves as a record for the exporting country's government and is used for statistical, regulatory, and compliance purposes. The export declaration must typically be submitted to the relevant customs authorities before the goods leave the exporting country.
          example: ABC123123
        expectedDepartureDate:
          type: string
          format: date
          description: |
            The date when the shipment is expected to be loaded on board a vessel as provided by the shipper or its agent.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedArrivalAtPlaceOfDeliveryDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-17'
        expectedArrivalAtPlaceOfDeliveryStartDate:
          type: string
          format: date
          description: |
            The start date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryEndDate`) for when the shipment is expected to arrive at `Place Of Delivery`.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-17'
        expectedArrivalAtPlaceOfDeliveryEndDate:
          type: string
          format: date
          description: |
            The end date (provided as a range together with `expectedArrivalAtPlaceOfDeliveryStartDate`) for when the shipment is expected to arrive at `Place Of Delivery`.
            
            **Condition:** Mandatory if vessel/voyage/service details or `expectedDepartureDate` is not provided. If `routingReference` is provided - this property MUST not be provided.
          example: '2021-05-19'
        transportDocumentTypeCode:
          type: string
          description: |
            Specifies the type of the `Transport Document`. Possible values are:
            - `BOL` (Bill of Lading)
            - `SWB` (Sea Waybill)
          enum:
            - BOL
            - SWB
          example: SWB
        transportDocumentReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            A unique reference allocated by the shipping line to the `Transport Document` that the booking concerns.
          example: reserved-HHL123
        bookingChannelReference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 20
          description: |
            Identification number provided by the platform/channel used for booking request/confirmation, ex: Inttra booking reference, or GTNexus, other.
            
            **Condition:** a booking channel is being used
          example: Inttra reference
        incoTerms:
          type: string
          maxLength: 3
          description: |
            Transport obligations, costs and risks as agreed between buyer and seller as defined by [Incoterms Rules](https://iccwbo.org/business-solutions/incoterms-rules/).
          example: FCA
        isEquipmentSubstitutionAllowed:
          type: boolean
          description: |
            Indicates if an alternate equipment type can be provided by the carrier.
          example: true
        termsAndConditions:
          type: string
          maxLength: 50000
          description: |
            Carrier terms and conditions of transport.
          example: Any reference in...
        invoicePayableAt:
          $ref: '#/components/schemas/InvoicePayableAt'
        placeOfBLIssue:
          $ref: '#/components/schemas/PlaceOfBLIssue'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
        documentParties:
          $ref: '#/components/schemas/DocumentParties'
        partyContactDetails:
          type: array
          description: |
            The contact details of the person(s) to contact in relation to the **Booking** (changes, notifications etc.) 
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        shipmentLocations:
          type: array
          minItems: 1
          description: |
            A list of `Shipment Locations`
          items:
            $ref: '#/components/schemas/ShipmentLocation'
        requestedEquipments:
          type: array
          minItems: 1
          description: |
            List of `Requested Equipments`. Multiple containers can be requested within the same booking. For each Requested Equipment object with 2 or more units, it is a condition that the commodity (or list of commodities) defined within the same Requested Equipment object is the same for each requested unit.

            **Example:** 2 x 20' containing 50% shoes and 50% t-shirts can be requested within the same Requested Equipment object only if each 20' will contain 50% shoes and 50% t-shirts. If 1 x 20' will contain 100% shoes and the other 20' will be 100% t-shirts, 2 separate Requested Equipment objects must be defined.
          items:
            $ref: '#/components/schemas/RequestedEquipment'
        confirmedEquipments:
          type: array
          description: |
            A list of `Confirmed Equipments`

            **Condition:** Mandatory and non-empty for a `CONFIRMED` Booking
          items:
            $ref: '#/components/schemas/ConfirmedEquipment'
        transportPlan:
          type: array
          description: |
            A list of `Transport` objects (legs) describing the entire transport plan including transshipments.

            **Condition:** Mandatory and non-empty for a `CONFIRMED` Booking
          items:
            $ref: '#/components/schemas/Transport'
        shipmentCutOffTimes:
          type: array
          description: |
            A list of cut-off times provided by the carrier in the booking confirmation. A cut-off time indicates the latest deadline within which a task must be completed. The confirmed schedule cannot be guaranteed if a cut-off time is missed. Customs brokers may set additional cut-off times to receive the export customs documentation, which is not included in the shipment cut-off times of a carrier booking.

            **Condition:** Mandatory and non-empty for a `CONFIRMED` Booking
          items:
            $ref: '#/components/schemas/ShipmentCutOffTime'
        advanceManifestFilings:
          type: array
          description: |
            A list of `Advance Manifest Filings` provided by the carrier
          items:
            $ref: '#/components/schemas/AdvanceManifestFiling'
        charges:
          type: array
          description: |
            A list of `Charges`
          items:
            $ref: '#/components/schemas/Charge'
        carrierClauses:
          type: array
          description: |
            Additional clauses for a specific shipment added by the carrier to the Bill of Lading, subject to local rules / guidelines or certain mandatory information required to be shared with the customer.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 20000
            description: |
              The content of the clause.
            example: It is not allowed to...
        feedbacks:
          type: array
          description: |
            Feedback that can be provided includes, but is not limited to:
            - unsupported properties
            - changed values
            - removed properties
            - general information
          items:
            $ref: '#/components/schemas/Feedback'
      required:
        - bookingStatus
        - receiptTypeAtOrigin
        - deliveryTypeAtDestination
        - cargoMovementTypeAtOrigin
        - cargoMovementTypeAtDestination
        - isEquipmentSubstitutionAllowed
        - shipmentLocations
        - requestedEquipments
        - documentParties

    InvoicePayableAt:
      title: Invoice Payable At
      type: object
      description: |
        Location where payment of ocean freight and charges for the main transport will take place by the customer.

        The location must be provided as a `UN Location Code`
      properties:
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          example: NLAMS
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
      required:
        - UNLocationCode
    PlaceOfBLIssue:
      title: Place of B/L Issue
      type: object
      description: |
        An object to capture where the original Transport Document (`Bill of Lading`) will be issued.

        **Condition:** The location can be specified as one of `UN Location Code` or `CountryCode`, but not both.
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
      oneOf:
        - type: object
          title: UN Location Code
          properties:
            UNLocationCode:
              type: string
              pattern: ^[A-Z]{2}[A-Z2-9]{3}$
              minLength: 5
              maxLength: 5
              example: NLAMS
              description: |
                The UN Location code specifying where the place is located. The pattern used must be

                - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
                - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

                More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          required:
            - UNLocationCode
        - type: object
          title: Country Code
          properties:
            countryCode:
              type: string
              pattern: ^[A-Z]{2}$
              minLength: 2
              maxLength: 2
              description: |
                The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
              example: DK
          required:
            - countryCode

    DocumentParties:
      type: object
      title: Document Parties
      description: |
        All `Parties` with associated roles.
      properties:
        bookingAgent:
          $ref: '#/components/schemas/BookingAgent'
        shipper:
          $ref: '#/components/schemas/Shipper'
        consignee:
          $ref: '#/components/schemas/Consignee'
        serviceContractOwner:
          $ref: '#/components/schemas/ServiceContractOwner'
        carrierBookingOffice:
          $ref: '#/components/schemas/CarrierBookingOffice'
        other:
          type: array
          description: 'A list of document parties that can be optionally provided at booking stage.'
          items:
            $ref: '#/components/schemas/OtherDocumentParty'

    ########################
    # Active Reefer Settings
    ########################
    ActiveReeferSettings:
      type: object
      title: Active Reefer Settings
      description: |
        The specifications for a Reefer equipment.

        **Condition:** Only applicable when `isNonOperatingReefer` is set to `false`
      properties:
        temperatureSetpoint:
          type: number
          format: float
          description: |
            Target value of the temperature for the Reefer based on the cargo requirement.
          example: -15
        temperatureUnit:
          type: string
          description: |
            The unit for temperature in Celsius or Fahrenheit
            - `CEL` (Celsius)
            - `FAH` (Fahrenheit)

            **Condition:** Mandatory if `temperatureSetpoint` is provided. If `temperatureSetpoint` is not provided, this field must be empty.
          enum:
            - CEL
            - FAH
          example: CEL
        o2Setpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere O<sub>2</sub> target value
          example: 25
        co2Setpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere CO<sub>2</sub> target value
          example: 25
        humiditySetpoint:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: |
            The percentage of the controlled atmosphere humidity target value
          example: 95.6
        airExchangeSetpoint:
          type: number
          format: float
          minimum: 0
          description: |
            Target value for the air exchange rate which is the rate at which outdoor air replaces indoor air within a Reefer container
          example: 15.4
        airExchangeUnit:
          type: string
          description: |
            The unit for `airExchange` in metrics- or imperial- units per hour
            - `MQH` (Cubic metre per hour)
            - `FQH` (Cubic foot per hour)

            **Condition:** Mandatory if `airExchange` is provided. If `airExchange` is not provided, this field must be empty.
          enum:
            - MQH
            - FQH
          example: MQH
        isVentilationOpen:
          type: boolean
          description: |
            If `true` the ventilation orifice is `Open` - if `false` the ventilation orifice is `closed`
          example: true
        isDrainholesOpen:
          type: boolean
          description: |
            Is drain holes open on the container
          example: true
        isBulbMode:
          type: boolean
          description: |
            Is special container setting for handling flower bulbs active
          example: true
        isColdTreatmentRequired:
          type: boolean
          description: |
            Indicator whether cargo requires cold treatment prior to loading at origin or during transit, but prior arrival at POD
          example: true
        isControlledAtmosphereRequired:
          type: boolean
          description: |
            Indicator of whether cargo requires Controlled Atmosphere.
          example: true
        isPreCoolingRequired:
          type: boolean
          description: |
            Indicator whether reefer container should be pre-cooled to the temperature setting required at time of release from depot
          example: true
        isGeneratorSetRequired:
          type: boolean
          description: |
            Indicator whether reefer container should have a generator set attached at time of release from depot
          example: true
      required:
        - temperatureSetpoint
        - temperatureUnit

    ##################
    # Document Parties
    ##################
    PartyAddress:
      type: object
      title: Party Address
      description: |
        An object for storing address related information
      properties:
        street:
          type: string
          maxLength: 70
          description: The name of the street of the party's address.
          example: Ruijggoordweg
        streetNumber:
          type: string
          maxLength: 50
          description: The number of the street of the party's address.
          example: '100'
        floor:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The floor of the party's street number.
          example: 2nd
        postCode:
          type: string
          maxLength: 10
          description: The post code of the party's address.
          example: 1047 HM
        POBox:
          type: string
          maxLength: 20
          description: A numbered box at a post office where a person or business can have mail or parcels delivered.
          example: '123'
        city:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The city name of the party's address.
          example: Amsterdam
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the carrier booking office is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        stateRegion:
          type: string
          maxLength: 65
          description: The state/region of the party's address.
          example: North Holland
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: NL
      required:
        - street
        - city
        - countryCode
    OtherDocumentParty:
      type: object
      title: Other Document Party
      description: |
        A list of document parties that can be optionally provided at booking stage
      properties:
        party:
          $ref: '#/components/schemas/Party'
        partyFunction:
          type: string
          maxLength: 3
          description: |
            Specifies the role of the party in a given context. Possible values are:

            - `DDR` (Consignor's freight forwarder)
            - `DDS` (Consignee's freight forwarder)
            - `COW` (Invoice payer on behalf of the consignor (shipper))
            - `COX` (Invoice payer on behalf of the consignee)
            - `N1` (First Notify Party)
            - `N2` (Second Notify Party)
            - `NI` (Other Notify Party)
            - `NAC` (Named Account Customer)
          example: DDS
      required:
        - party
        - partyFunction

    BookingAgent:
      type: object
      title: Booking Agent
      description: |
        The party placing the booking request on behalf of the customer.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `Booking Agent`.
          example: HHL007
      required:
        - partyName

    Shipper:
      type: object
      title: Shipper
      description: |
        The party by whom or in whose name or on whose behalf a contract of carriage of goods by sea has been concluded with a carrier, or the party by whom or in whose name, or on whose behalf, the goods are actually delivered to the carrier in relation to the contract of carriage by sea.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `Shipper`.
          example: HHL007
        purchaseOrderReferences:
          type: array
          description: |
            A list of `Purchase Order Reference`s linked to the `Shipper`.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 35
            description: |
              A purchase order reference linked to the `Shipper`.
            example: HHL007
      required:
        - partyName

    Consignee:
      type: object
      title: Consignee
      description: |
        The party to which goods are consigned in the Master Bill of Lading.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `Consignee`.
          example: HHL007
        purchaseOrderReferences:
          type: array
          description: |
            A list of `Purchase Order Reference`s linked to the `Consignee`.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 35
            description: |
              A purchase order reference linked to the `Consignee`.
            example: HHL007
      required:
        - partyName

    ServiceContractOwner:
      type: object
      title: Service Contract Owner
      description: |
        The party signing the service contract with the carrier.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `Service Contract Owner`.
          example: HHL007
      required:
        - partyName

    CarrierBookingOffice:
      type: object
      title: Carrier Booking Office
      description: |
        The carrier office responsible for processing the booking.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the carrier booking office is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        address:
          $ref: '#/components/schemas/Address'
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
      required:
        - partyName
        - UNLocationCode

    Party:
      type: object
      title: Party
      description: |
        Refers to a company or a legal entity.
      properties:
        partyName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name of the party.
          example: IKEA Denmark
        address:
          $ref: '#/components/schemas/PartyAddress'
        identifyingCodes:
          type: array
          items:
            $ref: '#/components/schemas/IdentifyingCode'
        taxLegalReferences:
          description: |
            A list of `Tax References` for a `Party`
          type: array
          items:
            $ref: '#/components/schemas/TaxLegalReference'
        partyContactDetails:
          type: array
          minItems: 1
          description: |
            A list of contact details
          items:
            $ref: '#/components/schemas/PartyContactDetail'
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            A reference linked to the `Party`.
          example: HHL007
      required:
        - partyName

    PartyContactDetail:
      type: object
      title: Party Contact Detail
      description: |
        The contact details of the person to contact. It is mandatory to provide either `phone` and/or `email` along with the `name`, both can be provided.
      example:
        name: Henrik
        phone: +45 51801234
      properties:
        name:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Name of the contact
          example: Henrik
      anyOf:
        - type: object
          title: Phone required
          description: |
            `Phone` is mandatory to provide
          properties:
            phone:
              type: string
              pattern: ^\S(?:.*\S)?$
              maxLength: 30
              description: |
                Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
              example: +45 70262970
          required:
            - phone
        - type: object
          title: Email required
          description: |
            `Email` is mandatory to provide
          properties:
            email:
              type: string
              pattern: ^.+@\S+$
              maxLength: 100
              description: |
                `E-mail` address to be used
              example: info@dcsa.org
          required:
            - email
      required:
        - name
    IdentifyingCode:
      type: object
      title: Identifying Code
      properties:
        codeListProvider:
          type: string
          maxLength: 100
          description: |
            A list of codes identifying a party. Possible values are:
            - `WAVE` (Wave)
            - `CARX` (CargoX)
            - `ESSD` (EssDOCS)
            - `IDT` (ICE Digital Trade)
            - `BOLE` (Bolero)
            - `EDOX` (EdoxOnline)
            - `IQAX` (IQAX)
            - `SECR` (Secro)
            - `TRGO` (TradeGO)
            - `ETEU` (eTEU)
            - `TRAC` (Enigio trace:original)
            - `BRIT` (BRITC eBL)
            - `GSBN` (Global Shipping Business Network)
            - `WISE` (WiseTech)
            - `GLEIF` (Global Legal Entity Identifier Foundation)
            - `W3C` (World Wide Web Consortium)
            - `DNB` (Dun and Bradstreet)
            - `FMC` (Federal Maritime Commission)
            - `DCSA` (Digital Container Shipping Association)
            - `ZZZ` (Mutually defined)
          example: W3C
        partyCode:
          type: string
          maxLength: 150
          description: |
            Code to identify the party as provided by the code list provider
          example: MSK
        codeListName:
          type: string
          maxLength: 100
          description: |
            The name of the code list, code generation mechanism or code authority for the `partyCode`. Example values could be:
            - `DID` (Decentralized Identifier) for `codeListProvider` `W3C`
            - `LEI` (Legal Entity Identifier) for `codeListProvider` `GLEIF`
            - `DUNS` (Data Universal Numbering System) for `codeListProvider` `DNB`
          example: DID
      required:
        - codeListProvider
        - partyCode
    TaxLegalReference:
      type: object
      title: Tax & Legal Reference
      description: |
        Reference that uniquely identifies a party for tax and/or legal purposes in accordance with the relevant jurisdiction.

        A small list of **potential** examples:

        | Type  | Country | Description |
        |-------|:-------:|-------------|
        |PAN|IN|Goods and Services Tax Identification Number in India|
        |GSTIN|IN|Goods and Services Tax Identification Number in India|
        |IEC|IN|Importer-Exported Code in India|
        |RUC|EC|Registro Ãnico del Contribuyente in Ecuador|
        |RUC|PE|Registro Ãnico del Contribuyente in Peru|
        |NIF|MG|NumÃ©ro d'Identification Fiscal in Madagascar|
        |NIF|DZ|NumÃ©ro d'Identification Fiscal in Algeria|
      properties:
        type:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The reference type code as defined by the relevant tax and/or legal authority.
          example: PAN
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: IN
        value:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            The value of the `taxLegalReference`
          example: AAAAA0000A
      required:
        - type
        - countryCode
        - value

    ###########
    # Reference
    ###########
    ReferenceShipper:
      type: object
      title: Reference (Shipper)
      description: |
        References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      properties:
        type:
          type: string
          maxLength: 3
          description: |
            The reference type codes defined by DCSA. Possible values are:
            - `CR` (Customer's Reference)
            - `AKG` (Vehicle Identification Number)
            - `AEF` (Customer Load Reference)
          example: CR
        value:
          type: string
          maxLength: 35
          pattern: ^\S(?:.*\S)?$
          description: |
            The value of the reference. 
          example: HHL00103004
      required:
        - type
        - value

    Reference:
      type: object
      title: Reference
      description: |
        References provided by the shipper or freight forwarder at the time of `Booking` or at the time of providing `Shipping Instructions`. Carriers share it back when providing `Track & Trace` event updates, some are also printed on the B/L. Customers can use these references to track shipments in their internal systems.
      properties:
        type:
          type: string
          maxLength: 3
          description: |
            The reference type codes defined by DCSA. Possible values are:
            - `CR` (Customer's Reference)
            - `ECR` (Empty container release reference)
            - `AKG` (Vehicle Identification Number)
            - `AEF` (Customer Load Reference)
          example: CR
        value:
          type: string
          maxLength: 35
          pattern: ^\S(?:.*\S)?$
          description: |
            The value of the reference. 
          example: HHL00103004
      required:
        - type
        - value

    ##################
    # Customs Reference
    ##################
    CustomsReference:
      type: object
      title: Customs Reference
      description: |
        Reference associated with customs and/or excise purposes required by the relevant authorities for the import, export, or transit of the goods.

        A small list of **potential** examples:

        | Type  | Country | Description |
        |-------|:-------:|-------------|
        |ACID|EG|Advance Cargo Information Declaration in Egypt|
        |CERS|CA|Canadian Export Reporting System|
        |ITN|US|Internal Transaction Number in US|
        |PEB|ID|PEB reference number|
        |CSN|IN|Cargo Summary Notification (CSN)|
      properties:
        type:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The reference type code as defined in the relevant customs jurisdiction.
          example: ACID
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: EG
        values:
          type: array
          minItems: 1
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 35
            description: |
              The value of the `customsReference`
            example: '4988470982020120017'
      required:
        - type
        - countryCode
        - values

    ###################
    # Shipment Location
    ###################
    ShipmentLocation:
      type: object
      title: Shipment Location
      description: |
        Maps the relationship between `Shipment` and `Location`, e.g., the `Place of Receipt` and the `Place of Delivery` for a specific shipment. This is a reusable object between `Booking` and `Transport Document`

        **Condition:** In case `routingReference` is provided - then `PRE` (Place of Receipt), `POL` (Port of Loading), `POD` (Port of Discharge) and `PDE` (Place of Delivery) MUST not be provided.
      properties:
        location:
          $ref: '#/components/schemas/Location'
        locationTypeCode:
          type: string
          maxLength: 3
          description: |
            Links to the Location Type Code defined by DCSA. Possible values are:
            - `PRE` (Place of Receipt)
            - `POL` (Port of Loading)
            - `POD` (Port of Discharge)
            - `PDE` (Place of Delivery)
            - `PCF` (Pre-carriage From)
            - `OIR` (Onward In-land Routing)
            - `ORI` (Origin of goods)
            - `IEL` (Container intermediate export stop off location)
            - `PTP` (Prohibited transshipment port)
            - `RTP` (Requested transshipment port)
            - `FCD` (Full container drop-off location)
          example: PRE
      required:
        - location
        - locationTypeCode

    Location:
      type: object
      title: Location
      description: |
        The location can be specified using **any** of the nested structures:
        - `address` (used to specify the location via an Address)
        - `UNLocationCode`
        - `facility` (used to specify a location using a `facilityCode` and a `facilityCodeListProvider`)
        - `geoCoordinate` (used to specify a location using `latitude` and `longitude`)

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
      example:
        locationName: CMP Container Terminal Copenhagen
        UNLocationCode: DKCPH
        facility:
          facilityCode: CMPDK
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'

    ######################
    # Requested Equipments
    ######################
    RequestedEquipment:
      type: object
      title: Requested Equipment
      description: |
        If needed - it is **only** possible to specify a single Reefer setting. If multiple settings are required for the same `equipmentSizeType` then multiple `requestedEquipment` should be specified (one for each Reefer setting).
      properties:
        ISOEquipmentCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 4
          description: |
            Unique code for the different equipment size and type used to transport commodities. The code can refer to one of ISO size type (e.g. 22G1) or ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.
          example: 22RT
        units:
          type: integer
          format: int32
          minimum: 1
          description: |
            Number of requested equipment units.
          example: 3
        containerPositionings:
          type: array
          description: |
            A list of date and time and locations of the customer facility where the container(s) will be loaded. If multiple Container positioning locations (`CPO`) are provided (multi-stop), the first location is where the empty container will be stuffed first. The order in which the `CPO` locations should be visited is implicitly defined by the shipper based on the date and time provided per location.
            
            **Condition:** Only applicable to carrier haulage service at origin (`Receipt type at origin = 'SD'`). 
          items:
            $ref: '#/components/schemas/ContainerPositioning'
        emptyContainerPickup:
          $ref: '#/components/schemas/EmptyContainerPickup'
        equipmentReferences:
          description: |
            A list of equipments to be used by the shipper if known at the time of booking
          type: array
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 11
            description: |
              The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.

              According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).

              If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
            example: APZU4812090
        tareWeight:
          $ref: '#/components/schemas/TareWeight'
        cargoGrossWeight:
            $ref: '#/components/schemas/CargoGrossWeightReq'
        isShipperOwned:
          type: boolean
          description: |
            Indicates whether the container is shipper owned (`SOC`).
          example: true
        isNonOperatingReefer:
          type: boolean
          description: |
            If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.

            **Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.
          example: false
        activeReeferSettings:
          $ref: '#/components/schemas/ActiveReeferSettings'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
        commodities:
          type: array
          description: |
            A list of `Commodities`
          items:
            $ref: '#/components/schemas/Commodity'
      required:
        - ISOEquipmentCode
        - units
        - isShipperOwned

    RequestedEquipmentShipper:
      type: object
      title: Requested Equipment (Shipper)
      description: |
        If needed - it is **only** possible to specify a single Reefer setting. If multiple settings are required for the same `equipmentSizeType` then multiple `requestedEquipment` should be specified (one for each Reefer setting).
      properties:
        ISOEquipmentCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 4
          description: |
            Unique code for the different equipment size and type used to transport commodities. The code can refer to one of ISO size type (e.g. 22G1) or ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.
          example: 22RT
        units:
          type: integer
          format: int32
          minimum: 1
          description: |
            Number of requested equipment units.
          example: 3
        containerPositionings:
          type: array
          description: |
            A list of date and time and locations of the customer facility where the container(s) will be loaded. If multiple Container positioning locations (`CPO`) are provided (multi-stop), the first location is where the empty container will be stuffed first. The order in which the `CPO` locations should be visited is implicitly defined by the shipper based on the date and time provided per location.
            
            **Condition:** Only applicable to carrier haulage service at origin (`Receipt type at origin = 'SD'`). 
          items:
            $ref: '#/components/schemas/ContainerPositioning'
        emptyContainerPickup:
          $ref: '#/components/schemas/EmptyContainerPickup'
        equipmentReferences:
          description: |
            A list of equipments to be used by the shipper if known at the time of booking
          type: array
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 11
            description: |
              The unique identifier for the equipment, which should follow the BIC ISO Container Identification Number where possible.

              According to [ISO 6346](https://www.iso.org/standard/83558.html), a container identification code consists of a 4-letter prefix and a 7-digit number (composed of a 3-letter owner code, a category identifier, a serial number, and a check-digit).

              If a container does not comply with [ISO 6346](https://www.iso.org/standard/83558.html), it is suggested to follow [Recommendation #2: Containers with non-ISO identification](https://smdg.org/documents/smdg-recommendations) from SMDG.
            example: APZU4812090
        tareWeight:
          $ref: '#/components/schemas/TareWeight'
        cargoGrossWeight:
            $ref: '#/components/schemas/CargoGrossWeightReq'
        isShipperOwned:
          type: boolean
          description: |
            Indicates whether the container is shipper owned (`SOC`).
          example: true
        isNonOperatingReefer:
          type: boolean
          description: |
            If the equipment is a Reefer Container then setting this attribute will indicate that the container should be treated as a `DRY` container.

            **Condition:** Only applicable if `ISOEquipmentCode` shows a Reefer type.
          example: false
        activeReeferSettings:
          $ref: '#/components/schemas/ActiveReeferSettings'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/ReferenceShipper'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
        commodities:
          type: array
          description: |
            A list of `Commodities`
          items:
            $ref: '#/components/schemas/CommodityShipper'
      required:
        - ISOEquipmentCode
        - units
        - isShipperOwned

    TareWeight:
      type: object
      title: Tare Weight
      description: |
        The weight of an empty container (gross container weight).

        **Condition:** In case of Shipper Owned Containers (`SOC`) this is a required property
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The weight of an empty container (gross container weight).
          example: 4000
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit

    ContainerPositioning:
      type: object
      title: Container Positioning
      description: |
        An object to capture the `Location` together with an optional `Date and Time`.
      properties:
        dateTime:
          type: string
          format: date-time
          description: |
            The date and time requested by the shipper for the positioning of the container(s) at the Container positioning location (`CPO`), if provided, or the Place of Receipt (`PRE`) if `CPO` location is not provided.
          example: '2024-09-04T09:41:00Z'
        location:
          $ref: '#/components/schemas/ContainerPositioningLocation'
      required:
        - location

    ContainerPositioningEstimated:
      type: object
      title: Container Positioning Estimated
      description: |
        An object to capture the `Location` together with an optional `Date and Time`.
      properties:
        estimatedDateTime:
          type: string
          format: date-time
          description: |
            The estimated date and time for the positioning of the container(s) at the `Container Positioning Location` (CPO), if provided, or the `Place of Receipt` (PRE) if CPO location is not provided.
            
            **Condition:** Only applicable to carrier haulage service at origin (`Receipt type at origin = 'SD'`).
          example: '2024-09-04T09:41:00Z'
        location:
          $ref: '#/components/schemas/ContainerPositioningLocation'
      required:
        - location
    ContainerPositioningLocation:
      type: object
      title: Container Positioning Location
      description: |
        An object to capture the `Container Positioning Location`.

        The location of the customer facility where the container(s) will be loaded.
        
        **Condition:** Only applicable to carrier haulage service at origin (`Receipt type at origin = 'SD'`).

        The location can be specified in **any** of the following ways: `Address`, `Facility`, `UN Location Code` or a `GeoCoordinate`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
      example:
        locationName: Shanghai Shengdong International Container Terminal
        UNLocationCode: CNSGH
        facility:
          facilityCode: SHENG
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Shanghai Shengdong International Container Terminal
          maxLength: 100
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'

    EmptyContainerDepotReleaseLocation:
      type: object
      title: Empty Container Depot Release Location
      description: |
        An object to capture the `Empty Container Depot Release Location`.

        The location of the depot from which the empty container(s) will be released from
        
        The location can be specified in **any** of the following ways: `Address`, `Facility`, `UN Location Code` or a `GeoCoordinate`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
      example:
        locationName: Shanghai Shengdong International Container Terminal
        UNLocationCode: CNSGH
        facility:
          facilityCode: SHENG
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Shanghai Shengdong International Container Terminal
          maxLength: 100
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
        geoCoordinate:
          $ref: '#/components/schemas/GeoCoordinate'

    ###########
    # Commodity
    ###########
    CommodityShipper:
      type: object
      title: Commodity (Shipper)
      description: |
        Type of goods, defined by its commodity type
      properties:
        commodityType:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 550
          description: |
            High-level description of goods to be shipped which allow the carrier to confirm acceptance and commercial terms. To be replaced by "description of goods" upon submission of `Shipping Instructions`
          example: Mobile phones
        HSCodes:
          type: array
          description: |
            A list of `HS Codes` that apply to this `commodity`
          items:
            type: string
            pattern: ^\d{6,10}$
            minLength: 6
            maxLength: 10
            description: |
              Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.

              More information can be found here: [HS Nomenclature](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools).
            example: '851713'
        nationalCommodityCodes:
          type: array
          description: |
            A list of `National Commodity Codes` that apply to this `commodity`
          items:
            $ref: '#/components/schemas/NationalCommodityCode'
        cargoGrossWeight:
          $ref: '#/components/schemas/CargoGrossWeight'
        cargoGrossVolume:
          $ref: '#/components/schemas/CargoGrossVolume'
        cargoNetWeight:
          $ref: '#/components/schemas/CargoNetWeight'
        cargoNetVolume:
          $ref: '#/components/schemas/CargoNetVolume'
        exportLicense:
          $ref: '#/components/schemas/ExportLicense'
        importLicense:
          $ref: '#/components/schemas/ImportLicense'
        outerPackaging:
          $ref: '#/components/schemas/OuterPackaging'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/ReferenceShipper'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - commodityType
    Commodity:
      type: object
      title: Commodity
      description: |
        Type of goods, defined by its commodity type
      properties:
        commoditySubReference:
          type: string
          maxLength: 100
          pattern: ^\S(?:.*\S)?$
          description: |
            A unique reference for this commodity object assigned by the carrier in the booking confirmation. The reference must be provided by the shipper as part of the `Shipping Instructions` for the carrier to link the consignment item to this commodity. A commodity reference is only unique in the context of a booking.

            **Condition:** Mandatory to provide for `CONFIRMED` bookings
          example: COM-001
        commodityType:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 550
          description: |
            High-level description of goods to be shipped which allow the carrier to confirm acceptance and commercial terms. To be replaced by "description of goods" upon submission of `Shipping Instructions`
          example: Mobile phones
        HSCodes:
          type: array
          description: |
            A list of `HS Codes` that apply to this `commodity`
          items:
            type: string
            pattern: ^\d{6,10}$
            minLength: 6
            maxLength: 10
            description: |
              Used by customs to classify the product being shipped. The type of HS code depends on country and customs requirements. The code must be at least 6 and at most 10 digits.

              More information can be found here: [HS Nomenclature](https://www.wcoomd.org/en/topics/nomenclature/instrument-and-tools).
            example: '851713'
        nationalCommodityCodes:
          type: array
          description: |
            A list of `National Commodity Codes` that apply to this `commodity`
          items:
            $ref: '#/components/schemas/NationalCommodityCode'
        cargoGrossWeight:
          $ref: '#/components/schemas/CargoGrossWeight'
        cargoGrossVolume:
          $ref: '#/components/schemas/CargoGrossVolume'
        cargoNetWeight:
          $ref: '#/components/schemas/CargoNetWeight'
        cargoNetVolume:
          $ref: '#/components/schemas/CargoNetVolume'
        exportLicense:
          $ref: '#/components/schemas/ExportLicense'
        importLicense:
          $ref: '#/components/schemas/ImportLicense'
        outerPackaging:
          $ref: '#/components/schemas/OuterPackaging'
        references:
          type: array
          description: |
            A list of `References`
          items:
            $ref: '#/components/schemas/Reference'
        customsReferences:
          type: array
          description: |
            A list of `Customs references`
          items:
            $ref: '#/components/schemas/CustomsReference'
      required:
        - commodityType

    ExportLicense:
      type: object
      title: Export License
      description: |
        `Export License` required for this commodity
      properties:
        isRequired:
          type: boolean
          description: |
            Information provided by the shipper to indicate whether an `Export License` or permit is required for this shipment/commodity/destination.
              
            **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Reference number assigned to an `Export License` or permit, which authorizes a business or individual to export specific goods to specific countries under defined conditions. It is a permit that is required when shipping certain restricted or controlled goods, such as military equipment, high-tech items, chemicals, or items subject to international regulations. The `Export License` must be valid at time of departure.
          example: EMC007123
        issueDate:
          type: string
          format: date
          description: |
            Issue date of the `Export License` applicable to the booking.
          example: '2024-09-14'
        expiryDate:
          type: string
          format: date
          description: |
            Expiry date of the `Export License` applicable to the booking.
          example: '2024-09-21'

    ImportLicense:
      type: object
      title: Import License
      description: |
        `Import License` required for this commodity
      properties:
        isRequired:
          type: boolean
          description: |
            Information provided by the shipper to indicate whether an `Import License` or permit is required for this shipment/commodity/destination.
              
            **Note:** If this property is omitted, it may be interpreted differently by different API providers and by the same API provider in different contexts.
          example: true
        reference:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 35
          description: |
            Reference number assigned to an `Import License` or permit, issued by countries exercising import controls that authorizes the importation of the articles stated in the license. The `Import License` must be valid at time of arrival.
          example: EMC007123
        issueDate:
          type: string
          format: date
          description: |
            Issue date of the `Import License` applicable to the booking.
          example: '2024-09-14'
        expiryDate:
          type: string
          format: date
          description: |
            Expiry date of the `Import License` applicable to the booking.
          example: '2024-09-21'

    CargoGrossWeightReq:
      type: object
      title: Cargo Gross Weight (Requested Equipment)
      description: |
        The estimated grand total gross weight of the cargo, including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.

        **Condition:** Mandatory if not provided on `Commodity` level
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The estimated grand total gross weight of the cargo, including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
          example: 36000
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit

    CargoGrossWeight:
      type: object
      title: Cargo Gross Weight
      description: |
        The estimated grand total gross weight of the cargo, including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.

        **Condition:** Mandatory if not provided on `Requested Equipment` level.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The estimated grand total gross weight of the cargo, including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
          example: 36000
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit

    CargoGrossVolume:
      type: object
      title: Cargo Gross Volume
      description: |
        The estimated grand total volume of the cargo.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The estimated grand total volume of the cargo.
          example: 360
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)
          enum:
            - MTQ
            - FTQ
          example: MTQ
      required:
        - value
        - unit

    CargoNetWeight:
      type: object
      title: Cargo Net Weight
      description: |
        The estimated grand total net weight of the cargo, excluding packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The estimated grand total net weight of the cargo, excluding packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
          example: 36000
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit
    
    CargoNetVolume:
      type: object
      title: Cargo Net Volume
      description: |
        The estimated net total volume of the cargo.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The estimated net total volume of the cargo.
          example: 360
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)
          enum:
            - MTQ
            - FTQ
          example: MTQ
      required:
        - value
        - unit

    #########################
    # National Commodity Code
    #########################
    NationalCommodityCode:
      type: object
      title: National Commodity Code
      description: |
        The national commodity classification code linked to a country with a value.

        An example could look like this:

        | Type  | Country | Value |
        |-------|:-------:|-------------|
        |NCM|BR|['1515', '2106', '2507', '2512']|
      properties:
        type:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 10
          description: |
            The national commodity classification code, which can be one of the following values defined by DCSA:
            - `NCM` (Nomenclatura Comum do Mercosul)
            - `HTS` (Harmonized Tariff Schedule)
            - `SCHEDULE_B` ( Schedule B)
            - `TARIC` (Integrated Tariff of the European Communities)
            - `CN` (Combined Nomenclature)
            - `CUS` (Customs Union and Statistics)
          example: NCM
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: BR
        values:
          type: array
          minItems: 1
          description: |
            A list of `national commodity codes` values.
          items:
            type: string
            pattern: ^\S(?:.*\S)?$
            maxLength: 10
            description: |
              The value of the `National Commodity Code`
            example: '1515'
          example:
            - '1515'
            - '2106'
            - '2507'
            - '2512'
      required:
        - type
        - values

    #################
    # Outer Packaging
    #################
    OuterPackaging:
      type: object
      title: Outer Packaging
      description: |
        Object for outer packaging/overpack specification. Examples of overpacks are a number of packages stacked on to a pallet and secured by strapping or placed in a protective outer packaging such as a box or crate to form one unit for the convenience of handling and stowage during transport.

        **Condition:** Mandatory for DG (Dangerous Goods) cargo.
      properties:
        packageCode:
          type: string
          pattern: ^[A-Z0-9]{2}$
          minLength: 2
          maxLength: 2
          description: |
            A code identifying the outer packaging/overpack. `PackageCode` must follow the codes specified in [Recommendation NÂ°21](https://unece.org/trade/uncefact/cl-recommendations)

            **Condition:** only applicable to dangerous goods if the `IMO packaging code` is not available.
          example: 5H
        imoPackagingCode:
          type: string
          pattern: ^[A-Z0-9]{1,5}$
          minLength: 1
          maxLength: 5
          description: |
            The code of the packaging as per IMO.

            **Condition:** only applicable to dangerous goods if specified in the [IMO IMDG code](https://www.imo.org/en/publications/Pages/IMDG%20Code.aspx). If not available, the `packageCode` as per UN recommendation 21 should be used.
          example: 1A2
        numberOfPackages:
          type: integer
          format: int32
          minimum: 1
          maximum: 99999999
          description: |
            Specifies the number of outer packagings/overpacks associated with this `Commodity`.

            **Condition:** In case this `OuterPackaging` includes `Dangerous Goods` the `numberOfPackages` is mandatory to provide
          example: 18
        description:
          type: string
          maxLength: 100
          description: |
            Description of the outer packaging/overpack.
          example: 'Drum, steel'
        dangerousGoods:
          type: array
          description: |
            A list of `Dangerous Goods` related to the `Commodity`
          items:
            $ref: '#/components/schemas/DangerousGoods'

    #################
    # Dangerous Goods
    #################
    DangerousGoods:
      type: object
      title: Dangerous Goods
      description: |
        Specification for `Dangerous Goods`. It is mandatory to provide one of `UNNumber` or `NANumber`. Dangerous Goods is based on **IMDG Amendment Version 41-22**.
      oneOf:
        - type: object
          title: UN Number
          properties:
            UNNumber:
              type: string
              pattern: ^\d{4}$
              minLength: 4
              maxLength: 4
              description: |
                United Nations Dangerous Goods Identifier (UNDG) assigned by the UN Sub-Committee of Experts on the Transport of Dangerous Goods and shown in the IMO IMDG.
              example: '1463'
          required:
            - UNNumber
        - type: object
          title: NA Number
          properties:
            NANumber:
              type: string
              pattern: ^\d{4}$
              minLength: 4
              maxLength: 4
              description: |
                Four-digit number that is assigned to dangerous, hazardous, and harmful substances by the United States Department of Transportation.
              example: '9037'
          required:
            - NANumber
      properties:
        codedVariantList:
          type: string
          pattern: ^[0-3][0-9A-Z]{3}$
          minLength: 4
          maxLength: 4
          description: |
            Four-character code supplied by Exis Technologies that assists to remove ambiguities when identifying a variant within a single `UN number` or `NA number` that may occur when two companies exchange DG information.

            Character | Valid Characters | Description
            :--------:|------------------|------------
            1| 0, 1, 2, 3|The packing group. Code 0 indicates there is no packing group
            2|0 to 9 and A to Z|A sequence letter for the PSN, or 0 if there were no alternative PSNs
            3 and 4|0 to 9 and A to Z|Two sequence letters for other information, for the cases where the variant is required because of different in subrisks, packing instruction etc.
          example: '2200'
        properShippingName:
          type: string
          maxLength: 250
          description: |
            The proper shipping name for goods under IMDG Code, or the product name for goods under IBC Code and IGC Code, or the bulk cargo shipping name for goods under IMSBC Code, or the name of oil for goods under Annex I to the MARPOL Convention.
          example: 'Chromium Trioxide, anhydrous'
        technicalName:
          type: string
          maxLength: 250
          description: |
            The recognized chemical or biological name or other name currently used for the referenced dangerous goods as described in chapter 3.1.2.8 of the IMDG Code.
          example: 'xylene and benzene'
        imoClass:
          type: string
          maxLength: 4
          description: |
            The hazard class code of the referenced dangerous goods according to the specified regulation. Examples of possible values are:
            - `1.1A` (Substances and articles which have a mass explosion hazard)
            - `1.6N` (Extremely insensitive articles which do not have a mass explosion hazard)
            - `2.1` (Flammable gases)
            - `8` (Corrosive substances)
          example: 1.4S
        subsidiaryRisk1:
          type: string
          pattern: ^[0-9](\.[0-9])?$
          minLength: 1
          maxLength: 3
          description: |
            Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
          example: '1.2'
        subsidiaryRisk2:
          type: string
          pattern: ^[0-9](\.[0-9])?$
          minLength: 1
          maxLength: 3
          description: |
            Any risk in addition to the class of the referenced dangerous goods according to the IMO IMDG Code.
          example: '1.2'
        isMarinePollutant:
          type: boolean
          description: |
            Indicates if the goods belong to the classification of Marine Pollutant.
          example: false
        packingGroup:
          type: integer
          format: int32
          minimum: 1
          maximum: 3
          description: |
            The packing group according to the UN Recommendations on the Transport of Dangerous Goods and IMO IMDG Code.
          example: 3
        isLimitedQuantity:
          type: boolean
          description: |
            Indicates if the dangerous goods can be transported as limited quantity in accordance with Chapter 3.4 of the IMO IMDG Code.
          example: false
        isExceptedQuantity:
          type: boolean
          description: |
            Indicates if the dangerous goods can be transported as excepted quantity in accordance with Chapter 3.5 of the IMO IMDG Code.
          example: false
        isSalvagePackings:
          type: boolean
          description: |
            Indicates if the cargo has special packaging for the transport, recovery or disposal of damaged, defective, leaking or nonconforming hazardous materials packages, or hazardous materials that have spilled or leaked.
          example: false
        isEmptyUncleanedResidue:
          type: boolean
          description: |
            Indicates if the cargo is residue.
          example: false
        isWaste:
          type: boolean
          description: |
            Indicates if waste is being shipped
          example: false
        isHot:
          type: boolean
          description: |
            Indicates if high temperature cargo is shipped.
          example: false
        isCompetentAuthorityApprovalRequired:
          type: boolean
          description: |
            Indicates if the cargo require approval from authorities
          example: false
        competentAuthorityApproval:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 70
          description: |
            Name and reference number of the competent authority providing the approval.
          example: '{Name and reference...}'
        segregationGroups:
          type: array
          description: |
            List of the segregation groups applicable to specific hazardous goods according to the IMO IMDG Code.

            **Condition:** only applicable to specific hazardous goods.
          items:
            type: string
            maxLength: 2
            description: |
              Grouping of Dangerous Goods having certain similar chemical properties. Possible values are:
              - `1` (Acids)
              - `2` (Ammonium Compounds)
              - `3` (Bromates)
              - `4` (Chlorates)
              - `5` (Chlorites)
              - `6` (Cyanides)
              - `7` (Heavy metals and their salts)
              - `8` (Hypochlorites)
              - `9` (Lead and its compounds)
              - `10` (Liquid halogenated hydrocarbons)
              - `11` (Mercury and mercury compounds)
              - `12` (Nitrites and their mixtures)
              - `13` (Perchlorates)
              - `14` (Permanganates)
              - `15` (Powdered metals)
              - `16` (Peroxides),
              - `17` (Azides)
              - `18` (Alkalis)
            example: '12'
        innerPackagings:
          type: array
          description: |
            A list of `Inner Packings` contained inside this `outer packaging/overpack`.
          items:
            $ref: '#/components/schemas/InnerPackaging'
        emergencyContactDetails:
          $ref: '#/components/schemas/EmergencyContactDetails'
        EMSNumber:
          type: string
          maxLength: 7
          description: |
            The emergency schedule identified in the IMO EmS Guide - Emergency Response Procedures for Ships Carrying Dangerous Goods. Comprises 2 values; 1 for spillage and 1 for fire. Possible values spillage: S-A to S-Z. Possible values fire: F-A to F-Z.
          example: F-A S-Q
        endOfHoldingTime:
          type: string
          format: date
          description: |
            Date by when the refrigerated liquid needs to be delivered.
          example: '2021-09-03'
        fumigationDateTime:
          type: string
          format: date-time
          description: |
            Date & time when the container was fumigated
          example: '2024-09-04T09:41:00Z'
        isReportableQuantity:
          type: boolean
          description: |
            Indicates if a container of hazardous material is at the reportable quantity level. If `TRUE`, a report to the relevant authority must be made in case of spill.
          example: false
        inhalationZone:
          type: string
          maxLength: 1
          minLength: 1
          description: |
            The zone classification of the toxicity of the inhalant. Possible values are:
            - `A` (Hazard Zone A) can be assigned to specific gases and liquids
            - `B` (Hazard Zone B) can be assigned to specific gases and liquids
            - `C` (Hazard Zone C) can **only** be assigned to specific gases
            - `D` (Hazard Zone D) can **only** be assigned to specific gases
          example: A
        grossWeight:
            $ref: '#/components/schemas/GrossWeight'
        netWeight:
            $ref: '#/components/schemas/NetWeight'
        netExplosiveContent:
            $ref: '#/components/schemas/NetExplosiveContent'
        netVolume:
            $ref: '#/components/schemas/NetVolume'
        limits:
          $ref: '#/components/schemas/Limits'
        specialCertificateNumber:
          type: string
          maxLength: 255
          description: |
            Text field to indicate certificate number & segment for specific stowage requirements overruling IMDG code
          example: '22663:3'
        additionalContainerCargoHandling:
          type: string
          maxLength: 255
          description: |
            Text field to provide cargo handling information already known at the booking stage.
          example: To be handled with extreme care
      required:
        - properShippingName
        - imoClass
        - isMarinePollutant
        - isLimitedQuantity
        - isExceptedQuantity
        - isSalvagePackings
        - isEmptyUncleanedResidue
        - isWaste
        - isHot
        - isCompetentAuthorityApprovalRequired
        - isReportableQuantity
        - emergencyContactDetails
        - grossWeight
    GrossWeight:
      type: object
      title: Gross Weight
      description: |
        Total weight of the goods carried, including packaging.
      properties:
        value:
          type: number
          format: float
          example: 12000.3
          minimum: 0
          exclusiveMinimum: true
          description: |
            The grand total weight of the DG cargo and weight per `UNNumber`/`NANumber` including packaging items being carried, which can be expressed in imperial or metric terms, as provided by the shipper.
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit
    NetWeight:
      type: object
      title: Net Weight
      description: |
        Total weight of the goods carried, excluding packaging.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            Total weight of the goods carried, excluding packaging.
          example: 2.4
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
          enum:
            - KGM
            - LBR
          example: KGM
      required:
        - value
        - unit
    NetExplosiveContent:
      type: object
      title: Net Explosive Content
      description: |
        The total weight of the explosive substances, without the packagingâs, casings, etc.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The total weight of the explosive substances, without the packagingâs, casings, etc.
          example: 2.4
        unit:
          type: string
          description: |
            Unit of measure used to describe the `netExplosiveWeight`. Possible values are:
            - `KGM` (Kilograms)
            - `LBR` (Pounds)
            - `GRM` (Grams)
            - `ONZ` (Ounce)
          enum:
            - KGM
            - LBR
            - GRM
            - ONZ
          example: KGM
      required:
        - value
        - unit
    NetVolume:
      type: object
      title: Net Volume
      description: |
        The volume of the referenced dangerous goods.

        **Condition:** only applicable to liquids and gas.
      properties:
        value:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: |
            The volume of the referenced dangerous goods.
          example: 2.4
        unit:
          type: string
          description: |
            The unit of measure which can be expressed in imperial or metric terms:
            - `FTQ` (Cubic foot)
            - `MTQ` (Cubic meter)
            - `LTR` (Litre)
          enum:
            - MTQ
            - FTQ
            - LTR
          example: MTQ
      required:
        - value
        - unit
    InnerPackaging:
      type: object
      title: Inner Packaging
      description: |
        Object for inner packaging specification
      properties:
        quantity:
          type: integer
          format: int32
          description: |
            Count of `Inner Packagings` of the referenced `Dangerous Goods`.
          example: 20
        material:
          type: string
          maxLength: 100
          description: |
            The `material` used for the `Inner Packaging` of the referenced `Dangerous Goods`.
          example: Plastic
        description:
          type: string
          maxLength: 100
          description: |
            Description of the packaging.
          example: Woven plastic water resistant Bag
      required:
        - quantity
        - material
        - description
    EmergencyContactDetails:
      type: object
      title: Emergency Contact Details
      description: |
        24 hr emergency contact details
      properties:
        contact:
          type: string
          maxLength: 255
          description: |
            Name of the Contact person during an emergency.
          example: Henrik Larsen
        provider:
          type: string
          maxLength: 255
          description: |
            Name of the third party vendor providing emergency support
          example: GlobeTeam
        phone:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 30
          description: |
            Phone number for the contact. Phone **MUST** include an international phone number format as defined in the [ITU-T recommendation E.123](https://www.itu.int/rec/T-REC-E.123/en).
          example: +45 70262970
        referenceNumber:
          type: string
          maxLength: 255
          description: |
            Contract reference for the emergency support provided by an external third party vendor.
          example: '12234'
      required:
        - contact
        - phone
    Limits:
      type: object
      title: Limits
      description: |
        Limits for the `Dangerous Goods`. The same `Temperature Unit` needs to apply to all attributes in this structure.
      properties:
        temperatureUnit:
          type: string
          description: |
            The unit for **all attributes in the limits structure** in Celsius or Fahrenheit
            - `CEL` (Celsius)
            - `FAH` (Fahrenheit)
          enum:
            - CEL
            - FAH
          example: CEL
        flashPoint:
          type: number
          format: float
          description: |
            Lowest temperature at which a chemical can vaporize to form an ignitable mixture in air.
            
            **Condition:** only applicable to specific hazardous goods according to the IMO IMDG Code.
          example: 42
        transportControlTemperature:
          type: number
          format: float
          description: |
            Maximum temperature at which certain substance (such as organic peroxides and self-reactive and related substances) can be safely transported for a prolonged period.
          example: 24.1
        transportEmergencyTemperature:
          type: number
          format: float
          description: |
            Temperature at which emergency procedures shall be implemented
          example: 74.1
        SADT:
          type: number
          format: float
          description: |
            Lowest temperature in which self-accelerating decomposition may occur in a substance
          example: 54.1
        SAPT:
          type: number
          format: float
          description: |
            Lowest temperature in which self-accelerating polymerization may occur in a substance
          example: 70
      required:
        - temperatureUnit

    #####################
    # Confirmed Equipment
    #####################
    ConfirmedEquipment:
      type: object
      title: Confirmed Equipment
      description: |
        The confirmed equipments for the booking
      properties:
        ISOEquipmentCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 4
          description: |
            Unique code for the different equipment size and type used to transport commodities. The code can refer to one of ISO size type (e.g. 22G1) or ISO type group (e.g. 22GP) following the [ISO 6346](https://www.iso.org/standard/83558.html) standard.
          example: 22G1
        units:
          type: integer
          format: int32
          minimum: 1
          description: |
            Number of confirmed equipment units
          example: 3
        containerPositionings:
          type: array
          description: |
            A list of date and time and locations of the customer facility where the container(s) will be loaded. If multiple Container positioning locations (`CPO`) are provided (multi-stop), the first location is where the empty container will be stuffed first. The order in which the `CPO` locations should be visited is implicitly defined by the shipper based on the date and time provided per location (all times are estimated).
            
            **Condition:** Only applicable to carrier haulage service at origin (`Receipt type at origin = 'SD'`). 
          items:
            $ref: '#/components/schemas/ContainerPositioningEstimated'
        emptyContainerPickup:
          $ref: '#/components/schemas/EmptyContainerPickup'
      required:
        - ISOEquipmentCode
        - units

    EmptyContainerPickup:
      type: object
      title: Empty Container Pickup
      description: |
        The date and time and location for the empty container pick-up.
        
        **Condition:** Only applicable to merchant haulage service at origin (`Receipt type at origin = 'CY'`).
      properties:
        dateTime:
          type: string
          format: date-time
          description: |
            The date and time for the pick-up of the empty container(s) at the Empty container depot release location, if provided.
          example: '2024-09-04T09:41:00Z'
        depotReleaseLocation:
          $ref: '#/components/schemas/EmptyContainerDepotReleaseLocation'

    ###########
    # Transport
    ###########
    Transport:
      type: object
      title: Transport
      description: |
        A single `leg` of the `Transport Plan`
      properties:
        transportPlanStage:
          type: string
          description: |
            Code qualifying a specific stage of transport e.g. pre-carriage, main carriage transport or on-carriage transport
            - `PRC` (Pre-Carriage)
            - `MNC` (Main Carriage Transport)
            - `ONC` (On-Carriage Transport)
          enum:
            - PRC
            - MNC
            - ONC
          example: PRC
        transportPlanStageSequenceNumber:
          type: integer
          format: int32
          description: |
            Sequence number of the transport plan stage
          example: 5
        loadLocation:
          $ref: '#/components/schemas/LoadLocation'
        dischargeLocation:
          $ref: '#/components/schemas/DischargeLocation'
        plannedDepartureDate:
          type: string
          format: date
          description: |
            The planned date of departure.
          example: '2021-05-17'
        plannedArrivalDate:
          type: string
          format: date
          description: |
            The planned date of arrival.
          example: '2021-05-19'
        modeOfTransport:
          type: string
          maxLength: 50
          description: |
            The mode of transport as defined by DCSA. The currently supported values include:
            - `VESSEL` (Vessel)
            - `RAIL` (Rail)
            - `TRUCK` (Truck)
            - `BARGE` (Barge)
            - `MULTIMODAL` (if multiple modes are used)
          example: VESSEL
        vesselName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
        vesselIMONumber:
          type: string
          pattern: ^\d{7,8}$
          minLength: 7
          maxLength: 8
          description: |
            The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel
          example: '9321483'
        carrierServiceCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 11
          description: |
            The carrier-specific code of the service for which the schedule details are published.
          example: FE1
        universalServiceReference:
          type: string
          pattern: ^SR\d{5}[A-Z]$
          minLength: 8
          maxLength: 8
          description: |
            A global unique service reference, as per DCSA standard, agreed by VSA partners for the service. The service reference must match the regular expression pattern: `SR\d{5}[A-Z]`. The letters `SR` followed by `5 digits`, followed by a checksum-character as a capital letter from `A to Z`.
          example: SR12345A
        carrierImportVoyageNumber:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The identifier of an import voyage. The carrier-specific identifier of the import Voyage.
          example: 2103N
        universalImportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the import Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
        carrierExportVoyageNumber:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The identifier of an export voyage. The carrier-specific identifier of the export Voyage.
          example: 2103S
        universalExportVoyageReference:
          type: string
          pattern: ^\d{2}[0-9A-Z]{2}[NEWSR]$
          minLength: 5
          maxLength: 5
          description: |
            A global unique voyage reference for the export Voyage, as per DCSA standard, agreed by VSA partners for the voyage. The voyage reference must match the regular expression pattern: `\d{2}[0-9A-Z]{2}[NEWSR]`
            - `2 digits` for the year
            - `2 alphanumeric characters` for the sequence number of the voyage
            - `1 character` for the direction/haul (`N`orth, `E`ast, `W`est, `S`outh or `R`oundtrip).
          example: 2103N
      required:
        - transportPlanStage
        - transportPlanStageSequenceNumber
        - loadLocation
        - dischargeLocation
        - plannedDepartureDate
        - plannedArrivalDate
    LoadLocation:
      type: object
      title: Load Location
      description: |
        An object to capture the `Load Location`.

        The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
      example:
        locationName: Shanghai Shengdong International Container Terminal
        UNLocationCode: CNSGH
        facility:
          facilityCode: SHENG
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS
    DischargeLocation:
      type: object
      title: Discharge Location
      description: |
        An object to capture the `Discharge Location`.

        The location can be specified in **any** of the following ways: `UN Location Code`, `Facility` or an `Address`.

        **Condition:** It is expected that if a location is specified in multiple ways (e.g. both as an `Address` and as a `Facility`) that both ways point to the same location.
      example:
        locationName: Transnet Port Terminals Cape Town
        UNLocationCode: ZACPT
        facility:
          facilityCode: TNCT
          facilityCodeListProvider: SMDG
      properties:
        locationName:
          type: string
          description: The name of the location.
          pattern: ^\S(?:.*\S)?$
          example: Port of Amsterdam
          maxLength: 100
        address:
          $ref: '#/components/schemas/Address'
        facility:
          $ref: '#/components/schemas/Facility'
        UNLocationCode:
          type: string
          pattern: ^[A-Z]{2}[A-Z2-9]{3}$
          minLength: 5
          maxLength: 5
          description: |
            The UN Location code specifying where the place is located. The pattern used must be

            - 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
            - 3 characters to code a location within that country. Letters A-Z and numbers from 2-9 can be used

            More info can be found here: [UN/LOCODE](https://unece.org/trade/cefact/UNLOCODE-Download)
          example: NLAMS

    ########################
    # Shipment Cut-off times
    ########################
    ShipmentCutOffTime:
      type: object
      title: Shipment Cut-Off Time
      description: |
        `Cut off times` defined by the carrier
      properties:
        cutOffDateTimeCode:
          type: string
          maxLength: 3
          description: |
            Code for the cut-off time. Possible values are:
            - `DCO` (Documentation cut-off)
            - `VCO` (VGM cut-off)
            - `FCO` (FCL delivery cut-off)
            - `LCO` (LCL delivery cut-off) **Condition:** only when the `Receipt Type at Origin` is `CFS`
            - `EFC` (Earliest full-container delivery date)
          example: DCO
        cutOffDateTime:
          type: string
          format: date-time
          description: |
            Actual cut-off time
          example: '2024-09-04T09:41:00Z'
      required:
        - cutOffDateTimeCode
        - cutOffDateTime

    ##########################
    # Advance Manifest Filings
    ##########################
    AdvanceManifestFiling:
      type: object
      title: Advance Manifest Filing
      description: |
        An Advance Manifest Filing defined by a Manifest type code in combination with a country code.

        A small list of **potential** examples:

        | manifestTypeCode | countryCode | Description |
        |-----------------------|:-------------:|-------------|
        |ACI|EG|Advance Cargo Information in Egypt|
        |ACE|US|Automated Commercial Environment in the United States|
        |AFR|JP|Cargo Summary Notification (CSN)|
      properties:
        manifestTypeCode:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The Manifest type code as defined by the provider.
          example: ACE
        countryCode:
          type: string
          pattern: ^[A-Z]{2}$
          minLength: 2
          maxLength: 2
          description: |
            The 2 characters for the country code using [ISO 3166-1 alpha-2](https://www.iso.org/obp/ui/#iso:pub:PUB500001:en)
          example: US
      example:
        manifestTypeCode: ACE
        countryCode: US
      required:
        - manifestTypeCode

    ########
    # Charge
    ########
    Charge:
      type: object
      title: Charge
      description: |
        Addresses the monetary value of freight and other service charges for a `Booking`.
      properties:
        chargeName:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            Free text field describing the charge to apply
          example: Documentation fee - Destination
        currencyAmount:
          type: number
          format: float
          minimum: 0
          description: |
            The monetary value of all freight and other service charges for a transport document, with a maximum of 2-digit decimals.
          example: 1012.12
        currencyCode:
          type: string
          pattern: ^[A-Z]{3}$
          minLength: 3
          maxLength: 3
          description: |
            The currency for the charge, using a 3-character code according to [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html).
          example: DKK
        paymentTermCode:
          type: string
          description: |
            An indicator of whether a charge is prepaid (PRE) or collect (COL). When prepaid, the charge is the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charge is the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        calculationBasis:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The code specifying the measure unit used for the corresponding unit price for this cost, such as per day, per ton, per square metre.
          example: Per day
        unitPrice:
          type: number
          format: float
          minimum: 0
          description: |
            The unit price of this charge item in the currency of the charge.
          example: 3456.6
        quantity:
          type: number
          format: float
          minimum: 0
          description: |
            The amount of unit for this charge item.
          example: 34.4
      required:
        - chargeName
        - currencyAmount
        - currencyCode
        - paymentTermCode
        - calculationBasis
        - unitPrice
        - quantity

    ##########################
    # OriginChargesPaymentTerm
    ##########################
    OriginChargesPaymentTerm:
      type: object
      title: Origin Charges Payment Term
      description: |
        An indicator of whether origin charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
      properties:
        haulageChargesPaymentTermCode:
          type: string
          description: |
            An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        portChargesPaymentTermCode:
          type: string
          description: |
            An indicator of whether the origin port charges are prepaid (`PRE`) or collect (`COL`).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        otherChargesPaymentTermCode:
          type: string
          description: |
            An indicator of whether origin charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE

    ###############################
    # DestinationChargesPaymentTerm
    ###############################
    DestinationChargesPaymentTerm:
      type: object
      title: Destination Charges Payment Term
      description: |
        An indicator of whether destination charges are prepaid (`PRE`) or collect (`COL`). When prepaid, the charges are the responsibility of the shipper or the Invoice payer on behalf of the shipper (if provided). When collect, the charges are the responsibility of the consignee or the Invoice payer on behalf of the consignee (if provided).
      properties:
        haulageChargesPaymentTermCode:
          type: string
          description: |
            An indicator of whether the costs for inland transportation to the port, when applicable, are prepaid (`PRE`) or collect (`COL`).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        portChargesPaymentTermCode:
          type: string
          description: |
            An indicator of whether the destination port charges are prepaid (`PRE`) or collect (`COL`).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE
        otherChargesPaymentTermCode:
          type: string
          description: |
            An indicator of whether destination charges (excluding port and haulage) are prepaid (`PRE`) or collect (`COL`).

            - `PRE` (Prepaid)
            - `COL` (Collect)
          enum:
            - PRE
            - COL
          example: PRE

    ########
    # Vessel
    ########
    Vessel:
      type: object
      title: Vessel
      description: |
        Vessels related to this booking request.
        
        **Condition:** Mandatory if `carrierExportVoyageNumber` is provided and `carrierServiceCode` or `carrierServiceName` are blank. If `routingReference` is provided - this object MUST not be provided.
      required:
        - name
      properties:
        name:
          type: string
          pattern: ^\S(?:.*\S)?$
          maxLength: 50
          description: |
            The name of the Vessel given by the Vessel Operator and registered with IMO.
          example: King of the Seas
        vesselIMONumber:
          type: string
          pattern: ^\d{7,8}$
          minLength: 7
          maxLength: 8
          description: |
            The unique reference for a registered Vessel. The reference is the International Maritime Organisation (IMO) number, also sometimes known as the Lloyd&apos;s register code, which does not change during the lifetime of the vessel
          example: '9321483'